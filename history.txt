1505143926306:1
1505144032109:x = 1
1505144035963:del(x)
1505144228383:library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
1505144230707:detach("package:lattice", unload=TRUE)
1505144240185:cls
1505144252096:c([1, 2, 3])
1505144256168:c(1, 2, 3)
1505144265399:x = c(1, 2, 3)
1505144267836:x = 1
1505144352262:getwd()
1505144354873:ls
1505144366956:rm
1505144370082:ls
1505144422857:getwd()
1505144437925:setwd('R Projects')
1505144440966:getwd()
1505144655175:?library
1505300486063:1
1505300495400:# Hi
1505300497691:Hi
1505300500522:#Hi
1505300504079:# Hi
1505300603804:x <- rnorm(100)
1505300604904:x
1505300608546:head(x)
1505300614656:mean(x)
1505300623515:sd(x)
1505300628810:min(x)
1505300631358:max(x)
1505300680339:tail(x)
1505649433990:library(foreign)
1505649440698:library(foreigns)
1505649500845:saldata <- read.spss("")
1505649504890:getwd()
1505649596276:saldata <- read.spss("/Users/jayadeepsasikumar/MSc in Data Analytics/Probability and Statistical Inference/Week 2 - Sep 18 to Sep 22/salarynorm.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1505649600805:saldata
1505649632988:colnames(saldata) <- tolower(colnames(saldata))
1505649643140:colnames(saldata)
1505649652990:colnames(saldata) <- toupper(colnames(saldata))
1505649654104:colnames(saldata)
1505649656624:colnames(saldata) <- tolower(colnames(saldata))
1505649657750:colnames(saldata)
1505649671002:saldata$gender
1505649687445:str(saldata$gender)
1505649700129:summary(saldata$gender)
1505649710368:summary(saldata$salary)
1505649731733:require(RcmdrMisc)
1505649768499:install.packages("Rcmdr")
1505728374382:1
1505728394989:x <- 1
1505728414017:y <- data.frame()
1505728516549:B = data.frame(x1=runif(100000), x2=runif(100000), x3=runif(100000))
1505728525658:summary(B)
1505728778815:library(help='base')
1505728834147:install.packages('devtools')
1505728894670:library(help='devtools')
1505729019947:install.packages('tinyverse')
1505729070083:install.packages('tidyverse')
1505729173957:x = 10
1505729174823:x
1505729180579:x <<- 12
1505729181164:x
1505729218750:x <- 1:10
1505729219550:x
1505729231519:typeof(x)
1505729236016:x ^ 2
1505744324685:x = 1
1505744327819:typeof(x)
1505744331076:x = 1L
1505744331914:typeof(x)
1505744367740:(0.5 - 0.4) == 0.1
1505744371002:(0.5 - 0.4)
1505744376302:x <- (0.5 - 0.4)
1505744380317:typeof(x)
1505744391707:0.1 == 0.1
1505744401356:typeof(0.1)
1505744437328:all.equal(0.5 - 0.4, 0.1)
1505744574969:x <- 'abcdefg'
1505744580507:x[1]
1505744583217:x[2]
1505744585572:x[3]
1505744587492:x[0]
1505744593353:typeof(x)
1505744772301:x
1505744777924:substr(x)
1505744787021:?substr
1505744800541:substr(x, 1, 7)
1505744802774:substr(x, 1, 8)
1505744804626:substr(x, 1, 6)
1505744808896:substr(x, 0, 7)
1505744811679:substr(x, -1, 7)
1505744818693:substr(x, 1, 2)
1505744827342:substr(x, 2, 6)
1505744848095:as.double(x)
1505744852539:y = as.double(x)
1505744854255:y
1505744887529:x = as.character('')
1505744899930:as.integer('x')
1505744905962:x <-as.integer('x')
1505744987806:as.double('1')
1505744997540:as.integer('1')
1505745000806:as.integer('1.2')
1505745003952:as.integer('1.8')
1505745017580:if
1505745023512:()
1505745028919:if T:
1505745030989:if T
1505745036055:?if
1505745039573:endif
1505745073445:if(T) x <- 1 else x <- 2
1505745077857:if(T) x <- 3 else x <- 2
1505745215746:y <- 1:10
1505745219447:typeof(y)
1505745226935:y <- 1.0:10.0
1505745227955:y
1505745230488:typeof
1505745235320:typeof(y)
1505745247542:vect
1505745260390:as.vector(y)
1505745264981:v = as.vector(y)
1505745265370:v
1505745269449:typeof(v)
1505745330393:x <- c(1, 2, 3, 4)
1505745331139:x
1505745333358:typeof(x)
1505745344841:as.integer(x)
1505745350141:x <- as.integer(x)
1505745350895:x
1505745352800:typeof
1505745354414:typeof(x)
1505745377373:x <- c(1L, 2, 3, 4)
1505745379601:typeof(x)
1505745385910:x <- c(1, 2, 3, 4L)
1505745387207:typeof(x)
1505745423605:x <- c('1', 2, 3, 4)
1505745424174:x
1505745426711:typeof(x)
1505745434478:x <- c(1, 2, 3, '4L')
1505745435029:x
1505745517213:x <- c(1, T)
1505745517675:x
1505745524622:typeof(x)
1505745532157:x <- c(1L, T)
1505745532532:x
1505745534323:typeof(x)
1505745541299:x <- c('1L', T)
1505745542314:x
1505745550284:as.character(T)
1505745565034:c(1, 2, 3, 4, T)
1505745568784:c(1, 2, 3, 4, F)
1505745612901:c(1.2, 1)
1505745614549:c(1.2, 1L)
1505745636972:x <- c(1.2, 1L)
1505745637773:x
1505745641035:typeof(x)
1505745936924:age = c(71, 56, 71, 71)
1505745953684:name = c('Donald', 'Barack', 'George', 'Bill')
1505745970591:democrat = c(F, T, F, T,)
1505745972184:democrat = c(F, T, F, T)
1505746049047:y = c(a=1, b=2, c=3, d=4)
1505746049908:y
1505746059164:y = c('a'=1, b=2, c=3, d=4)
1505746060108:y
1505746065311:y = c('a'=1, b=2, c=3, d=4, 5=5)
1505746074689:y = c('a'=1, b=2, c=3, d=4, 5)
1505746075828:y
1505746080803:y = c('a'=1, b=2, c=3, d=4, 5, f=6)
1505746082080:y
1505746094081:names(y)
1505746097447:names(age)
1505746106578:names(age) <- name
1505746108840:age
1505746118470:names(age) <- NULL
1505746120608:age
1505746123068:names(age) <- NULL
1505746128682:names <- name
1505746130686:names
1505746145053:names(age) = names
1505746148863:names
1505746152972:age
1505746185872:remove(names)
1505746189055:age
1505746201545:typeof(NULL)
1505746204672:NULL
1505746262179:length(age)
1505746273416:nchar(age)
1505746335910:?list
1505746368639:trump = c("Donald", 71, F)
1505746370146:trump
1505746377253:trump = list(trump)
1505746378740:trump
1505746397248:trump = list("Donald", 71, F)
1505746399404:trump
1505746422441:trump[[0]]
1505746427044:trump[[1]]
1505746431252:trump[[2]]
1505746434504:trump[[3]]
1505746526664:names(trump) <- c('name', 'age', 'democrat')
1505746530180:trump
1505746552057:names(trump) <- NULL
1505746562923:trump = list("Donald", 71, F)
1505746585995:?names
1505746619568:length(trumo)
1505746621348:length(trump)
1505746689617:x = c(1, 2, 3)
1505746702636:names(x) = c('a', 'b', 'c')
1505746703422:x
1505746712177:x = c(1, 2, 3)
1505746725225:names(x) = list('a', 1, 'b')
1505746725721:x
1505746733786:x$1
1505746736911:x$a
1505747479576:name
1505747480267:age
1505747483427:democrat
1505747507391:presidents = data.frame(name, age, democrat)
1505747515856:x
1505747524316:names(x)
1505747545532:x = data.frame(name, age, president)
1505747548409:x = data.frame(name, age, presidents)
1505747549698:x
1505747573052:presidents
1505747605003:presidents <- data.fra
1505747611890:presidents <- data.frame(age, name)
1505747615113:presidents
1505747621465:presidents <- data.frame(age)
1505747622668:presidents
1505747625876:age
1505747635557:democrat
1505747643593:presidents <- data.frame(democrat)
1505747645482:democrat
1505747648192:presidents
1505747816146:name
1505747824959:presidents <- NULL
1505747827118:presidents
1505747836726:presidents <- data.frame(name)
1505747840238:presidents
1505747843258:presidents <- data.frame(name, age)
1505747844371:presidents
1505747851424:democrat
1505747881289:names(democrat) <- c('Obama', 'Trump', 'Bush', 'Clinton')
1505747884269:democrat
1505747940085:presidents = NULL
1505748000744:presidents = data.frame(name, age, democrat)
1505748003792:presidents
1505748012286:presidents = data.frame(name, democrat)
1505748014828:presidents
1505748019948:presidents = data.frame(name, democrat, age)
1505748022134:presidents
1505748035923:presidents = data.frame(name, age, democrat)
1505748038182:presidents
1505748056379:View(presidents)
1505748080957:View(presidents)
1505748243440:factor(democrat)
1505748251436:factor(presidents)
1505748278783:factor(age)
1505748299605:?factor
1505748364555:levels(age)
1505748366992:age
1505748376557:levels(name)
1505748415757:gender = factor(c('F', 'M', 'X'))
1505748417526:gender
1505748427890:levels(gender)
1505748435934:?levels
1505748453461:typeof(gender)
1505748458684:str(gender)
1505748460630:gender
1505748482138:?factor
1505748623122:View(presidents)
1505748631946:gender
1505748671822:gender <- factor(c('M', 'M', 'M', 'M'), levels=levels(gender))
1505748673075:gender
1505748686947:presidents <- data.frame(presidents, gender)
1505748695023:str(presidents)
1505748751236:presidents <- data.frame(presidents)
1505748759196:presidents <- data.frame(presidents, stringsAsFactors = F)
1505748761451:presidents
1505748768768:str(presidents)
1505748794528:presidents <- data.frame(name, age, democrat, gender, stringsAsFactors = F)
1505748798510:presidents
1505748802512:str(presidents)
1505748841848:presidents <- data.frame(name, age, democrat, gender)
1505748845590:str(presidents)
1505748907181:presidents$name
1505748913774:presidents$age
1505748920601:presidents <- data.frame(name, age, democrat, gender, stringsAsFactors = F)
1505748922581:presidents$name
1505748986275:gender
1505748993355:is.numeric(gender)
1505749002360:trump
1505749027793:names(trump) <- c('name', 'age', 'democrat')
1505749031685:trump
1505749039429:is.numeric(gender)
1505749045998:typeof(gender)
1505749054711:is.integer(gender)
1505749068641:typeof(presidents)
1505749088699:name
1505749116158:name[2]
1505749198032:name[2]
1505749296140:age
1505749299988:age[5]
1505749307728:y <- age[5]
1505749308691:x
1505749311248:y
1505749320914:names(y) = NULL
1505749322529:y
1505749352050:name(c[1, 3])
1505749367532:name[c(1, 3)]
1505749370672:name
1505749463956:name[-1]
1505749474335:name[-c(1, 3)]
1505749478441:name[c(1, 3)]
1505749485644:name[c(1, 3)] + name
1505749588076:name
1505749589871:democrat
1505749607439:names(democrat) <- names(age)
1505749609708:democrat
1505749613670:name
1505749621851:name(democrat)
1505749627403:name[democrat]
1505749673981:name[-democrat]
1505749679837:democrat
1505749697760:name[!democrat]
1505749745135:typeof(democrat)
1505907940014:getwd
1505907945261:getwd()
1505907991224:setwd("/Users/jayadeepsasikumar/")
1505907999610:getwd()
1505908007109:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 2 - Sep 18 to Sep 22")
1505908023283:?library
1505908039383:?library(foreign)
1505908044427:library(foreign)
1505908061005:knitr::opts_chunk$set(echo = TRUE)
1505908061113:saldata <- read.spss("C:/tempR/salarynorm.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1505908084743:saldata <- read.spss("salarynorm.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1505908093700:colnames(saldata)
1505908107451:colnames(saldata) <- tolower(colnames(saldata))
1505908116552:colnames(saldata)
1505908148609:saldata$gender
1505908158668:str(saldata$gender)
1505908164928:summary(saldata$gender)
1505908169512:summary (saldata$salary)
1505919961587:getwd()
1505920211008:library(foreign)
1505920255554:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 2 - Sep 18 to Sep 22")
1505920276694:saldata <- read.spss("salarynorm.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1505920286028:colnames(saldata) <- tolower(colnames(saldata))
1505920295283:summary(saldata$gender)
1505920302263:str(saldata$gender)
1505920331088:detach("package:foreign", unload=TRUE)
1505920332303:library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
1505920620397:require(RcmdrMisc)
1505920626374:require(RcmdrMisc)
1505920650820:numSummary(saldata$salary)
1505920678025:print
1505920684779:?print
1505921352091:print(mean(saldata$salary))
1505921362573:print(mean(saldata$salary), digits=1)
1505921368566:print(mean(saldata$salary), digits=2)
1505921371131:print(mean(saldata$salary), digits=7)
1505921375969:print(mean(saldata$salary), digits=8)
1505921380278:print(mean(saldata$salary), digits=10)
1505921439894:getmode <- function(x) {
1505921439895:uniqv <- unique(x)
1505921439896:}
1505921475458:getmode <- function(x) {
1505921475459:uniqv <- unique(x)
1505921475460:uniqv[which.max(tabulate(match(x, uniqv)))]
1505921475460:}
1505921487578:getmode(saldata$salary)
1505921510062:x <- saldata$salary
1505921532519:typeof(x)
1505921646938:unique(x)
1505921739909:ux <- unique(x)
1505921741060:ux
1505921765429:match(x, ux)
1505921785007:tabulate(match(x, ux))
1505921795449:x
1505921804244:length(x)
1505921806631:length(ux)
1505921865592:me = mean(saldata$salary)
1505921866931:me
1505921884054:print(me, digits=8)
1505921898961:me = round(me, 2)
1505921900040:me
1505921901996:print(me, digits=8)
1505921914162:sd(saldata$salary)
1505921915981:sd(saldata$salary, 2)
1505921922461:round(sd(saldata$salary,2))
1505921931799:round(sd(saldata$salary), 2)
1505922061022:require(moments)
1505922114705:library(moments)
1505922148287:install.packages(moments)
1505922151650:install.packages('moments')
1505922163352:require(moments)
1505922184903:skewness(saldata$salary)
1505922713660:skewness(saldata$salary)
1505923190949:detach("package:RcmdrMisc", unload=TRUE)
1505923192767:library("RcmdrMisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
1506003024236:v <- c(1, 2, 3, 1, 2, 1)
1506003041606:uniquev <- unique(v)
1506003043757:uniquev
1506003061374:match(v, uniquev)
1506003079314:v
1506003093696:tabulate(match(v, uniquev))
1506003123865:which.max(tabulate(match(v, uniquev)))
1506003155737:v <- c(3, 2, 2, 1, 1, 1)
1506003158750:uniquev <- unique(v)
1506003167080:which.max(tabulate(match(v, uniquev)))
1506003212498:tabulate(match(v, uniquev))
1506003243434:max(tabulate(match(v, uniquev)))
1506003268853:y <- tabulate(match(v, uniquev))
1506003270043:y
1506003275398:typeof(y)
1506003399362:?match
1506003469486:v <- c(4, 3, 3, 2, 2, 2, 1, 1, 1, 1)
1506003478348:uniqv <- unique(v)
1506003486430:match(v, uniqv)
1506003527390:v <- c(4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1)
1506003530990:uniqv <- unique(v)
1506003533244:match(v, uniqv)
1506003552698:v <- c(4, 3, 3, 2, 12, 2, 1, 1, 1, 1, 1)
1506003554569:uniqv <- unique(v)
1506003562499:uniqv
1506003577606:match(v, uniqv)
1506003699392:tabulate(match(v, uniqv))
1506003737090:which.max(tabulate(match(v, uniqv)))
1506003766466:uniqv[which.max(tabulate(match(v, uniqv)))]
1506003774236:uniqv
1506003812107:v
1506003817196:uniqv
1506003889405:match(v, uniqv)
1506003917868:tabulate(match(v, uniqv))
1506003954705:which.max(tabulate(match(v, uniqv)))
1506003962634:uniqv[which.max(tabulate(match(v, uniqv)))]
1506006701989:chickwts
1506006730223:chickwts
1506006732911:ChickWeight
1506006759127:ChickWeight
1506006835710:ChickWeight
1506006859277:summary(ChickWeight)
1506006861934:summary(ChickWeight)
1506006873035:str(ChickWeight)
1506006898726:View(ChickWeight)
1506006937228:?ChickWeight
1506006987420:chickWeights
1506006992917:chickWeights <- ChickWeight
1506007008052:chickWeights
1506007079694:mean(chickWeights?weight)
1506007086944:mean(chickWeights$weight)
1506007196899:mean(chickWeights$weight[chickWeights$Time == 21])
1506007295265:rows(chickWeights)
1506007299429:numrows(chickWeights)
1506007321155:length(chickWeights)
1506007366011:nrow(chickWeights)
1506007425342:mean.adult.chick.weight <- mean(chickWeights$weight[chickWeights$Time == 21])
1506007497039:nrow(chickWeights[chickWeights$weight > mean.adult.chick.weight])
1506007529175:nrow(chickWeights[chickWeights$weight > mean.adult.chick.weight])
1506007530008:chickWeights[chickWeights$weight > mean.adult.chick.weight]
1506007548594:chickWeights[chickWeights$weight=mean.adult.chick.weight]
1506007557652:chickWeights[chickWeights$weight == mean.adult.chick.weight]
1506007565098:chickWeights[chickWeights$weight >= mean.adult.chick.weight]
1506007624348:chickWeights[chickWeights$weight >= mean.adult.chick.weight, ]
1506007642277:nrows(chickWeights[chickWeights$weight > mean.adult.chick.weight, ])
1506007647118:nrow(chickWeights[chickWeights$weight > mean.adult.chick.weight, ])
1506007678068:nrow(chickWeights[chickWeights$weight > mean.adult.chick.weight & , chickWeights$Time == 21])
1506007764044:nrow(chickWeights[with(chickWeights, weight > mean.adult.chick.weight & Time == 21)])
1506007770025:nrow(chickWeights[with(chickWeights, weight > mean.adult.chick.weight & Time == 21)], )
1506007804446:columns
1506007835480:colnames(chickWeights)
1506007857849:colnames(chickWeights) <- tolower(colnames(chickWeights))
1506007864066:nrow(chickWeights[with(chickWeights, weight > mean.adult.chick.weight & Time == 21)], )
1506007868821:nrow(chickWeights[with(chickWeights, weight > mean.adult.chick.weight & time == 21)], )
1506007882929:nrow(chickWeights[with(chickWeights, weight > mean.adult.chick.weight & time == 21), ])
1506007927833:mean.adult.chick.weight <- mean(chickWeights$weight[chickWeights$Time == 21])
1506007927834:heavy.chickens = nrow(chickWeights[with(chickWeights,
1506007927834:weight > mean.adult.chick.weight
1506007927835:& time == 21), ])
1506007935182:heavy.chickens
1506007947227:nrow(chickWeights[with(chickWeights, weight > mean.adult.chick.weight & time == 21), ])
1506007958106:nrow(chickWeights[with(chickWeights, weight > mean.adult.chick.weight & time == 21), ])
1506008151139:str(chickWeights$diet)
1506008168493:diets = chickWeights$diet
1506008187280:unique.diets = unique(diets)
1506008436725:x = 1
1506008437394:x
1506008462951:unique.diets
1506008492171:tabulate(match(diets, unique.diets))
1506008551975:mean.adult.chick.weight <- mean(chickWeights$weight[chickWeights$Time == 21])
1506008551975:heavy.chickens = nrow(chickWeights[with(chickWeights,
1506008551976:weight > mean.adult.chick.weight
1506008551976:& time == 21), ])
1506008551977:diets = chickWeights$diet
1506008551977:unique.diets = unique(diets)
1506008551979:diet.strength = tabulate(match(diets, unique.diets))
1506008551979:names(diet.strength) <- unique.diets
1506008560194:unique.diets
1506008568006:diet.strength
1506008632292:chickWeights[chickWeights$Time == 21]
1506008648943:chickWeights[chickWeights$Time = 21]
1506008658878:chickWeights[chickWeights$Time == 21, ]
1506008671275:chickWeights[chickWeights$time == 21, ]
1506008734626:chickWeights = ChickWeight
1506008734627:colnames(chickWeights) <- tolower(colnames((chickWeights)))
1506008734628:mean.adult.chick.weight <- mean(chickWeights$weight[chickWeights$time == 21])
1506008734628:heavy.chickens = nrow(chickWeights[with(chickWeights,
1506008734629:weight > mean.adult.chick.weight
1506008734629:& time == 21), ])
1506008734630:diets = chickWeights$diet
1506008734630:unique.diets = unique(diets)
1506008734631:diet.strength = tabulate(match(diets, unique.diets))
1506008734632:names(diet.strength) <- unique.diets
1506008804675:mean.adult.chick.weight
1506008847214:heavy.chicken
1506008851390:heavy.chicken
1506008852387:heavy.chickens
1506008887800:diet.strength
1506009061416:subset(chickWeights, weight > mean.adult.chick.weight & time == 21)
1506009072805:heavy.chickens = subset(chickWeights, weight > mean.adult.chick.weight & time == 21)
1506009078388:nrow(heavy.chickens)
1506009277619:chickWeights = ChickWeight
1506009277620:colnames(chickWeights) <- tolower(colnames((chickWeights)))
1506009277621:mean.adult.chick.weight <- mean(chickWeights$weight[chickWeights$time == 21])
1506009277621:# mean.adult.chick.weight = 218.6889
1506009277622:heavy.chickens = subset(chickWeights, weight > mean.adult.chick.weight & time == 21)
1506009277623:heavy.chickens.count <- nrow(heavy.chickens)
1506009277625:# heavy.chickens.count = 21
1506009277625:diets = chickWeights$diet
1506009277627:unique.diets = unique(diets)
1506009277628:diet.strength = tabulate(match(diets, unique.diets))
1506009277630:names(diet.strength) <- unique.diets
1506009277631:# diet.strength =   1   2   3   4
1506009277631:#                 220 120 120 118
1506009285295:diet.strength
1506009484085:Titanic
1506009492577:?Titanic
1506009952566:View(Titanic)
1506010185432:x <- c('a', 'b', 'a', 'b')
1506010189911:ux <- unique(x)
1506010194242:match(x, ux)
1506010245212:tabulate(match(x, ux))
1506010467292:as.factor(diets)
1506010478099:summary(as.factor(diets))
1506010620434:sum(chickWeights[chickWeights$time == 21, ])
1506010625968:sum(chickWeights[chickWeights$time == 21])
1506010714112:Titanic
1506010730750:titanic = as.data.frame(Titanic)
1506010733237:titanic
1506010816283:colnames(titanic) <- tolower(colnames((titanic)))titanic
1506010819672:colnames(titanic) <- tolower(colnames((titanic)))
1506010836379:View(titanic)
1506010848034:nrow(titanic)
1506010872269:titanic[survived == 'Yes']
1506010881329:titanic[titanic$survived == 'Yes']
1506010887171:titanic[titanic$survived == 'Yes', ]
1506010895698:nrow(titanic[titanic$survived == 'Yes', ])
1506010952202:titanic = as.data.frame(Titanic)
1506010952203:colnames(titanic) <- tolower(colnames((titanic)))
1506010952204:survived.count = nrow(titanic[titanic$survived == 'Yes', ])
1506010952205:total.count = nrow(titanic)
1506010952206:survival.percentage = survived.count * 100 / total.count
1506010956882:> survival.percentage
1506010962238:survival.percentage
1506011083191:survived = titanic[titanic$survived == 'Yes', ]
1506011083193:survived.crew = subset(titanic, titanic$survived == 'Yes' & class == 'Crew')
1506011083194:survived.crew.count = nrow(survived.crew)
1506011083195:total.count = nrow(titanic)
1506011083196:survival.percentage = survived.crew.count * 100 / total.count
1506011089392:survival.percentage
1506011264311:chickWeights = ChickWeight
1506011264312:colnames(chickWeights) <- tolower(colnames((chickWeights)))
1506011264314:mean.adult.chick.weight <- mean(chickWeights$weight[chickWeights$time == 21])
1506011264315:# mean.adult.chick.weight = 218.6889
1506011264316:heavy.chickens <- subset(chickWeights, weight > mean.adult.chick.weight & time == 21)
1506011264317:heavy.chickens.count <- nrow(heavy.chickens)
1506011264318:# heavy.chickens.count = 21
1506011264319:diets <- chickWeights$diet
1506011264320:unique.diets <- unique(diets)
1506011264320:diet.strength <- tabulate(match(diets, unique.diets))
1506011264321:names(diet.strength) <- unique.diets
1506011264322:# diet.strength =   1   2   3   4
1506011264323:#                 220 120 120 118
1506011264324:#
1506011264324:# Easier method - summary(as.factor(diets))
1506011264325:titanic = as.data.frame(Titanic)
1506011264325:colnames(titanic) <- tolower(colnames((titanic)))
1506011264326:survived = titanic[titanic$survived == 'Yes', ]
1506011264328:survived.crew = subset(titanic, survived == 'Yes' & class == 'Crew')
1506011264329:survived.crew.count = nrow(survived.crew)
1506011264330:total.count = nrow(titanic)
1506011264330:crew.survival.percentage = survived.crew.count * 100 / total.count
1506011264331:# crew.survival.percentage = 12.5
1506011264332:survived.female.crew = subset(survived.crew, sex == 'Female')
1506011279980:nrow(survived.female.crew)
1506011324927:survived.female.crew.count = sum(survived.crew$sex == 'Female')
1506011329509:survived.female.crew.count
1506011553181:survived = titanic[titanic$survived == 'Yes', ]
1506011553182:survived.crew = subset(titanic, survived == 'Yes' & class == 'Crew')
1506011553183:survived.crew.count = sum(survived.crew$freq)
1506011553183:total.count = sum(titanic$freq)
1506011553184:crew.survival.percentage = survived.crew.count * 100 / total.count
1506011560626:crew.survival.percentage
1506011649084:survived.female.crew = subset(survived.crew, sex == 'Female')
1506011649085:survived.female.crew.count = sum(survived.female.crew$freq)
1506011659689:survived.female.crew.count
1506011867259:for (level in levels(as.factor(titanic$class))) print level
1506011958544:survived <- titanic[titanic$survived == 'Yes', ]
1506011958545:survived.crew <- subset(titanic, survived == 'Yes' & class == 'Crew')
1506011958546:survived.crew.count <- sum(survived.crew$freq)
1506011958546:total.crew.count <- sum(titanic.crew$freq)
1506011958548:crew.survival.percentage <- survived.crew.count * 100 / total.count
1506012013561:titanic <- as.data.frame(Titanic)
1506012013562:colnames(titanic) <- tolower(colnames((titanic)))
1506012013563:survived <- titanic[titanic$survived == 'Yes', ]
1506012013564:titanic.crew <- subset(titanic, class == 'Crew')
1506012013566:survived.crew <- subset(titanic.crew, survived == 'Yes')
1506012013568:survived.crew.count <- sum(survived.crew$freq)
1506012013569:total.crew.count <- sum(titanic.crew$freq)
1506012013570:crew.survival.percentage <- survived.crew.count * 100 / total.count
1506012018052:crew.survival.percentage
1506012051113:survived <- titanic[titanic$survived == 'Yes', ]
1506012058181:titanic.crew <- subset(titanic, class == 'Crew')
1506012067229:survived.crew <- subset(titanic.crew, survived == 'Yes')
1506012084849:survived <- titanic[titanic$survived == 'Yes', ]
1506012084850:titanic.crew <- subset(titanic, class == 'Crew')
1506012084851:survived.crew <- subset(titanic.crew, survived == 'Yes')
1506012084851:survived.crew.count <- sum(survived.crew$freq)
1506012084852:total.crew.count <- sum(titanic.crew$freq)
1506012084853:crew.survival.percentage <- survived.crew.count * 100 / total.crew.count
1506012090700:crew.survival.percentage
1506012141996:for (label in labels(as.factor(titanic$class))) print labels()
1506012145036:for (label in labels(as.factor(titanic$class))) print label
1506012156541:for (label in labels(as.factor(titanic$class))) print(label)
1506012174463:titanic$class
1506012255239:iris
1506012269717:iris.df = iris
1506012284032:View(iris)
1506012291219:View(iris.df)
1506012373095:virginica <- subset(iris.df, species == 'virginica')
1506012389851:colnames(iris.df) <- tolower(colnames(iris.df))
1506012403791:virginica <- subset(iris.df, species == 'virginica')
1506012431293:nrow(iris)
1506012435811:nrow(virginica)
1506012473081:mean(virginica$sepal.length/virginica$petal.length)
1506013037646:summary(virginica)
1506013181417:x <- summary(virginica)
1506013182134:x
1506013185618:typeof(x)
1506013191656:x[2]
1506013199994:x[3]
1506013203191:x[3][1]
1506013205699:x[3][2]
1506013349635:colMeans(iris.df)
1506013440898:colMeans(iris.df[1:4])
1506013456710:col.means = colMeans(iris.df[1:4])
1506013459144:col.means
1506013622677:mtcars
1506013631507:View(mtcars)
1506014101131:View(iris)
1506014116845:View(virginica)
1506014573351:>mtcars
1506270022281:require(asdas)
1506270028227:library(asdas)
1506270052214:require(foreign)
1506270065156:salary
1506270090729:getwd()
1506270323123:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 2 - Sep 18 to Sep 22")
1506270406546:salary = read.spss('salarynorm.sav')
1506270410926:salary
1506270426739:salary = read.spss('salarynorm.sav', use.value.labels=TRUE)
1506270428549:salary
1506270441048:salary = read.spss('salarynorm.sav', use.value.labels=TRUE, max.value.labels=Inf)
1506270442570:salary
1506270450923:salary = read.spss('salarynorm.sav', use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1506270453539:salary
1506270470872:colnames(salary) = tolower(salary)
1506272514600:require(RcmdrMisc)
1506272537959:numSummary(salary$salary)
1506272542820:salart
1506272544502:salary
1506272570536:salary = read.spss('salarynorm.sav', use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
1506272581502:colnames(salary) = tolower(colnames(salary))
1506272584715:numSummary(salary$salary)
1506272596165:summary(salary$salary)
1506272629627:knitr::opts_chunk$set(echo = TRUE)
1506272629906:range(saldata$salary)
1506272647245:saldata <- salary
1506272649234:range(saldata$salary)
1506272653691:quantile(saldata$salary)
1506272660645:x=quantile(saldata$salary); x[1]
1506272667739:x=quantile(saldata$salary); x[2]
1506272670849:IQR(saldata$salary)
1506272675590:var(saldata$salary)
1506272676357:sd(saldata$salary)
1506272677892:round(sd(saldata$salary,2)) #rounded to 2 decimal places
1506272688599:round(sd(saldata$salary), 2) #rounded to 2 decimal places
1506272696237:library("moments")
1506272704095:skewness(saldata$salary, na.rm=TRUE)
1506272750933:kurtosis(saldata$salary, na.rm=TRUE)
1506272756966:unique(saldata$gender)
1506272766911:gender
1506272771135:saldata$gender
1506272780868:typeof(saldata$gender)
1506272784462:remove(salary)
1506272815087:library('plyr')
1506272824092:count
1506272834723:count(saldata$gender)
1506272844959:tab<-table(saldata$gender, saldata$rank)
1506272850911:tab
1506272853622:tab
1506272859709:tab<-table(saldata$gender, saldata$rank)
1506272863594:rab
1506272866097:tab
1506272871454:tab
1506272885574:table
1506272926856:addmargins(tab)
1506272932670:tab
1506272937183:addmargins(tab)
1506272944495:prop
1506272951923:prop.table(tab)
1506272989385:tab <- prop.table(tab)
1506272990935:tab
1506272998316:tab <- addmargins(tab)
1506272999066:tab
1506273012914:hist(saldata$salary)
1506273032872:hist(saldata$salary, probability=TRUE)
1506273035548:hist(saldata$salary)
1506273037074:hist(saldata$salary, probability=TRUE)
1506273049638:density(saldata$zsalary)
1506273063261:lines(density(saldata$zsalary))
1506273074917:hist(saldata$zsalary,prob=TRUE)
1506273081146:hist(saldata$zsalary,prob=TRUE)
1506273086909:lines(density(saldata$zsalary))
1506273097828:m<-mean(saldata$zsalary);s<-sd(saldata$zsalary)
1506273101819:curve(dnorm(x, mean=m, sd=s), col="red", lwd=2, add=TRUE)
1506273115977:curve(dnorm(x, mean=m, sd=s), col="red", lwd=2, add=TRUE)
1506273131456:hist(saldata$zsalary,prob=TRUE)
1506273134987:lines(density(saldata$zsalary))
1506273145927:m<-mean(saldata$zsalary);s<-sd(saldata$zsalary)
1506273149988:curve(dnorm(x, mean=m, sd=s), col="red", lwd=2, add=TRUE)
1506273178905:stem(saldata$salary)
1506273200734:boxplot(saldata$salary)
1506273211090:boxplot(saldata$salary)
1506273217942:countgender <- table(saldata$gender)
1506273226553:barplot(countgender)
1506273248118:require(Rcmdr)
1506273257577:carData
1506273270061:require(Rcmdr)
1506273316433:install.packages(XQuartz)
1506273325355:install.packages('XQuartz'')
1506273328938:''
1506273332412:install.packages('XQuartz')
1506273351610:Rcmdr
1506273355527:RcmdrMisc
1506273360309:RcmdrMisc::Barplot()
1506273366662:RcmdrMisc::Barplot
1506273553805:install.packages("Rcmdr")
1506273608585:library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
1506273852579:library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
1506274277242:require('Rcmdr')
1506274544139:saldata
1506274880420:View(saldata)
1506275024850:saldata$gender
1506275024895:saldata
1506275037007:saldata
1506275042809:View(saldata)
1506275055174:saldata$gender
1506275078913:saldata$gender <- as.factor(saldata$gender)
1506275150402:detach("package:Rcmdr", unload=TRUE)
1506275201637:getwd
1506275203553:getwd()
1506275208125:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 2 - Sep 18 to Sep 22")
1506275216332:require(foreign)
1506275238941:regfile <- read.spss('regression.por')
1506275243229:regfile
1506275255483:x <- as.data.frame(regfile)
1506275258728:x
1506275469489:remove(saldata)
1506275474036:remove(x)
1506275479425:remove(regfile)
1506275540290:regrdata <- read.spss(???regression.por???)
1506275551213:regrdata <- read.spss('regression.por')
1506275579495:class.data <- as.data.frame(regrdata)
1506275635765:colnames(class.data)
1506275660254:colnames(class.data) <- tolower(colnames(class.data))
1506276269981:levels(class.data$school)
1506276306614:?as.data.frame
1506276347473:levels(as.factor(class.data$school))
1506276385653:View(class.data)
1506276414106:numSummary(class.data$normexam)
1506276421766:numSummary(class.data$standlrt)
1506276523849:hist(class.data$school)
1506276545665:?hist
1506276571257:hist(class.data$normexam)
1506276587966:range(class.data$normexam)
1506276699434:x <- hist(class.data$school)
1506276700739:x
1506276715385:typeof(x)
1506276732166:x
1506276736234:x <- hist(class.data$school)
1506276762524:count(class.data$girl)
1506276770611:require(plyr)
1506276772205:count(class.data$girl)
1506276796949:count(class.data$girl, class.data$schgend)
1506276806454:count(class.data$schgend)
1506276932579:table(class.data$girl, class.data$schgend)
1506276946707:f.table <- table(class.data$girl, class.data$schgend)
1506276948796:f.table
1506276951440:f.table
1506276996314:?as.factor
1506277022053:girl <- class.data$girl
1506277082146:girl
1506277091845:as.factor(girl)
1506277100439:levels(as.factor(girl))
1506277152250:girl <- as.factor(girl, levels=c('Boy', 'Girl'))
1506277184939:girl <- as.factor(girl)
1506277191175:levels(girl)
1506277209167:levels(girl) <- c('Boy', 'Girl')
1506277212669:girl
1506277248286:girl <- class.data$girl
1506277255174:girl <- as.factor(girl)
1506277261928:labels(girl)
1506277349062:labels(girl)
1506277356367:require(gmodels)
1506277363747:install.packages(gmodels)
1506277368591:install.packages('gmodels')
1506277374975:require(gmodels)
1506277410426:CrossTable(class.data$girl, class.data$schgend)
1506277480252:f.table
1506277488186:f.table
1506277750929:barplot(f.table,
1506277750931:main="Distribution of students in mixed and         non-mixed schools",)
1506277810958:barplot(f.table,
1506277810959:main="Distribution of students in mixed and         non-mixed schools",
1506277810960:xlab="Gender")
1506277850627:barplot(f.table,
1506277850628:main="Distribution of students in mixed and         non-mixed schools",
1506277850628:xlab="Type of School",
1506277850629:col=c('blue', 'red'))
1506277855777:barplot(f.table,
1506277855778:main="Distribution of students in mixed and         non-mixed schools",
1506277855779:xlab="Type of School",
1506277855779:col=c('darkblue', 'red'))
1506277859570:barplot(f.table,
1506277859571:main="Distribution of students in mixed and         non-mixed schools",
1506277859572:xlab="Type of School",
1506277859572:col=c('darkblue', 'darkred'))
1506277863444:barplot(f.table,
1506277863445:main="Distribution of students in mixed and         non-mixed schools",
1506277863446:xlab="Type of School",
1506277863446:col=c('blue', 'red'))
1506277915886:barplot(f.table,
1506277915887:main="Distribution of students in mixed and         non-mixed schools",
1506277915888:xlab="Type of School",
1506277915889:col=c('blue', 'red'),
1506277915890:legend=rownames(f.table))
1506277928643:barplot(f.table,
1506277928645:main="Distribution of students in mixed and         non-mixed schools",
1506277928646:xlab="Type of School",
1506277928647:col=c('blue', 'red'),
1506277928648:legend=rownames(f.table),
1506277928649:beside=TRUE)
1506277940166:barplot(f.table,
1506277940167:main="Distribution of students in mixed and         non-mixed schools",
1506277940167:xlab="Type of School",
1506277940168:col=c('blue', 'red'),
1506277940169:legend=rownames(f.table))
1506277945970:barplot(f.table,
1506277945970:main="Distribution of students in mixed and         non-mixed schools",
1506277945972:xlab="Type of School",
1506277945973:col=c('blue', 'red'),
1506277945974:legend=rownames(f.table),
1506277945974:beside=TRUE)
1506277970489:rownames(f.table) <- c('Boys', 'Girls')
1506277973761:barplot(f.table,
1506277973762:main="Distribution of students in mixed and         non-mixed schools",
1506277973763:xlab="Type of School",
1506277973763:col=c('blue', 'red'),
1506277973763:legend=rownames(f.table),
1506277973764:beside=TRUE)
1506277997497:regrdata <- read.spss('regression.por')
1506277997513:class.data <- as.data.frame(regrdata)
1506277997516:colnames(class.data) <- tolower(colnames(class.data))
1506277997517:norm.exam.summary <- numSummary(class.data$normexam)
1506277997521:lrt.summary <- numSummary(class.data$standlrt)
1506277997524:hist(class.data$normexam)
1506277997550:require(plyr)
1506277997551:count(class.data$girl)
1506277997553:count(class.data$schgend)
1506277997556:f.table <- table(class.data$girl, class.data$schgend)
1506277997559:require(gmodels)
1506277997560:cross.table <- CrossTable(class.data$girl, class.data$schgend)
1506277997883:rownames(f.table) <- c('Boys', 'Girls')
1506277997883:barplot(f.table,
1506277997884:main="Distribution of students in mixed and         non-mixed schools",
1506277997884:xlab="Type of School",
1506277997885:col=c('blue', 'red'),
1506277997885:legend=rownames(f.table),
1506277997885:beside=TRUE)
1506278021201:barplot(f.table,
1506278021202:main="Distribution of students in mixed and         non-mixed schools",
1506278021202:xlab="Type of School",
1506278021203:col=c('blue', 'red'),
1506278021204:legend=rownames(f.table),
1506278021204:beside=TRUE)
1506278102346:pie
1506278127820:f$table
1506278131221:f.table
1506278139235:typeof(f.table)
1506278156334:f.table <- as.data.frame(f.table)
1506278158482:f.table
1506278172350:f.table <- table(class.data$girl, class.data$schgend)
1506278175550:f.table
1506278184690:colnames(f.table)
1506278191150:f.table$mixedsch
1506278199694:f.table[1]
1506278205866:f.table[1][2]
1506278212340:f.table[2]
1506278214673:f.table[3]
1506278247330:pie(class.data$girl)
1506278269190:pie(class.data$girl)
1506278281847:require(Rcmdr)
1506278394531:with(Dataset, pie(table(girl), labels=levels(as.factor(class.data$girl)), xlab="", ylab="", main="schgend", col=rainbow_hcl(3)))
1506278411965:with(Dataset, pie(table(girl), labels=levels(colnames(f.table)), xlab="", ylab="", main="schgend", col=rainbow_hcl(3)))
1506278414663:with(Dataset, pie(table(girl), labels=levels(colnames(f.table)), xlab="", ylab="", main="schgend", col=rainbow_hcl(3)))
1506278421886:colnames(f.table)
1506278435779:with(Dataset, pie(table(girl), labels=levels(rownames(f.table)), xlab="", ylab="", main="schgend", col=rainbow_hcl(3)))
1506278445245:rownames(f.table)
1506278456315:rownames(f.table) <- c('Boys', 'Girls')
1506278458419:with(Dataset, pie(table(girl), labels=levels(rownames(f.table)), xlab="", ylab="", main="schgend", col=rainbow_hcl(3)))
1506278475016:with(Dataset, pie(table(girl), labels=levels(rownames(f.table)), xlab="", ylab="", main="Gender distribution", col=rainbow_hcl(3)))
1506278497584:with(Dataset, pie(table(girl), labels=rownames(f.table), xlab="", ylab="", main="Gender distribution", col=rainbow_hcl(3)))
1506278722512:with(Dataset, pie(table(girl), labels=rownames(f.table), xlab="", ylab="", main="Gender distribution", col=rainbow_hcl(4)))
1506278725354:with(Dataset, pie(table(girl), labels=rownames(f.table), xlab="", ylab="", main="Gender distribution", col=rainbow_hcl(5)))
1506278728500:with(Dataset, pie(table(girl), labels=rownames(f.table), xlab="", ylab="", main="Gender distribution", col=rainbow_hcl(1)))
1506278741849:with(Dataset, pie(table(girl), labels=rownames(f.table), xlab="", ylab="", main="Gender distribution", col='red'))
1506278746220:with(Dataset, pie(table(girl), labels=rownames(f.table), xlab="", ylab="", main="Gender distribution", col=rainbow_hcl(5)))
1506278759815:barplot(
1506278759816:f.table,
1506278759817:main="Distribution of students in mixed and non-mixed schools",
1506278759817:xlab="Type of School",
1506278759817:col=c('blue', 'red'),
1506278759818:legend=rownames(f.table),
1506278759818:beside=TRUE
1506278759818:)
1506278770738:?barplot
1506278789749:barplot(
1506278789750:f.table,
1506278789751:main="Distribution of students in mixed and non-mixed schools",
1506278789752:xlab="Type of School",
1506278789753:col=c('blue', 'red'),
1506278789754:legend=rownames(f.table),
1506278789755:beside=TRUE
1506278789756:)
1506278797906:barplot(
1506278797908:f.table,
1506278797908:main="Distribution of students in mixed and non-mixed schools",
1506278797909:xlab="Type of School",
1506278797909:col=c('blue', 'red'),
1506278797910:legend=rownames(f.table),
1506278797910:beside=TRUE,
1506278797910:)
1506278814714:barplot(
1506278814714:f.table,
1506278814715:main="Distribution of students in mixed and non-mixed schools",
1506278814716:xlab="Type of School",
1506278814716:col=c('blue', 'red'),
1506278814716:legend=rownames(f.table),
1506278814717:beside=TRUE,
1506278814717:offset=1
1506278814717:)
1506278820869:barplot(
1506278820870:f.table,
1506278820871:main="Distribution of students in mixed and non-mixed schools",
1506278820871:xlab="Type of School",
1506278820871:col=c('blue', 'red'),
1506278820871:legend=rownames(f.table),
1506278820872:beside=TRUE,
1506278820872:offset=10000
1506278820872:)
1506279711633:remove(class.data)
1506279715550:remove(Dataset)
1506279717880:remove(x)
1506279721011:remove(regrdata)
1506279736201:remove(norm.exam.summary)
1506279743767:remove(lrt.summary)
1506279747503:remove(girl)
1506279752423:remove(f.table)
1506279761113:remove(cross.table)
1506279794237:mtcars.df <- mtcars
1506279795092:colnames(mtcars.df) <- tolower(colnames(mtcars.df))
1506279834404:colnames(mtcars.df)
1506279851887:mean.mpg = mean(mtcars.df$mpg)
1506279892916:mtcars.df$mpg
1506279896595:mtcars.df$mpg > 20
1506280231848:mtcars.df[mtcars.df$mpg > 20]
1506280240135:mtcars.df[mtcars.df$mpg > 20, ]
1506280252873:mtcars.df[mtcars.df$mpg > 20, ][,]
1506280302862:mtcars.df[mtcars.df$mpg > mean.mpg, ][mtcars.df$wt > 2.000, ]
1506280312211:mtcars.df[mtcars.df$mpg > mean.mpg, ][mtcars.df$wt > 2.000, ]
1506280326518:subset()
1506280383477:subset(
1506280383478:mtcars.df,
1506280383479:mpg > mean.mpg & wt > 2
1506280383479:)
1506280393019:mtcars.df[mtcars.df$mpg > 20, ]
1506280401060:?mtcars
1506280460449:car.count = nrow(cars)
1506280470921:car.count
1506280474098:cars
1506280487366:?cars
1506280531848:powerful.cars <- subset(
1506280531849:mtcars.df,
1506280531850:mpg > mean.mpg & wt > 2
1506280531850:)
1506280531851:powerful.cars.count = nrow(powerful.cars)
1506280536011:powerful.cars.count
1506280563451:?mtcars
1506280603184:manual.cars = mtcars[am=='manual']
1506280610726:manual.cars = mtcars[mtcars$am=='manual']
1506280614022:manual.cars
1506280625295:manual.cars = mtcars[mtcars$am==manual]
1506280632893:manual.cars = mtcars[mtcars$am==1]
1506280636939:manual.cars = mtcars[mtcars$am==1, ]
1506280642070:manual.cars
1506280669620:levels(mtcars.df$am)
1506280690202:manual
1506280714782:manual.cars = names(mtcars[mtcars$am==1, ])
1506280717455:manual.cars
1506280734325:manual.cars = rownames(mtcars[mtcars$am==1, ])
1506280735734:manual.cars
1506280755744:manual.car.names = rownames(mtcars[mtcars$am==manual, ])
1506280775131:manual.car.names = rownames(mtcars.df[mtcars.df$am==manual, ])
1506280779730:manual = 1
1506280781527:manual.car.names = rownames(mtcars.df[mtcars.df$am==manual, ])
1506280788765:manual.car.names
1506281047751:occupational.status
1506281056824:occupational.status = occupationalStatus
1506281065268:is.data.frame(occupational.status)
1506281076736:?occupationalStatus
1506281147203:occupational.status
1506281194139:typeof(occupational.status)
1506281257806:as.data.frame(occupational.status)
1506281365950:shared.occupational.status
1506281369303:shared.occupational.status <- subset(occupational.status, origin == destination)
1506281381483:occupational.status <- as.data.frame(occupationalStatus)
1506281383152:shared.occupational.status <- subset(occupational.status, origin == destination)
1506281390538:shared.occupational.status
1506281716620:occupational.status <- as.data.frame(occupationalStatus)
1506281716622:colnames(occupational.status) <- tolower(colnames(occupational.status))
1506281716622:shared.occupational.status <- subset(occupational.status, origin == destination)
1506281716624:popular.occupation <- shared.occupational.status[which.max(shared.occupational.status$freq), origin]
1506281749038:popular.occupation <- shared.occupational.status[which.max(shared.occupational.status$freq), ]
1506281754435:popular.occupation <- shared.occupational.status[which.max(shared.occupational.status$freq), origin]
1506281759291:popular.occupation
1506281772408:View(shared.occupational.status)
1506281808135:popular.occupation$origin
1506281827350:popular.occupation <- shared.occupational.status[which.max(shared.occupational.status$freq), 'origin']
1506281831309:popular.occupation
1506281916711:occupational.status <- as.data.frame(occupationalStatus)
1506281916713:colnames(occupational.status) <- tolower(colnames(occupational.status))
1506281916714:shared.occupational.status <- subset(occupational.status, origin == destination)
1506281916715:popular.occupation <- shared.occupational.status[which.max(shared.occupational.status$freq), 'origin']
1506281929552:popular.occupation
1506281938232:?ggplot2::mpg
1506281943058:mpg
1506285519664:?ggplot2::mpg
1506285528672:mpg
1506285533392:mpg <- ggplot2::mpg
1506285539124:typeof(mpg)
1506285548032:is.data.frame(mpg)
1506285605014:colnames(mpg) <- tolower(colnames(mpg))
1506285619197:View(mpg)
1506285785192:mpg.extremes <- subset(mpg, year==1999 | year==2008)
1506285789276:mpg.extremes
1506285814575:remove(mpg.extremes)
1506285820287:remove(mtcars.df)
1506285824947:remove(powerful.cars)
1506285832732:remove(shared.occupational.status)
1506285836467:remove(popular.occupation)
1506285840708:remove(powerful.cars.count)
1506285846489:remove(mean.mpg)
1506285852188:remove(manual.car.names)
1506285856967:remove(manual)
1506285861793:remove(manual.cars)
1506285865427:remove(car.count)
1506285871010:remove(occupational.status)
1506285951796:mpg.99 <- subset(mpg, year==1999)
1506285964679:mpg.08 <- subset(mpg, year==2009)
1506285971956:mpg.08 <- subset(mpg, year==2008)
1506286122018:summary(mpg.08)
1506286199164:str(mpg.08)
1506286229603:numSummary(mpg.99)
1506286775673:mpg <- ggplot2::mpg
1506286775997:colnames(mpg) <- tolower(colnames(mpg))
1506286926199:mpg
1506286933826:mpg[, 'manufacturer']
1506287008702:?sapply
1506287297575:x = c(1, 2, 3)
1506287300203:?c
1506287301892:c
1506287341232:y = lapply(x, as.integer)
1506287344643:y
1506287364535:x = lapply(y, as.integer)
1506287365018:x
1506287390593:x = c(1, 2, 3)
1506287399519:y = sapply(x, as.integer)
1506287400624:y
1506287402144:x
1506287424880:mpg
1506287473421:numeric.mpg <- mpg[, sapply(mpg, is.numeric)]
1506287481145:numeric.mpg
1506287500120:sapply(mpg, is.numeric)
1506287644648:mpg.99 <- subset(mpg, year=1999)
1506287651160:mpg.08 <- subset(mpg, year=2008)
1506287670063:mpg
1506287709666:mpg.08
1506287721983:mpg <- as.data.frame(mpg)
1506287725321:mpg
1506287736162:mpg <- ggplot2::mpg
1506287738438:colnames(mpg) <- tolower(colnames(mpg))
1506287742659:mpg
1506287753695:mpg.08 <- subset(mpg, year==2008)
1506287760907:mpg.99 <- subset(mpg, year==1999)
1506287900334:mpg <- ggplot2::mpg
1506287900335:colnames(mpg) <- tolower(colnames(mpg))
1506287900336:numeric.mpg <- mpg[, sapply(mpg, is.numeric)]
1506287900338:mpg.99 <- subset(numeric.mpg, year==1999)
1506287900340:mpg.08 <- subset(numeric.mpg, year==2008)
1506287906608:remove(x)
1506287908670:remove(y)
1506288034063:test.x <- Filter(is.numeric, mpg)
1506288037350:test.x
1506288044321:numeric.mpg
1506288734976:x <- mean(numeric.mpg)
1506288761170:sapply(numeric.mpg, mean)
1506288780340:mean(numeric.mpg$displ)
1506288799690:mean.99 <- sapply(mpg.99, mean)
1506288812065:mean.08 <- sapply(mpg.08, mean)
1506288817932:mean.08 - mean.09
1506288821321:mean.08 - mean.99
1506288942253:mean.99 <- sapply(mpg.99, mean)
1506288942254:> mean.08 <- sapply(mpg.08, mean)
1506288942286:> mean.08 - mean.09
1506288945605:lakers
1506288969286:lubridate::lakers
1506288974495:?lubridate::lakers
1506289012834:is.data.frame(lubridate::lakers)
1506289042367:lakers <- lubridate::lakers
1506289042368:colnames(lakers) <- tolower(colnames(lakers))
1506289059628:colnames(lakers)
1506289085427:nrow(lakers)
1506289097184:rows
1506289101551:numrows
1506289134606:lakers <- lubridate::lakers[, c('x', 'y')]
1506289134606:colnames(lakers) <- tolower(colnames(lakers))
1506289134607:num.rows <- nrow(lakers)
1506289144601:remove(test.x)
1506289153708:View(numeric.mpg)
1506289174114:remove(mean.08)
1506289176734:remove(mean.99)
1506289184660:remove(x)
1506289189220:remove(mpg)
1506289191643:remove(mpg.08)
1506289193975:remove(mpg.99)
1506289200333:remove(numeric.mpg)
1506289208413:lakers <- lubridate::lakers[, c('x', 'y')]
1506289208415:colnames(lakers) <- tolower(colnames(lakers))
1506289208415:num.rows <- nrow(lakers)
1506289297634:lakers.nax <- Filter(is.na, lakers$x)
1506289310394:lakers
1506289343844:lakers.nay <- Filter(is.na, lakers$y)
1506289568725:lakers.naxy <- subset(lakers, x==NA)
1506289590482:x <- lakers$x
1506289613029:xx <- sapply(is.na, x)
1506289623641:xx <- Filter(is.na, x)
1506289879256:lakers.nax.percentage <- length(lakers.nax) * 100 / num.rows
1506289879258:lakers.nay.percentage <- length(lakers.nay) * 100 / num.rows
1506289883272:lakers.nax.percentage
1506289886508:lakers.nay.percentage
1506289948522:lakers.naxy <- subset(lakers, is.na(x))
1506289956355:lakers.naxy <- subset(lakers, is.na(x) & is.na(y))
1506289977300:lakers.naxy <- subset(lakers, is.na(y))
1506289985361:remove(lakers.naxy)
1506289987456:lakers
1506289996955:View(lakers)
1506290018356:lakers.naxy <- subset(lakers, is.na(x) & is.na(y))
1506290041169:lakers.naxy <- subset(lakers, is.na(x) & is.na(y))
1506290041175:lakers.naxy.percentage <- length(lakers.naxy) * 100 / num.rows
1506290043914:lakers.naxy.percentage
1506290057451:lakers.naxy <- subset(lakers, is.na(x) & is.na(y))
1506290057460:lakers.naxy.percentage <- nrow(lakers.naxy) * 100 / num.rows
1506290061082:lakers.naxy.percentage
1506290090816:nycflights13::flights
1506290101515:install.packages("nycflights13")
1506290114115:require nycflights13::flights
1506290118739:nycflights13::flights
1506290127503:?nycflights13::flights
1506290134405:flights
1506290159692:flights <- nycflights13::flights
1506290159693:colnames(flights) <- tolower(colnames(flights))
1506290168716:remove(lakers)
1506290172394:remove(lakers.nax)
1506290178017:remove(lakers.nax.percentage)
1506290184637:remove(lakers.naxy)
1506290189159:remove(lakers.naxy.percentage)
1506290195109:remove(x)
1506290197887:remove(xx)
1506290202787:remove(num.rows)
1506290206494:remove(lakers.nay)
1506290211325:remove(lakers.nay.percentage)
1506290216820:>LakeHuron
1506290222414:?LakeHuron
1506290230850:?flights
1506290374610:head(flights)
1506290386342:View(flights)
1506290582859:range(flights$dep_time)
1506290693627:range(flights$dep_delay)
1506290729523:arr.flights <- subset(flights, !is.na(arr_delay))
1506290753039:arr.flights <- subset(flights, !is.na(arr_delay), 'arr_delay')
1506290759048:arr.flights
1506290784853:range(flights$year)
1506290790826:range(flights$month)
1506290817020:arr.flights <- subset(flights, !is.na(arr_delay), c('month', 'arr_delay'))
1506290852738:dep.flights <- subset(flights, !is.na(dep_delay), c('month', 'dep_delay'))
1506291009991:require(data.table)
1506291018573:require(data.table)
1506291037103:flights.dt <- data.table(flights)
1506292594386:arr.flights.dt <- data.table(arr.flights)
1506292603027:dep.flights.dt <- data.table(dep.flights)
1506292614150:remove(flights.dt)
1506292994516:arr.flights.dt[, sum('arr_delay'), by='month']
1506293022461:arr.flights.dt[, sum(arr_delay), by=month]
1506293820381:arr.flights.dt[, min(arr_delay), by=month]
1506293868055:arr.flights.dt[, min(dep_delay), by=month]
1506293879042:dep.flights.dt[, min(dep_delay), by=month]
1506293942484:min.arr.delay <- dep.flights.dt[, min(arr_delay), by=month]
1506293942490:min.dep.delay <- dep.flights.dt[, min(dep_delay), by=month]
1506293942495:max.arr.delay <- dep.flights.dt[, max(arr_delay), by=month]
1506293942499:max.dep.delay <- dep.flights.dt[, max(dep_delay), by=month]
1506293942509:mean.arr.delay <- dep.flights.dt[, mean(arr_delay), by=month]
1506293942514:mean.dep.delay <- dep.flights.dt[, mean(dep_delay), by=month]
1506293963619:min.arr.delay <- arr.flights.dt[, min(arr_delay), by=month]
1506293963625:min.dep.delay <- dep.flights.dt[, min(dep_delay), by=month]
1506293963631:max.arr.delay <- arr.flights.dt[, max(arr_delay), by=month]
1506293963644:max.dep.delay <- dep.flights.dt[, max(dep_delay), by=month]
1506293963652:mean.arr.delay <- arr.flights.dt[, mean(arr_delay), by=month]
1506293963659:mean.dep.delay <- dep.flights.dt[, mean(dep_delay), by=month]
1506294018997:min.arr.delay
1506294034581:months()
1506294038793:months
1506294044021:?months
1506294057054:month.name
1506294074504:arr.flights
1506294097009:x = c(3, 2, 1)
1506294118096:filter(month.name, x)
1506294123579:Filter(month.name, x)
1506294148936:month[x]
1506294159577:month.name[x]
1506294574993:x <- arr.flights.dt
1506294575452:x
1506294594588:x <- mean.arr.delay
1506294595609:x
1506294616458:rownames(x) <- month.name
1506294617731:x
1506294626618:names(x) <- month.name
1506294630155:rownames(x) <- month.name
1506294630574:x
1506294640966:rownames(x)
1506294646109:print(x)
1506294648724:str(x)
1506347765891:occupationalStatus
1506347793583:occupational.status <- as.data.frame(occupationalStatus)
1506347793585:colnames(occupational.status) <- tolower(colnames(occupational.status))
1506347793586:shared.occupational.status <- subset(occupational.status, origin == destination)
1506347804303:shared.occupational.status
1506347864161:which.max(shared.occupational.status$freq
1506347866333:)
1506347877330:shared.occupational.status[6]
1506347889331:shared.occupational.status[6, 'origin']
1506347986659:x <- as.data.frame(occupationalStatus)
1506347999071:x
1506348012977:x[, 1]
1506348394352:x <- list(1, 2, 3)
1506348396195:x[2]
1506348407357:x[[2]
1506348408715:]
1506348579885:occupationalStatus[1, 2]
1506348583123:occupationalStatus
1506348963772:remove(occupational.status)
1506348969148:remove(shared.occupational.status)
1506348971055:remove(x)
1506348983151:setwd("~/MSc in Data Analytics/Working with Data/Week 3 - Sep 25 to Sep 29/Data")
1506349399273:df <- read.table('data.rds')
1506349410675:df <- read.table('data.rds', sep=',')
1506349469319:df <- read.table('data.txt', sep=' ')
1506349471033:df
1506349495729:df <- read.table('data.txt', sep=' ')
1506349509229:df <- read.table('data.txt', sep=' ', header=TRUE)
1506349513162:df
1506349530423:?read.table
1506349593537:?as.data.frame
1506349669339:df <- read.table('randomData.txt')
1506349672960:View(df)
1506349683339:df <- read.table('randomData.txt', sep=',')
1506349692409:df <- read.table('randomData.txt', sep=',', header=T)
1506349698469:str(df)
1506349708289:df <- read.table('randomData.txt', sep=',', header=T, stringsAsFactors=F)
1506349712556:str(df)
1506349843251:df <- read.table('randomData.txt', sep=',', header=T, stringsAsFactors=F)
1506349843253:colnames(df) <- tolower(colnames(df))
1506349845941:df <- read.table('randomData.txt', sep=',', header=T, stringsAsFactors=F)
1506349846656:df <- read.table('randomData.txt', sep=',', header=T, stringsAsFactors=F)
1506349846658:colnames(df) <- tolower(colnames(df))
1506349959152:missing.df <- read.table('missing.txt')
1506349966621:?read.table
1506350010695:missing.df <- read.table('missing.txt', skipNul=T)
1506350034298:missing.df <- read.table('missing.txt', blank.lines.skip=T)
1506350049132:missing.df <- read.table('missing.txt', fill=T)
1506350051545:missing.df
1506350058643:missing.df <- read.table('missing.txt', fill=T, header=T)
1506350065208:missing.df <- read.table('missing.txt', fill=T, header=T, stringsAsFactors=F)
1506350067061:missing.df
1506350078973:missing.df <- read.table('missing.txt', fill=T, header=T, stringsAsFactors=F, sep=',')
1506350082652:missing.df
1506350112134:View(missing.df)
1506350173532:missing.df <- read.table('missing.txt', fill=T, header=T, stringsAsFactors=F, sep=',', na.strings=c('?'))
1506350180785:missing.df
1506350184913:View(missing.df)
1506350212253:missing.df <- read.table('missing.txt', fill=T, header=T, stringsAsFactors=F, sep=',', na.strings=c('?', ' ', 'NA'))
1506350226727:missing.df <- read.table('missing.txt', fill=T, header=T, stringsAsFactors=F, sep=',', na.strings=c('?', '', 'NA'))
1506350263889:str(missing.df)
1506350385401:missing.df
1506350389860:missing.df[4, 1]
1506350395864:x <- missing.df[4, 1]
1506350407378:x <- missing.df[4, 2]
1506350409714:x <- missing.df[4, 3]
1506350433002:NA
1506350437822:typeof(NA)
1506350453752:sum(missing.df$price)
1506350518115:missing.df <- read.table('missing.txt', fill=T, header=T, stringsAsFactors=F, sep=',', na.strings=c('?', '', 'NA'), skipNul = T)
1506350520328:sum(missing.df$price)
1506350528217:missing.df <- read.table('missing.txt', fill=T, header=T, stringsAsFactors=F, sep=',', na.strings=c('?', '', 'NA'))
1506350643174:df <- read.table('randomData.txt', header=T, sep=',', stringsAsFactors=F, col.names=c('id', 'state', 'households', 'moe'))
1506350645530:df
1506350650269:View(df)
1506351084731:library(readr)
1506351284715:df <- read.csv('data.csv')
1506351286425:df
1506351316428:df <- read_csv('data.csv')
1506351333137:df
1506351398428:df <- read_csv('missing.txt')
1506351427902:df
1506351448558:?read_csv
1506351533623:df[4,1 ]
1506351543022:x <- df[4, 1]
1506351546073:x
1506351553486:x <- df[4, 2]
1506351555582:x
1506351566718:df <- read_csv('missing.txt')
1506351609470:View(df)
1506351630028:df <- read_csv('missing.txt', na=c('?'))
1506351635958:View(df)
1506351651680:df <- read_csv('missing.txt', na=c('?', '', 'NA'))
1506351655678:View(df)
1506352240014:tbl = read_csv('data.csv', col_types='i_l')
1506352243324:tbl
1506352296635:df <- read_csv('missing.txt', na=c('?', '', 'NA'), col_types='i_l')
1506352309054:df
1506352330680:df <- read_csv('missing.txt', na=c('?', '', 'NA'))
1506352346408:df <- read_csv('missing.txt', na=c('?', '', 'NA'), col_types='i_c_l')
1506352357768:df <- read_csv('missing.txt', na=c('?', '', 'NA'))
1506352369684:View(tbl)
1506352381466:df <- read_csv('missing.txt', na=c('?', '', 'NA'), col_types='icl')
1506352418034:tbl = read_csv('data.csv', col_types='i_l', n_max=2)
1506352424966:tbl = read_csv('data.csv', col_types='i_l', n_max=1)
1506352432426:tbl = read_csv('data.csv', col_types='i_l', n_max=2)
1506352446789:View(tbl)
1506352583106:?read.table
1506352732758:?read_csv
1506352902009:?read_fwf
1506353036169:fwf_sample = readr_example('fwf-sample.txt')
1506353040837:fwf_sample
1506353060923:View(fwf_sample)
1506353115694:?fwf_cols
1506353145794:View(fwf_sample)
1506353171468:read_fwf(fwf_sample)
1506353201034:read_fwf(fwf_sample, fwf_cols(name=c(1, 10), ssn=c(31, 42)))
1506353237055:read_fwf(fwf_sample, fwf_cols(name=c(1, 20), ssn=c(31, 42)))
1506353383527:df <- read_fwf('data.txt', fwf_cols(price=c(1, 3), stock.item=c(4, 12), ignore=c(13, 15), purchased=c(16, 17)))
1506353385759:df
1506353422248:df <- read_fwf('data.txt', fwf_cols(price=c(1, 3), stock.item=c(4, 12), ignore=c(13, 15), purchased=c(16, 17)), skip=1)
1506353425079:df
1506353444376:df <- read_fwf('data.txt', fwf_cols(price=c(1, 3), stock.item=c(4, 12), ignorxe=c(13, 15), purchased=c(16, 17)), skip=1)
1506353445607:df
1506353621097:?read_fwf
1506353657638:df <- read_fwf('data.txt', fwf_cols(price=c(1, 3), stock.item=c(4, 12), ignorxe=c(13, 15), purchased=c(16)), skip=1)
1506353661428:df
1506353709527:df <- read_fwf('data.txt', fwf_cols(price=c(1,43), stock.item=c(5, 14), purchased=c(18, 18)), skip=1)
1506353712236:df
1506353730532:df <- read_fwf('data.txt', fwf_cols(price=c(1,4), stock.item=c(5, 14), purchased=c(18, 18)), skip=1)
1506353732614:df
1506353799668:df <- read_fwf('data.gz', fwf_cols(price=c(1,4), stock.item=c(5, 14), purchased=c(18, 18)), skip=1)
1506353801781:df
1506353811485:df <- read_fwf('data.txt', fwf_cols(price=c(1,4), stock.item=c(5, 14), purchased=c(18, 18)), skip=1)
1506353813594:df
1506353816755:df <- read_fwf('data.gz', fwf_cols(price=c(1,4), stock.item=c(5, 14), purchased=c(18, 18)), skip=1)
1506353820473:df
1506353994793:required('readxl')
1506353999333:require('readxl')
1506354003461:require('readxl')
1506354152604:tbl = read_excel('example.xls')
1506354157131:View(tbl)
1506354167946:remove(df)
1506354174943:remobe(fwf_sample)
1506354179589:remove(fwf_sample)
1506354181631:remove(x)
1506354186678:remove(missing.df)
1506354191529:tbl
1506354201529:?read_excel
1506523532062:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1506523536415:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1506523585914:required(foreign)
1506523590529:require(foreign)
1506523659388:regfile <- read.spss('regression.por')
1506523675000:is.data.frame(regfile)
1506523685264:df <- as.data.frame(regfile)
1506523687877:View(df)
1506523929679:View(df)
1506523994753:regfile
1506524011035:df <- as.data.frame(regfile)
1506524013460:df
1506524039213:1
1506524047795:str(df)
1506524063375:df
1506524076080:View(df)
1506524105445:colnames(df) <- tolower(colnames(df))
1506524205385:hist(df$normexam)
1506524320170:hist(df$standlrt)
1506524361864:library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
1506524682544:knitr::opts_chunk$set(echo = TRUE)
1506524682742:survey <- read.table("C:/tempR/survey.dat")
1506524689814:survey <- read.table("survey.dat")
1506524713833:View(survey)
1506524742087:colnames(survey) <- tolower(colnames(survey))
1506524755082:library(pastecs) #For creating descriptive statistic summaries
1506524785336:install.packages('pastecs')
1506524945459:library(pastecs) #For creating descriptive statistic summaries
1506524945545:library(ggplot2) #For creating histograms with more detail than plot
1506524945569:library(psych) # Some useful descriptive functions
1506524945619:library(semTools) #For skewness and kurtosis
1506524953600:library(ggplot2)
1506524956539:library(psych)
1506524972479:install.packages(semTools)
1506524976651:install.packages('semTools')
1506525143462:library(semTools)
1506525165988:library(car)
1506525175690:remove(Dataset)
1506525178637:remove(df)
1506525183464:remove(regfile)
1506525194715:stat.desc(survey$tpcoiss, basic=F)
1506525301226:#skewness and kurtosis from semTools with standard error
1506525301227:skew(survey$tpcoiss)
1506525301234:kurtosis(survey$tpcoiss)
1506525312984:gg <- ggplot(survey, aes(x=survey$tpcoiss))
1506525319541:gg <- gg + labs(x="Feeling of Control")
1506525331356:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1506525341687:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1506527055627:occupational.status <- as.data.frame(occupationalStatus)
1506527058367:occupational.status
1506527061772:View(occupational.status)
1506527075559:?occupationalStatus
1506527192677:?mtcars
1506610934430:setwd("~/MSc in Data Analytics/Working with Data/Week 3 - Sep 25 to Sep 29")
1506611457864:setwd("~/MSc in Data Analytics/Working with Data/Week 3 - Sep 25 to Sep 29/Data")
1506611510323:require(readr)
1506611520346:read_excel
1506611529082:?read_excel
1506611542194:require(readxl)
1506611558492:x <- read_excel('example.xls')
1506611560606:View(x)
1506611590122:x <- read_excel('example.xls', range='B3:C4')
1506611631786:range <- 'R1C1:R3C2'
1506611636963:x <- read_excel('example.xls', range=range)
1506611681105:range <- cell_cols('B:C')
1506611682716:x <- read_excel('example.xls', range=range)
1506611710984:range <- c('skip', 'skip', 'logical')
1506611713193:x <- read_excel('example.xls', range=range)
1506611750400:x <- read_excel('example.xls', col_types=range)
1506611785803:range <- c('skip', 'logical', 'skip',)
1506611787566:range <- c('skip', 'logical', 'skip')
1506611789850:x <- read_excel('example.xls', col_types=range)
1506611808803:range <- c('skip', 'skip')
1506611810225:x <- read_excel('example.xls', col_types=range)
1506611861982:range <- c('skip', 'character', 'skip')
1506611863683:x <- read_excel('example.xls', col_types=range)
1506611871470:?read_excel
1506611907432:?read_excel
1506611995194:readxl::excel_sheets()
1506612005976:excel_sheets('example.csv')
1506612017060:excel_sheets('example.xls')
1506612057688:?read_excel
1506612087329:read_excel(sheet='missing')
1506612098238:read_excel('example.xls', sheet='missing')
1506612101978:x <- read_excel('example.xls', sheet='missing')
1506612125599:View(x)
1506612159996:is.data.frame(x)
1506612165742:str(x)
1506612336448:x <- read_excel('example.xls', sheet='missing', na=c('', '?', 'NA'))
1506612343990:str(x)
1506612359998:y <- c(1, 2, 3)
1506612362322:y
1506612369145:?c
1506612385764:list(1, '2')
1506612393037:y <- list(1, '2')
1506612393951:y
1506612430165:View(mtcars)
1506612655666:url
1506612694319:xx <- 'http://www.revenue.ie/en/corporate/documents/statistics/farmers/farmer-income-county.csv'
1506612718043:yy <- read.csv(xx, stringsAsFactors=FALSE)
1506612727919:yy
1506612737933:is.data.frame(yy)
1506612751623:View(yy)
1506612778797:FALSE
1506612780092:F
1506612823690:gdata
1506612835146:require(gdata)
1506612839118:require(gdata)
1506612876490:xx <- 'http://www.housing.gov.ie/sites/default/files/publication/files/2016_dog_control_statistics.xls'
1506612893146:zz <- read.excel(xx)
1506612897752:zz <- read_excel(xx)
1506612921115:xx <- 'http://www.housing.gov.ie/sites/default/files/publications/files/2016_dog_control_statistics.xls'
1506612922581:zz <- read_excel(xx)
1506613083582:climate.data.url <- 'http://cli.met.ie/cli/climate_data/webdata/dly375.zip'
1506613105927:read_excel(climate.data.url)
1506613124183:read.csv(climate.data.url)
1506613164869:download.file(climate.data.url, destfile='climate_data.zip')
1506613232586:unzip('climate_data.zip', exdir='./dly375')
1506613276227:list.files('climate_data')
1506613315424:df <- read.csv('climate_data/dly375.csv', stringsAsFactors=F)
1506613321801:df <- read.csv('climate_data/dly375.csv', stringsAsFactors=F, skip=24)
1506613357891:View(df)
1506613402847:df <- read.csv('climate_data/dly375.csv', stringsAsFactors=F, skip=23)
1506613404526:View(df)
1506613414759:df <- read.csv('climate_data/dly375.csv', stringsAsFactors=F, skip=24)
1506613419391:View(df)
1506613511100:df <- read.csv('climate_data/dly375.csv', stringsAsFactors=F, skip=26)
1506613522919:df <- read.csv('climate_data/dly375.csv', stringsAsFactors=F, skip=24)
1506613528479:?read.csv
1506613703381:remove(df)
1506613705319:remove(x)
1506613709023:remove(yy)
1506613725472:remove.vars()
1506613734097:?remove
1506613746836:remove(y)
1506613748771:remove(xx)
1506613755578:remove(range)
1506613759215:remove(climate.data.url)
1506613805304:guardian.url <- 'https://www.theguardian.com/football/premierleague/table'
1506613845712:require('rvest')
1506613875661:guardian.data <- read_html(guardian.url)
1506613901622:is.data.frame(guardian.data)
1506613923199:as.data.frame(guardian.data)
1506613938549:guardian.data
1506613994395:print(guardian.data)
1506614124508:tbl.nodes <- html_nodes(guardian.data, 'table')
1506614128334:tbl.nodes
1506614196269:prem.league.table <- html_table(tbl.nodes)
1506614201027:prem.league.table
1506614229716:head(tbl.nodes)
1506614244526:prem.league.table[[1]]
1506614306448:prem.league.table[[1]]
1506614314068:df <- prem.league.table[[1]]
1506614318235:as.data
1506614321374:as.data.frame(df)
1506614323638:as.data.frame(df)
1506614337377:typeof(df)
1506614342213:is.data.frame(df)
1506614346026:View(df)
1506614376015:?html_table
1506614408719:prem.league.df <- prem.league.table[[1]]
1506614415138:prem.league.df
1506614420248:View(prem.league.df)
1506614439884:1
1506614440866:1
1506614483773:length(prem.league.table)
1506614541339:library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
1506614543807:detach("package:car", unload=TRUE)
1506614573247:?rvest
1506614589524:??rvest
1506614604498:?rvest
1506614623977:?rvest::read_html
1506614705730:financial.url = 'https://markets.ft.com/data'
1506614830980:f.webpage <- read_html(financial.url)
1506614839836:f.webpage <- read_html(financial.url)
1506614848949:f.webpage
1506614874980:nodes <- html_nodes(f.webpage, 'table')
1506614876500:nodes
1506614978075:length(nodes)
1506615003341:tables <- html_table(nodes)
1506615006784:tables[[2]]
1506615012938:currency.df <- tables[[2]]
1506615017826:View(currency.df)
1506615218615:View(tables[[1]])
1506615231711:View(tables[[3]])
1506615338018:View(df)
1506615344289:View(tables[[3]])
1506615349648:View(tables[[1]])
1506615363406:View(currency.df)
1506616375846:install.packages('rmoaa')
1506616432147:?write.csv
1506616497063:write.csv(prem.league.df, 'leaguetable.csv', row.names=F, quote=F)
1506616534376:write.csv(prem.league.df[, -11], 'leaguetable.csv', row.names=F, quote=F)
1506616562473:write.csv(prem.league.df[, -11], 'leaguetable.csv', row.names=F, quote=T)
1506616577524:write.csv(prem.league.df[, -11], 'leaguetable.csv', row.names=F, quote=F)
1506616599568:write.csv(prem.league.df[, -11], 'leaguetable.csv')
1506616625491:write.csv(prem.league.df[, -11], 'leaguetable.csv', row.names=F, quote=F)
1506616954793:saveRDS(prem.league.df, 'league_table.rds')
1506617017856:xxx <- readRDS('league_table.rds')
1506617021544:View(xxx)
1506617057426:teams <- prem.league.df$Team
1506617067767:won <- prem.league.df$W
1506617105571:save(list=c('teams', 'won'), file='league_variables.RData')
1506617234182:load('league_variables.RData')
1506617255203:df <- readRDS('league_table.rds')
1506868637635:install.packages('tm')
1506868652913:require(tm)
1506868655115:require(tm)
1506868663136:install.packages('wordcloud')
1506868673714:require(wordcloud)
1506868687799:install.packages('RCurl')
1506868700253:require(RCurl)
1506868704837:install.packages('XML')
1506868713718:require(XML)
1506868741198:install.packages("SnowballC")
1506868749379:require(SnowballC)
1506868784491:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1506868796095:load(htmlToText)
1506868929312:setwd("~/MSc in Data Analytics/Data Mining/Week 2 - Sep 18 to Sep 22")
1506868933834:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1506868956389:source('htmlToText.R')
1506868958788:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1506868999680:data2 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html")
1506869011438:data3 <- htmlToText("http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html")
1506869020073:data4 <- htmlToText("http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html")
1506869026151:data <- c(data1, data2)
1506869033436:data <- c(data, data3)
1506869038925:c(data, data4)
1506869050068:data <- c(data, data4)
1506869059428:txt_corpus <- Corpus (VectorSource (data))
1506869066420:summary(txt_corpus)
1506869092741:tm_map <- tm_map (txt_corpus, stripWhitespace)
1506869105446:tm_map <- tm_map (tm_map, removePunctuation)
1506869114358:tm_map <- tm_map (tm_map, removeNumbers)
1506869124691:tm_map <- tm_map (tm_map, removeWords, stopwords("english"))
1506869136772:stopwords('english')
1506869161198:tm_map <- tm_map (tm_map, removeWords, c("work", "use", "java", "new", "support"))
1506869167381:inspect(tm_map)
1506869181717:Matrix <- TermDocumentMatrix(tm_map)
1506869188335:matrix_c <- as.matrix (Matrix)
1506869194656:freq <- sort (rowSums (matrix_c))
1506869201699:freq
1506869220922:tmdata <- data.frame (words=names(freq), freq)
1506869226665:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
1506953510553:require(gdata)
1506953513576:require(gdata)
1506953524635:?gdata
1506953549014:require(r2excel)
1506953560544:install.packages('r2excel')
1506953606144:install.packages("devtools")
1506953613058:require(devtools)
1506953614866:require(devtools)
1506953749375:target_url = 'archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip'
1506953790827:download.file(target_url, 'bank.zip')
1506953800829:getwd()
1506953839929:setwd("~/MSc in Data Analytics/Working with Data/Week 4 - Oct 2 to Oct 6")
1506953853862:target.url <- target_url
1506953876698:remove(target_url)
1506953931929:download.file(target.url, 'bank.zip')
1506953958723:item <- read.table('bank.zip')
1506953970573:x <- as.data.frame(item)
1506953973129:View(x)
1506953989718:remove(item)
1506953991818:remove(x)
1506954024252:unzip('bank.zip', list=T)
1506954033157:?unzip
1506954130304:x <- readRDS('bank.csv')
1506954135504:x <- readRDS('bank.zip')
1506954376632:require(readr)
1506954405664:bank.csv <- read.csv('bank/bank-full.csv')
1506954412630:bank.csv <- read_csv('bank/bank-full.csv')
1506954419310:View(bank.csv)
1506954481195:bank.df <- read.table('bank/bank-full.csv', sep=';')
1506954489622:remove(bank.csv)
1506954522025:?read.table
1506954538166:str(bank.df)
1506954557989:View(bank.df)
1506954585525:bank.df <- read.table('bank/bank-full.csv',
1506954585526:sep=';',
1506954585527:header=T,
1506954585527:stringsAsFactors=F)
1506954588944:View(bank.df)
1506954597427:str(bank.df)
1506954866691:bank.df <- read_delim('bank/bank-full.csv',
1506954866692:delim=';',
1506954866693:na=c('unknown'))
1506954870879:View(bank.df)
1506954894766:str(bank.df)
1506954908149:str(bank.df$job)
1506955009818:bank.df$job <- as.factor(bank.df$job)
1506955014943:str(bank.df$job)
1506955046884:bank.df$marital <- as.factor(bank.df$marital)
1506955057562:bank.df$education <- as.factor(bank.df$education)
1506955104829:tail(bank.df)
1506955217580:bank.df <- read_delim('bank/bank-full.csv',
1506955217581:delim=';')
1506955231288:colnames(bank.df) <- tolower(colnames(bank.df))
1506955231289:bank.df$job <- as.factor(bank.df$job)
1506955231292:bank.df$marital <- as.factor(bank.df$marital)
1506955231295:bank.df$education <- as.factor(bank.df$education)
1506955358606:bank.df <- read_delim('bank/bank-full.csv',
1506955358607:delim=';',
1506955358608:stringsAsFactors=T)
1506955382291:?read_delim
1506955427326:bank.df <- read.table('bank/bank-full.csv',
1506955427327:sep=';',
1506955427328:header=T,
1506955427328:stringsAsFactors=T)
1506955427950:colnames(bank.df) <- tolower(colnames(bank.df))
1506955435363:View(bank.df)
1506955449759:str(bank.df$education)
1506955462812:levels(bank.df$education)
1506955512970:bank.df <- read.table('bank/bank-full.csv',
1506955512971:sep=';',
1506955512972:header=T,
1506955512972:stringsAsFactors=T,
1506955512974:na.strings=c('unknown'))
1506955513708:colnames(bank.df) <- tolower(colnames(bank.df))
1506955537379:nrow(bank.df[bank.df$education=='unknown'])
1506955545341:nrow(bank.df[bank.df$education=='unknown', ])
1506955555654:nrow(bank.df)
1506955569270:na.education <- nrow(bank.df[bank.df$education=='unknown', ])
1506955581128:total.count <- nrow(bank.df)
1506955603925:na.education.percentage <- na.education * 100 / total.count
1506955611093:na.education.percentage
1506955652326:x <- c(1, 2, 3)
1506955658733:x * 2
1506955676725:bank.df$education=='unknown'
1506955711032:bank.df$education==NA
1506955847682:na.education <- sum(is.na(bank.df$education))
1506955851387:na.education
1506955921348:all.missing <- is.na(bank.df)
1506955921352:missing.counts <- colSums(allMissing)
1506955929191:all.missing <- is.na(bank.df)
1506955929196:missing.counts <- colSums(all.missing)
1506955933115:missing.counts
1506955952409:missing.counts <- missing.counts[missing.counts > 0]
1506955956522:missing.counts
1506956214918:mean(bank.df$age, bank.df$duration, bank.df$pdays)
1506956270997:mean(bank.df[!is.na(bank.df$age), ])
1506956271965:missing.counts
1506956297847:mean(bank.df$age)
1506956303183:mean(bank.df$duration)
1506956308976:mean(bank.df$pdays)
1506956365965:mean(c(1, 2, NA))
1506956369766:mean(c(1, 2))
1506956428613:range(bank.df$pdays)
1506956979468:pdays <- bank.df$pdays
1506957012941:pdays[pdays == -1] = NA
1506957014255:pdays
1506957022837:pdays <- bank.df$pdays
1506957025002:pdays
1506957035617:sum(pdays)
1506957045891:head(pdays)
1506957064518:pdays[pdays == -1] = NA
1506957067738:sum(pdays)
1506957073979:pdays <- bank.df$pdays
1506957114765:indices <- [pdays == -1]
1506957121079:indices <- pdays == -1
1506957123160:indices
1506957143547:pdays[indices] <- NA
1506957148575:sum(pdays)
1506957163370:sum(pdays[!is.na(pdays)])
1506957246339:mean(pdays)
1506957260245:mean(!is.na(pdays))
1506957272069:mean(pdays[!is.na(pdays)])
1506957362860:mean(pdays[pdays!=-1])
1506957374198:mean(bank.dfpdays[bank.dfpdays!=-1])
1506957381826:mean(bank.df$pdays[bank.df$pdays!=-1])
1506957497875:summary(bank.df)
1506957906530:fivenum(bank.df$age)
1506957912444:?fivenum
1507129395386:require(foreign)
1507129395400:regfile <- read.spss('regression.por')
1507129402546:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1507129411434:regfile <- read.spss('regression.por')
1507129429363:df <- as.data.frame(regfile)
1507129444214:colnames(df) <- tolower(colnames(df))
1507129466128:normexam <- df$normexam
1507129475035:standlrt <- df$standlrt
1507129507311:shapiro.test(normexam)
1507129634088:?shapiro.test
1507130120150:yy <- shapiro.test(normexam)
1507130125288:typeof(yy)
1507130147639:yy
1507130477950:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507130487816:shapiro.test(runif(100, min = 2, max = 4))
1507130491890:shapiro.test(runif(100, min = 2, max = 4))
1507130495014:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507130503898:?rnorm
1507130510335:?runif
1507130521457:runif(100, min = 2, max = 4)
1507130534510:runif(20, min = 1, max = 2)
1507130539658:runif(20, min = 1, max = 2)
1507130548686:rnorm(20, min = 1, max = 2)
1507130569217:rnorm(20, mean = 1, sd = 0.2)
1507130583640:?shapiro.test
1507131264841:rnorm(20, mean = 1, sd = 0.2)
1507131279507:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507131279512:shapiro.test(runif(100, min = 2, max = 4))
1507131284387:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507131284390:shapiro.test(runif(100, min = 2, max = 4))
1507131285241:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507131285243:shapiro.test(runif(100, min = 2, max = 4))
1507131285923:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507131285925:shapiro.test(runif(100, min = 2, max = 4))
1507131286693:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507131286695:shapiro.test(runif(100, min = 2, max = 4))
1507131287354:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507131287356:shapiro.test(runif(100, min = 2, max = 4))
1507131287962:shapiro.test(rnorm(100, mean = 5, sd = 3))
1507131287963:shapiro.test(runif(100, min = 2, max = 4))
1507131466840:shapiro.test(normexam)
1507131467989:shapiro.test(normexam)
1507131546252:shapiro.test(standlrt)
1507131639441:hist(standlrt)
1507131660984:shapiro.test(standlrt)
1507131676057:hist(normexam)
1507174461597:getwd()
1507174497643:setwd("~/MSc in Data Analytics/Working with Data/Week 4 - Oct 2 to Oct 6")
1507174852556:require(readr)
1507174881063:x <- read_tsv('isoc_ec_ibuy.tsv')
1507174891301:x <- as.data.frame(x)
1507174893532:x
1507174952470:str(x)
1507174959059:x <- read_tsv('isoc_ec_ibuy.tsv')
1507175173754:rm()
1507175199523:x <- read_tsv('isoc_ec_ibuy')
1507175207782:is.data.frame(x)
1507175228351:df <- x
1507175234137:remove(x)
1507175275018:?write.csv
1507175333870:x <- df[1:1000,]
1507175414895:write.csv(x[1:1000, ], 'written_eu.csv')
1507175494966:View(x)
1507175585702:read_tsv?
1507175590118:;
1507175596143:?read_tsv
1507175659915:df <- read_tsv('isoc_ec_ibuy', na=c(':'))
1507175691977:x <- df[1:1000, ]
1507175695294:View(x)
1507175705089:write.csv(x[1:1000, ], 'written_eu.csv')
1507175760838:df.reimport <- read_csv('written_eu.csv')
1507175772025:View(df.reimport)
1507175804237:?write_csv
1507175827704:write.csv(x[1:1000, ], 'written_eu.csv', col_names=F)
1507175849092:?write.csv
1507175872204:write.csv(x[1:1000, ], 'written_eu.csv', row.names=F)
1507175925226:write.csv(x[1:1000, ], 'written_eu.csv')
1507175935055:write.csv(x[1:1000, ], 'written_eu.csv', row.names=F)
1507175955368:df.reimport <- read_csv('written_eu.csv')
1507175960940:str(df.reimport)
1507175980310:View(df.reimport)
1507175998818:str(df)
1507176044729:remove(df)
1507176048461:remove(df.reimport)
1507176058096:remove(x)
1507176132943:ir.hosp.url <- "https://github.com/openknowledgeireland/DataStore/raw/master/OP%20Waiting%20List%20By%20Group%20Hospital%202017.csv"
1507176165458:ir.hosp.url <- "https://github.com/openknowledgeireland/DataStore/raw/master/
1507176165459:OP%20Waiting%20List%20By%20Group%20Hospital%202017.csv"
1507176169227:ir.hosp.url
1507176262424:ir.hosp.url <- "https://github.com/openknowledgeireland/DataStore/raw/master/
1507176262425:OP%20Waiting%20List%20By%20Group%20Hospital%202017.csv"
1507176264921:ir.hosp.url
1507176353862:df <- read_csv(ir.hosp.url)
1507176356250:df
1507176412166:ir.hosp.url <- paste0("https://github.com/openknowledgeireland/DataStore/raw/",
1507176412167:"master/OP%20Waiting%20List%20By%20Group%20Hospital%20",
1507176412167:"2017.csv")
1507176417272:ir.hosp.url
1507176422765:df <- read_csv(ir.hosp.url)
1507176441273:View(df[1:100, ])
1507176527827:colnames(df) <- tolower(df)
1507176539376:View(df[1:100, ])
1507176553278:df <- read_csv(ir.hosp.url)
1507176562177:colnames(df) <- tolower(colnames(df))
1507176566431:View(df[1:100, ])
1507176596308:uhl.data <- df[df$hospital=='University of Limerick Hospital Group']
1507176613995:df$hospital=='University of Limerick Hospital Group'
1507176626437:df[df$hospital=='University of Limerick Hospital Group']
1507176678028:df[df$hospital=='University of Limerick Hospital Group',]
1507176689269:x <- df[df$hospital=='University of Limerick Hospital Group',]
1507176703618:str(df$hospital)
1507176734116:?read_csv
1507176768864:df <- read.csv(ir.hosp.url)
1507176781051:View(df[1:100, ])
1507176791290:colnames(df) <- tolower(colnames(df))
1507176797775:str(df$hospital)
1507176807046:labels(df$hospital)
1507176866500:View(df)
1507176897265:x <- df[df$group=='University of Limerick Hospital Group',]
1507176910055:uhl.data <- df[df$group=='University of Limerick Hospital Group', ]
1507176912640:remove(x)
1507176991246:?write.table
1507177005678:?write_tsv
1507177091659:write_tsv(uhl.data, "UHL.txt")
1507177136604:colnames(df)
1507177175167:df.reimport <- read_tsv('UHL.txt')
1507177186372:df.reimport == uhl.data
1507177205663:?rm
1507177244473:rm(c('df', 'df.reimport', 'uhl.data'))
1507177252342:rm(list=c('df', 'df.reimport', 'uhl.data'))
1507177267048:remove(ir.hosp.url)
1507177396928:fb.file.url <- paste0("https://archive.ics.uci.edu/ml/",
1507177396929:"machine-learning-databases/",
1507177396930:"00368/Facebook_metrics.zip")
1507177400884:?download.file
1507177441582:download.file(fb.file.url, 'fb_metrics.zip')
1507177460080:unzip('fb_metrics.zip')
1507177618798:unzip('fb_metrics.zip')
1507177644359:?unzip
1507177681107:df <- read_csv('dataset_Facebook.csv')
1507177695283:is.data.frame(df)
1507177697867:View(df)
1507177730938:df <- read_delim('dataset_Facebook.csv', delim=';')
1507177779525:View(df)
1507177794993:write_rds(df, "FBData.rds")
1507177815254:df.reimport <- read_rds("FBData.rds")
1507177817688:View(df.reimport)
1507177866537:rm(list=c('df', 'df.reimport'))
1507177872749:remove(fb.file.url)
1507177973614:stock.url <- paste0("https://archive.ics.uci.edu/ml/",
1507177973614:"machine-learning-databases/",
1507177973615:"00390/stock%20portfolio%20performance%20data%20set.xlsx")
1507177997165:download.file(stock.url, 'stock.xlsx')
1507178037972:require(readxl)
1507178057141:sheet.names
1507178088985:excel_sheets('stock.xlsx')
1507178103924:sheet.names <- excel_sheets('stock.xlsx')
1507178113768:sheet.name <- sheet.names[0]
1507178125179:sheet.name <- sheet.names[[0]]
1507178131610:sheet.names
1507178134664:sheet.names[0]
1507178137617:sheet.names[1]
1507178156239:sheet.name <- sheet.names[1]
1507178192847:df <- read_excel('stock.xlsx', sheet=sheet.name)
1507178198357:as.data.frame(df)
1507178206572:is.data.frame(df)
1507178219154:?read_excel
1507178240318:View(df)
1507178300926:write_delim(df, 'written_stock_data.txt', delim=';')
1507178363941:df.reimport <- read_delim('written_stock_data.txt, delim=";')
1507178380157:df.reimport <- read_delim('written_stock_data.txt', delim=';')
1507178383607:View(df.reimport)
1507178384696:View(df)
1507178432038:rm(list=c('df', 'df.reimport'))
1507178441247:rm(list=c('df', 'sheet.name'))
1507178450865:rm(list=c('stock.url', 'sheet.names'))
1507181162610:chinese.cities.url <- paste0("https://archive.ics.uci.edu/ml/",
1507181162611:"machine-learning-databases/00394/",
1507181162611:"FiveCitiePMData.rar")
1507181162612:download.file(chinese.cities.url, "chinese_cities.rar")
1507181193897:unzip('chinese_cities.rar')
1507181831821:beijing.df <- read_csv('BeijingPM20100101_20151231.csv')
1507181845451:beijing.df <- read_csv('chinese_cities/BeijingPM20100101_20151231.csv')
1507181864146:View(beijing.df[1:1000, ])
1507181908546:chengdu.df <- read_csv('chinese_cities/ChengduPM20100101_20151231.csv')
1507181934531:guangzhou.df <- read_csv('chinese_cities/GuangzhouPM20100101_20151231.csv')
1507181957236:shanghai.df <- read_csv('chinese_cities/ShanghaiPM20100101_20151231.csv')
1507181981170:shenyang.df <- read_csv('chinese_cities/ShenyangPM20100101_20151231.csv')
1507182037772:?write_excel_csv
1507182054548:require(excel)
1507182061554:install.packages('excel')
1507182084699:require(quickr)
1507182124708:require(xlsx)
1507182130881:install.packages('xlsx')
1507182139200:require(xlsx)
1507182144168:require(xlsx)
1507182171302:require(rJava)
1507182185589:install.packages('rJava')
1507182189624:require(rJava)
1507182252069:install.packages('WriteXLS')
1507182261394:require(WriteXLS)
1507182290728:?WriteXLS
1507182382026:csv.list <- c(beijing.df, chengdu.df, guangzhou.df, shanghai.df, shenyang.df)
1507182415897:sheet.names <- c('Beijing', 'Chengdu', 'Guangzhou', 'Shanghai', 'Shenyang')
1507182478402:WriteXLS(csv.list, ExcelFileName="chinese_cities.xlsx", SheetNames=sheet.names)
1507182493715:View(beijing.df)
1507182495187:View(chengdu.df)
1507182496118:View(guangzhou.df)
1507182496985:View(shanghai.df)
1507182498033:View(shenyang.df)
1507182516044:is.data.frame(csv.list)
1507182522867:is.data.frame(csv.list[1])
1507182531089:is.data.frame(beijing.df)
1507182539256:csv.list
1507182544110:csv.list[1]
1507182550889:View(csv.list[1])
1507182627299:WriteXLS(x=c(beijing.df, chengdu.df, guangzhou.df, shan))
1507182667863:WriteXLS(x=c(beijing.df, chengdu.df, guangzhou.df, shanghai.df, shenyang.df),
1507182667864:ExcelFileName='chinese_cities.xlsx',
1507182667865:SheetNames=sheet.names)
1507182717660:csv.list <- list(beijing.df, chengdu.df, guangzhou.df, shanghai.df, shenyang.df)
1507182727318:is.data.frame(csv.list[1])
1507182733514:csv.list[1]
1507182739476:View(csv.list[1])
1507182751267:is.data.frame(csv.list[1])
1507182754020:is.data.frame(csv.list[[1])
1507182756103:is.data.frame(csv.list[[1]])
1507182759455:csv.list
1507182798112:WriteXLS(csv.list, ExcelFileName='chinese_cities.xlsx', SheetNames=sheet.names)
1507182975598:?WriteXLS
1507183144347:shanghai.df.reimported <- read_excel('chinese_cities.xlsx', sheet='Shanghai')
1507183192331:rm(list = csv.list)
1507183245731:rm(list=c('beijing.df', 'chengdu.df', 'guangzhou.df', 'shanghai.df', 'shanghai.df.reimported', 'shenyang.df'))
1507204562084:data.url <- paste0("http://cs.stanford.edu/people/alecmgo/",
1507204562087:"trainingandtestdata.zip")
1507204562087:download.file(data.url, 'trainingandtestdata.zip')
1507204667100:df <- read_csv('trainingandtestdata/training.1600000.processed.noemoticon.csv')
1507204688756:head(df)
1507204703864:colnames(df)
1507204740674:colnames(df) <- c('polarity', 'id', 'date', 'query', 'user', 'tweet')
1507204772771:head(df)
1507204819195:df <- read.csv('trainingandtestdata/training.1600000.processed.noemoticon.csv')
1507204872118:colnames(df) <- c('polarity', 'id', 'date', 'query', 'user', 'tweet')
1507204878577:str(df)
1507204889449:labels(df$polarity)
1507204895233:levels(df$polarity)
1507204901315:str(df$polarity)
1507204930166:head(df)
1507204944043:df <- read_csv('trainingandtestdata/training.1600000.processed.noemoticon.csv')
1507204952329:colnames(df) <- c('polarity', 'id', 'date', 'query', 'user', 'tweet')
1507204961396:str(df$polarity)
1507204976665:View(df[1:1000], )
1507204983815:View(df[1:1000, ])
1507205025007:negative.df <- df[df$polarity == 0,]
1507205036421:neutral.df <- df[df$polarity == 2,]
1507205052600:positive.df <- df[df$polarity == 4,]
1507205073971:?save
1507205129087:save(list=c('negative.df', 'neutral.df', 'positive.df'), file='Twitter.RData')
1507205219219:load('Twitter.RData')
1507205235954:load('Twitter.RData')
1507205277638:rm(list=c('negative.df', 'neutral.df', 'positive.df'))
1507205734807:require(rvest)
1507205777227:bloomberg.url <- "https://www.bloomberg.com/energy"
1507205777229:html.data <- read_html(bloomberg.url)
1507205898645:html.data <- read_html(bloomberg.url)
1507205898876:table.nodes <- html_nodes(html.data, 'table')
1507206017100:table.nodes <- html_nodes(html.data, 'table')
1507206017189:data.tables <- html_table(table.nodes)
1507206017270:refined.products.df <- data.tables[[2]]
1507206023813:View(refined.products.df)
1507206065269:colnames(refined.products.df) <- tolower(colnames(refined.products.df))
1507206391951:currency.url <- "https://www.bloomberg.com/markets/currencies"
1507206391954:currency.html.data <- read_html(currency.url)
1507206392129:currency.table.nodes <- html_nodes(currency.html.data, 'table')
1507206392136:currency.tables <- html_table(currency.table.nodes)
1507206392158:conversion.table <- currency.tables[[1]]
1507206395668:View(conversion.table)
1507206555638:x <- "USd/gal."
1507206568869:substr(x, 1, 3)
1507206674262:'RU' + 's'
1507206683021:paste('x', 'y')
1507206686341:paste0('x', 'y')
1507206728101:x <- "EUR-JPY"
1507206804878:value <- conversion.table[conversion.table$currency==x]
1507206844382:colnames(conversion.table) <- tolower(colnames(conversion.table))
1507206848000:value <- conversion.table[conversion.table$currency==x]
1507206864281:View(conversion.table)
1507206874149:value <- conversion.table[conversion.table$currency==x, ]
1507206885051:value$value
1507206942005:value <- conversion.table[conversion.table$currency==x, 'value']
1507207018601:convert.currency.to.euro <- function(units, price) {
1507207018603:currency <- toupper(substr(units, 1, 3))
1507207018604:conversion.string <- paste0("EUR-", currency)
1507207018605:new.price <- conversion.table[conversion.table$currency==conversion.string,
1507207018607:'value']
1507207018608:return(new.price)
1507207018609:}
1507207045702:convert.currency.to.euro('USD/gal', 160.02)
1507207127639:convert.currency.to.euro <- function(units, price) {
1507207127640:currency <- toupper(substr(units, 1, 3))
1507207127652:conversion.string <- paste0("EUR-", currency)
1507207127653:rate <- conversion.table[conversion.table$currency==conversion.string,
1507207127654:'value']
1507207127655:price <- as.double(price)
1507207127657:rate <- as.double(rate)
1507207127659:new.price <- price / rate
1507207127660:return(new.price)
1507207127661:}
1507207132138:convert.currency.to.euro('USD/gal', 160.02)
1507208460815:x <- c('USD/gal', 'JPY/gal')
1507208471513:currency <- toupper(substr(x, 1, 3))
1507208474355:currency
1507208501472:conversion.strings <- paste0("EUR-", currencies)
1507208507813:conversion.strings <- paste0("EUR-", currency)
1507208510512:conversion.strings
1507208533599:rate <- conversion.table[conversion.table$currency==conversion.strings,
1507208533602:'value']
1507208628585:apply
1507208633346:?apply
1507208664541:convert.currency.to.euro <- function(units, price) {
1507208664543:currencies <- toupper(substr(units, 1, 3))
1507208664543:conversion.strings <- paste0("EUR-", currencies)
1507208664543:rate <- conversion.table[conversion.table$currency==conversion.strings,
1507208664544:'value']
1507208664544:price <- as.double(price)
1507208664545:rate <- as.double(rate)
1507208664545:new.price <- price / rate
1507208664546:return(new.price)
1507208664546:}
1507208675945:require(rvest)
1507208675946:bloomberg.url <- "https://www.bloomberg.com/energy"
1507208675947:html.data <- read_html(bloomberg.url)
1507208676162:table.nodes <- html_nodes(html.data, 'table')
1507208676176:data.tables <- html_table(table.nodes)
1507208676227:refined.products.df <- data.tables[[2]]
1507208676227:colnames(refined.products.df) <- tolower(colnames(refined.products.df))
1507208676229:currency.url <- "https://www.bloomberg.com/markets/currencies"
1507208676229:currency.html.data <- read_html(currency.url)
1507208676413:currency.table.nodes <- html_nodes(currency.html.data, 'table')
1507208676422:currency.tables <- html_table(currency.table.nodes)
1507208676456:conversion.table <- currency.tables[[1]]
1507208676457:colnames(conversion.table) <- tolower(colnames(conversion.table))
1507208687784:require(rvest)
1507208687785:bloomberg.url <- "https://www.bloomberg.com/energy"
1507208687785:html.data <- read_html(bloomberg.url)
1507208687954:table.nodes <- html_nodes(html.data, 'table')
1507208687963:data.tables <- html_table(table.nodes)
1507208688013:refined.products.df <- data.tables[[2]]
1507208688014:colnames(refined.products.df) <- tolower(colnames(refined.products.df))
1507208688015:currency.url <- "https://www.bloomberg.com/markets/currencies"
1507208688016:currency.html.data <- read_html(currency.url)
1507208688173:currency.table.nodes <- html_nodes(currency.html.data, 'table')
1507208688188:currency.tables <- html_table(currency.table.nodes)
1507208688226:conversion.table <- currency.tables[[1]]
1507208688227:colnames(conversion.table) <- tolower(colnames(conversion.table))
1507208688228:convert.currency.to.euro <- function(units, price) {
1507208688229:currencies <- toupper(substr(units, 1, 3))
1507208688230:conversion.strings <- paste0("EUR-", currencies)
1507208688231:rate <- conversion.table[conversion.table$currency==conversion.strings,
1507208688231:'value']
1507208688232:price <- as.double(price)
1507208688233:rate <- as.double(rate)
1507208688233:new.price <- price / rate
1507208688233:return(new.price)
1507208688234:}
1507208710438:View(conversion.table)
1507208712151:View(refined.products.df)
1507208864077:apply(refined.products.df[, c('units, price')], 1, convert.currency.to.euro)s
1507208865498:refined.products.df[, c('units, price')]
1507208875503:refined.products.df[, c('units', 'price')]
1507209038347:sum(c(1, 2), c(3, 4))
1507209073811:?for
1507209079358:()
1507209162330:?append
1507209165780:x <- c(1)
1507209168703:append(x, 2)
1507209171136:x
1507209175736:x <- append(x, 2)
1507209755854:bloomberg.url <- "https://www.bloomberg.com/energy"
1507209755856:html.data <- read_html(bloomberg.url)
1507209756069:table.nodes <- html_nodes(html.data, 'table')
1507209756079:data.tables <- html_table(table.nodes)
1507209756117:refined.products.df <- data.tables[[2]]
1507209756118:colnames(refined.products.df) <- tolower(colnames(refined.products.df))
1507209756119:currency.url <- "https://www.bloomberg.com/markets/currencies"
1507209756120:currency.html.data <- read_html(currency.url)
1507209756256:currency.table.nodes <- html_nodes(currency.html.data, 'table')
1507209756261:currency.tables <- html_table(currency.table.nodes)
1507209756288:conversion.table <- currency.tables[[1]]
1507209756289:colnames(conversion.table) <- tolower(colnames(conversion.table))
1507209756290:convert.currency.to.euro <- function (units, price) {
1507209756291:currencies <- toupper(substr(units, 1, 3))
1507209756292:conversion.strings <- paste0("EUR-", currencies)
1507209756292:rate <- conversion.table[conversion.table$currency==conversion.strings,
1507209756293:'value']
1507209756293:price <- as.double(price)
1507209756293:rate <- as.double(rate)
1507209756294:new.price <- price / rate
1507209756294:return(new.price)
1507209756295:}
1507209756297:convert.currency.vectors.to.euro <- function (units.vector, price.vector) {
1507209756299:new.price.vector <- c()
1507209756300:for (i in 1:length(units.vector)) {
1507209756300:new.price <- convert.currency.to.euro(units.vector[i],
1507209756301:price.vector[i])
1507209756302:append(new.price.vector, new.price)
1507209756302:}
1507209756305:return(new.price.vector)
1507209756305:}
1507209756308:units.vector <- refined.products.df$units
1507209756309:price.vector <- refined.products.df$price
1507209756310:new.price.vector <- convert.currency.vectors.to.euro(units.vector,
1507209756310:price.vector)
1507209771750:refined.products.df$europrice <- new.price.vector
1507209777351:View(refined.products.df)
1507209787881:new.price.vector
1507209795198:units.vector
1507209801636:price.vector
1507210440368:convert.currency.vectors.to.euro <- function (units.vector, price.vector) {
1507210440372:new.price.vector <- c()
1507210440373:for (i in 1:length(units.vector)) {
1507210440375:new.price <- convert.currency.to.euro(units.vector[i],
1507210440375:price.vector[i])
1507210440376:append(new.price.vector, new.price)
1507210440377:}
1507210440377:return(new.price.vector)
1507210440378:}
1507210453822:new.price.vector <- convert.currency.vectors.to.euro(units.vector,
1507210453823:price.vector)
1507210457963:new.price.vector
1507210464620:units.vector
1507210470711:price.vector
1507210491473:as.double("52,650.00")
1507210562631:?gsub
1507210595970:price.vector <- gsub(',', '', price.vector)
1507210599304:price.vector
1507210609291:new.price.vector <- convert.currency.vectors.to.euro(units.vector,
1507210609292:price.vector)
1507210613279:new.price.vector
1507210668642:require(rvest)
1507210668644:bloomberg.url <- "https://www.bloomberg.com/energy"
1507210668645:html.data <- read_html(bloomberg.url)
1507210669599:table.nodes <- html_nodes(html.data, 'table')
1507210669616:data.tables <- html_table(table.nodes)
1507210669692:refined.products.df <- data.tables[[2]]
1507210669693:colnames(refined.products.df) <- tolower(colnames(refined.products.df))
1507210669694:currency.url <- "https://www.bloomberg.com/markets/currencies"
1507210669695:currency.html.data <- read_html(currency.url)
1507210670089:currency.table.nodes <- html_nodes(currency.html.data, 'table')
1507210670099:currency.tables <- html_table(currency.table.nodes)
1507210670140:conversion.table <- currency.tables[[1]]
1507210670141:colnames(conversion.table) <- tolower(colnames(conversion.table))
1507210670142:convert.currency.to.euro <- function (units, price) {
1507210670143:currencies <- toupper(substr(units, 1, 3))
1507210670144:conversion.strings <- paste0("EUR-", currencies)
1507210670144:rate <- conversion.table[conversion.table$currency==conversion.strings,
1507210670144:'value']
1507210670145:price <- as.double(price)
1507210670145:rate <- as.double(rate)
1507210670145:new.price <- price / rate
1507210670146:return(new.price)
1507210670146:}
1507210670147:convert.currency.vectors.to.euro <- function (units.vector, price.vector) {
1507210670148:new.price.vector <- c()
1507210670149:price.vector <- gsub(',', '', price.vector)
1507210670150:for (i in 1:length(units.vector)) {
1507210670151:new.price <- convert.currency.to.euro(units.vector[i],
1507210670151:price.vector[i])
1507210670152:new.price.vector <- append(new.price.vector, new.price)
1507210670152:}
1507210670152:return(new.price.vector)
1507210670153:}
1507210670155:units.vector <- refined.products.df$units
1507210670155:price.vector <- refined.products.df$price
1507210670156:new.price.vector <- convert.currency.vectors.to.euro(units.vector,
1507210670157:price.vector)
1507210670199:refined.products.df$europrice <- new.price.vector
1507210674763:View(refined.products.df)
1507210723762:x <- 1.2222
1507210728412:round(x, 2)
1507210730565:x
1507210748051:require(rvest)
1507210748052:bloomberg.url <- "https://www.bloomberg.com/energy"
1507210748053:html.data <- read_html(bloomberg.url)
1507210748438:table.nodes <- html_nodes(html.data, 'table')
1507210748448:data.tables <- html_table(table.nodes)
1507210748505:refined.products.df <- data.tables[[2]]
1507210748506:colnames(refined.products.df) <- tolower(colnames(refined.products.df))
1507210748507:currency.url <- "https://www.bloomberg.com/markets/currencies"
1507210748508:currency.html.data <- read_html(currency.url)
1507210748844:currency.table.nodes <- html_nodes(currency.html.data, 'table')
1507210748853:currency.tables <- html_table(currency.table.nodes)
1507210748892:conversion.table <- currency.tables[[1]]
1507210748892:colnames(conversion.table) <- tolower(colnames(conversion.table))
1507210748895:convert.currency.to.euro <- function (units, price) {
1507210748896:currencies <- toupper(substr(units, 1, 3))
1507210748897:conversion.strings <- paste0("EUR-", currencies)
1507210748898:rate <- conversion.table[conversion.table$currency==conversion.strings,
1507210748899:'value']
1507210748899:price <- as.double(price)
1507210748900:rate <- as.double(rate)
1507210748901:new.price <- round(price / rate, 2)
1507210748902:return(new.price)
1507210748903:}
1507210748904:convert.currency.vectors.to.euro <- function (units.vector, price.vector) {
1507210748904:new.price.vector <- c()
1507210748906:price.vector <- gsub(',', '', price.vector)
1507210748906:for (i in 1:length(units.vector)) {
1507210748908:new.price <- convert.currency.to.euro(units.vector[i],
1507210748908:price.vector[i])
1507210748909:new.price.vector <- append(new.price.vector, new.price)
1507210748910:}
1507210748911:return(new.price.vector)
1507210748912:}
1507210748913:units.vector <- refined.products.df$units
1507210748913:price.vector <- refined.products.df$price
1507210748915:new.price.vector <- convert.currency.vectors.to.euro(units.vector,
1507210748915:price.vector)
1507210748956:refined.products.df$europrice <- new.price.vector
1507211195224:education.url <- paste0("https://data.world/inderz/",
1507211195227:"india-district-level-school-report-card/file/",
1507211195229:"Distt%20Report%20Card%202015-16_new.xlsx")
1507211195231:education.df <- read_excel(education.url)
1507211416818:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx')
1507211482060:head(education.df)
1507211496705:colnames(education.df)
1507211517367:education.df[1]
1507211628103:education.df <- load('india-district-level-school-report-card.rmd')
1507211810670:readRDS('india-district-level-school-report-card.rmd')
1507211875839:x <- read_excel("https://data.world/inderz/india-district-level-school-report-card")
1507212062702:?read_excel
1507212244971:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212244975:sheet='2015-16_1',
1507212244976:skip=19,
1507212244978:range=cell_cols("B:I"))
1507212248977:View(education.df)
1507212320739:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212320740:sheet='2015-16_1',
1507212320741:skip=21,
1507212320742:range=cell_cols("B:I"))
1507212323317:View(education.df)
1507212333360:?read_excel
1507212392880:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212392883:sheet='2015-16_1',
1507212392884:skip=19)
1507212395386:View(education.df)
1507212572552:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212572557:sheet='2015-16_1',
1507212572558:range=cell_cols("B20:I"))
1507212574607:View(education.df)
1507212601572:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212601574:sheet='2015-16_1',
1507212601574:range="B21:I")
1507212681870:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212681873:range="2015-16_1!B21:I30")
1507212684158:View(education.df)
1507212690857:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212690858:range="2015-16_1!B21:I")
1507212719608:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212719611:range="2015-16_1!B21:I700")
1507212721761:View(education.df)
1507212749899:education.df <- read_excel('Distt Report Card 2015-16_new.xlsx',
1507212749901:range="2015-16_1!B20:I700")
1507212751303:View(education.df)
1507216876044:setwd("~/MSc in Data Analytics/Working with Data/Week 4 - Oct 2 to Oct 6")
1507216885583:require(ggplot2)
1507216912772:View(mpg)
1507216917666:?mpg
1507216937219:df <- mpg
1507217027455:plot.default(df$displ, df$hwy)
1507217101374:?plot
1507217125693:?qplot
1507217190464:qplot(displ, hwy, mpg)
1507217194151:qplot(displ, hwy, df)
1507217209945:qplot('displ', 'hwy', df)
1507217251727:qplot(x=displ, y=hwy, data=df)
1507217277433:plot.default(df$displ, df$hwy)
1507217297754:?qplot
1507217337343:qplot(x=displ, y=hwy, data=df, colour=I('red'))
1507217345620:qplot(x=displ, y=hwy, data=df, colour='red')
1507217348461:qplot(x=displ, y=hwy, data=df, colour=I('red'))
1507217422398:?qplot
1507217554137:qplot(x=displ, y=hwy, data=df, colour=class)
1507217686135:qplot(x=displ, y=hwy, data=df, size=class)
1507217717989:qplot(x=displ, y=hwy, data=df, size=displ, colour=class)
1507217751197:qplot(x=displ, y=hwy, data=df, size=cty, colour=class)
1507217804670:qplot(x=displ, y=hwy, data=df, shape=class)
1507217902385:?I
1507218006476:qplot(x=displ, y=hwy, data=df, alpha=class)
1507218021019:qplot(x=displ, y=hwy, data=df, alpha=class, colour=class)
1507218033962:qplot(x=displ, y=hwy, data=df, alpha=I(0.1))
1507218045564:qplot(x=displ, y=hwy, data=df, alpha=I(0.2))
1507218053265:qplot(x=displ, y=hwy, data=df, alpha=I(0.3))
1507218062047:qplot(x=displ, y=hwy, data=df, alpha=I(0.4))
1507218063824:qplot(x=displ, y=hwy, data=df, alpha=I(0.5))
1507218066990:qplot(x=displ, y=hwy, data=df, alpha=I(0.6))
1507218070581:qplot(x=displ, y=hwy, data=df, alpha=I(0.7))
1507218169853:qplot(x = displ , y = hwy, data = mpg) + facet_grid(rows ~ cols)
1507218186032:?facet_grid
1507218212479:qplot(x = displ , y = hwy, data = mpg) + facet_grid(drv)
1507218229845:qplot(x = displ , y = hwy, data = mpg) + facet_grid(drv ~ .)
1507218256668:qplot(x = displ , y = hwy, data = mpg, colour=class) + facet_grid(drv ~ .)
1507218283505:qplot(x = displ , y = hwy, data = mpg, colour=drv)
1507218300788:qplot(x = displ , y = hwy, data = mpg, colour=class) + facet_grid(drv ~ .)
1507218312604:qplot(x = displ , y = hwy, data = mpg, colour=class) + facet_grid(. ~ drv)
1507218346651:?facet_grid
1507218400289:qplot(x = displ , y = hwy, data = mpg) + facet_grid(class ~ drv)
1507218510306:?facet_wrap
1507218549156:qplot(x = displ , y = hwy, data = mpg) + facet_wrap( ~ class)
1507218571492:qplot(x = displ , y = hwy, data = mpg) + facet_wrap(class ~ )
1507218578366:qplot(x = displ , y = hwy, data = mpg) + facet_wrap(class ~ drv)
1507218624000:qplot(x = displ , y = hwy, data = mpg) + facet_wrap( ~ class)
1507218789147:qplot(x = displ, y = hwy, data = mpg, geom = ???point???)
1507218797825:qplot(x = displ, y = hwy, data = mpg, geom = 'point')
1507218843120:qplot(x = displ, y = hwy, data = mpg, geom = 'smooth')
1507218859085:?qplot
1507219003733:qplot(x = displ, y = hwy, data = mpg, geom = c('point', 'smooth'))
1507219071352:qplot(x=class, y=hwy, data=mpg)
1507219079063:qplot(x=class, y=hwy, data=mpg, geom='point')
1507219086465:qplot(x=class, y=hwy, data=mpg, geom='boxplot')
1507219106470:qplot(x=class, y=hwy, data=mpg, geom=c('point', 'boxplot'))
1507220052970:qplot(x=class, y=hwy, data=mpg)
1507220065196:qplot(x=class, y=hwy, data=mpg, geom=c('point', 'boxplot'))
1507220075013:qplot(x=class, y=hwy, data=mpg, geom='boxplot')
1507220138679:qplot(x=class, y=hwy, data=mpg, geom=c('point', 'boxplot'))
1507220150813:qplot(x=class, y=hwy, data=mpg, geom='distribution')
1507220170925:qplot(x=class, y=hwy, data=mpg, geom=c('point', 'boxplot'))
1507220367526:qplot(x=class, y=hwy, data=mpg, geom='smooth')
1507220371064:qplot(x=class, y=hwy, data=mpg, geom=c('point', 'boxplot'))
1507220419596:qplot(x=class, y=hwy, data=mpg, geom=c(boxplot'))
1507220422153:;
1507220423434:''
1507220431884:qplot(x=class, y=hwy, data=mpg, geom=c('boxplot'))
1507220566345:qplot(reorder(class, hwy), hwy, data=mpg, geom='boxplot')
1507220751707:?reorder
1507220773547:qplot(reorder(class, hwy, median), hwy, data=mpg, geom='boxplot')
1507220909809:df <- diamonds
1507220918034:df <- mpg
1507220928593:diamonds.df <- diamonds
1507220935784:View(diamonds.df)
1507220939194:View(df)
1507220996889:qplot(reorder(class, hwy, median), hwy, data=mpg, geom='boxplot')
1507221002706:?qplot
1507221020077:qplot(reorder(class, hwy, median), hwy, data=mpg, geom='boxplot', xlab='Class')
1507221160252:?diamonds
1507221321012:qplot(x, z, data = diamonds.df)
1507221335358:qplot(x, data = diamonds.df)
1507221352302:qplot(cut, data = diamonds.df)
1507221386311:qplot(cut, data = diamonds.df, fill=cut)
1507221520957:qplot(x, data = diamonds.df, fill=x)
1507221768080:qplot(cut, data = diamonds.df)
1507221775569:qplot(x, data = diamonds.df)
1507221790295:qplot(x, data = diamonds.df, binwidth=1)
1507221792925:qplot(x, data = diamonds.df, binwidth=2)
1507221796521:qplot(x, data = diamonds.df, binwidth=1)
1507221985976:qplot(x, data = diamonds.df, binwidth=0.01)
1507222005328:qplot(carat, data = diamonds.df, binwidth=0.01)
1507222019803:qplot(carat, data = diamonds.df, binwidth=1)
1507222031588:qplot(carat, data = diamonds.df, binwidth=0.1)
1507222038538:qplot(carat, data = diamonds.df, binwidth=0.01)
1507222054500:qplot(carat, data = diamonds.df, binwidth=0.1)
1507222060150:qplot(carat, data = diamonds.df, binwidth=1)
1507222069158:qplot(carat, data = diamonds.df, binwidth=0.01)
1507222190734:?ggsave
1507542507383:setwd("~/MSc in Data Analytics/Working with Data/Week 4 - Oct 2 to Oct 6")
1507542700420:?httr
1507542717011:require(httr)
1507542719150:require(httr)
1507542741442:GET('https://api.jcdecaux.com/vls/v1/contracts')
1507542782018:GET('https://api.jcdecaux.com/vls/v1/contracts?apiKey=f3af0867d0ae0de6957fa29b4469667fba4e229e')
1507542791426:GET('https://api.jcdecaux.com/vls/v1/contracts?apiKey=f3af0867d0ae0de6957fa29b4469667fba4e229')
1507542803962:GET('https://api.jcdecaux.com/vls/v1/contracts?apiKey=f3af0867d0ae0de6957fa29b4469667fba4e229e')
1507542850516:jcd.response <- GET('https://api.jcdecaux.com/vls/v1/contracts?apiKey=f3af0867d0ae0de6957fa29b4469667fba4e229e')
1507542855643:jcd.response
1507542867827:?GET
1507542957203:typeof(jcd.response)
1507542972262:jcd.response[[1]]
1507542975800:jcd.response
1507542985908:jcd.response[[2]]
1507542990945:jcd.response[[3]]
1507543003613:typeof(jcd.response[[3]])
1507543055195:content(jcd.response)
1507543060040:str(content(jcd.response))
1507543279675:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1507543279676:stations.url <- paste0("https://api.jcdecaux.com/vls/v1/contracts",
1507543279676:"apiKey=",
1507543279677:api.key)
1507543279677:stations.response <- GET(stations.url)
1507543305476:require(httr)
1507543305476:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1507543305477:stations.url <- paste0("https://api.jcdecaux.com/vls/v1/contracts",
1507543305477:"?apiKey=",
1507543305479:api.key)
1507543305479:stations.response <- GET(stations.url)
1507543324201:status_code(stations.response)
1507543347623:http_status(stations.response)
1507543357363:stations.response$status_code
1507543361370:stations.response$content
1507543374664:content(stations.response)
1507543418581:content(stations.response, text)
1507543424714:content(stations.response, "text")
1507543461063:content(stations.response, "text", encoding="IS0-8859-1")
1507543523409:stringi::stri_enc_detect(content(stations.response, "raw"))
1507543547766:content(stations.response, "text", encoding="UTF-8")
1507543572512:content(stations.response, "text", encoding="UTF-8")
1507543681697:data.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507543681698:"?contract=Paris&",
1507543681699:"?apiKey=",
1507543681699:api.key)
1507543708578:paris.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507543708579:"?contract=Paris&",
1507543708580:"?apiKey=",
1507543708581:api.key)
1507543708583:paris.data <- GET(data.url)
1507543720815:status_code(paris.data)
1507543834512:paris.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507543834513:"?contract=Paris&",
1507543834514:"&apiKey=",
1507543834515:api.key)
1507543834516:paris.data <- GET(data.url)
1507543847197:status_code(paris.data)
1507543879382:paris.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507543879383:"?contract=Paris",
1507543879384:"&apiKey=",
1507543879384:api.key)
1507543879385:paris.data <- GET(data.url)
1507543887504:status_code(paris.data)
1507543900759:paris.data
1507543920431:paris.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507543920434:"?contract=Paris",
1507543920435:"&apiKey=",
1507543920436:api.key)
1507543926148:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1507543930477:paris.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507543930478:"?contract=Paris",
1507543930478:"&apiKey=",
1507543930479:api.key)
1507543939372:paris.url
1507543947438:paris.data <- GET(data.url)
1507543954777:paris.data <- GET(paris.url)
1507543970255:paris.data <- GET(paris.url)
1507544087054:paris.data <- GET(paris.url)
1507544106019:status_code(paris.data)
1507544111726:content(paris.data)
1507544771759:require(jsonlite)
1507544843865:paris.data.text <- content(paris.data, as="text")
1507544848493:paris.data.json <- fromJSON(paris.data.text)
1507544852523:paris.data.json
1507544854531:View(paris.data.json)
1507558292299:setwd("~/MSc in Data Analytics/Working with Data/Week 5 - Oct 9 to Oct 13")
1507558310482:?unzip
1507558373717:?dplyr
1507558452782:unzip('bnames.csv.bz2')
1507558531936:baby.names <- read.csv('bnames.csv.bz2')
1507558546842:colnames(baby.names)
1507558662646:str(baby.names)
1507558686776:baby.names <- read.csv('bnames.csv.bz2', stringsAsFactors=F)
1507558714319:colnames(baby.names)
1507558756289:david.df <- baby.names[baby.names$name=='david']
1507558761470:david.df <- baby.names[baby.names$name=='david',]
1507558769685:david.df <- baby.names[baby.names$name=='David',]
1507558778321:head(david.df)
1507558801268:baby.names[baby.names$name=='Jeswin',]
1507558818150:baby.names[baby.names$name=='Jay',]
1507558834358:View(david.df)
1507558873028:require(ggplot2)
1507558945665:qplot(david.df$year, david.df$prop)
1507558965189:?qplot
1507558981528:qplot(david.df$year, david.df$prop, geom='smooth')
1507558991765:qplot(david.df$year, david.df$prop, geom='point')
1507558994296:qplot(david.df$year, david.df$prop, geom='points')
1507559001036:qplot(david.df$year, david.df$prop, geom='smooth')
1507559040074:qplot(david.df$year, david.df$prop, geom='smooth', xlab='Year', ylab='Proportion')
1507559079805:?qplot
1507559177571:names.df <- baby.names[baby.names$name=='David' | baby.names$name='Lucy',]
1507559186648:names.df <- baby.names[baby.names$name=='David' | baby.names$name=='Lucy',]
1507559308831:qplot(year,
1507559308832:prop,
1507559308833:data=names.df,
1507559308833:geom='smooth',
1507559308833:xlab='Year',
1507559308834:ylab='Proportion',
1507559308834:colour=name)
1507559326221:qplot(year,
1507559326222:prop,
1507559326222:data=names.df,
1507559326223:geom='point',
1507559326223:xlab='Year',
1507559326223:ylab='Proportion',
1507559326224:colour=name)
1507559345152:qplot(year,
1507559345153:prop,
1507559345154:data=names.df,
1507559345154:geom='smooth',
1507559345154:xlab='Year',
1507559345155:ylab='Proportion',
1507559345155:colour=name)
1507559488609:qplot(year,
1507559488609:prop,
1507559488610:data=names.df,
1507559488610:geom='smooth',
1507559488611:xlab='Year',
1507559488611:ylab='Proportion',
1507559488612:colour=name,
1507559488612:facets=facet_grid())
1507559695085:names.df <- baby.names[baby.names$name=='David' | baby.names$name=='Lucy',]
1507559695092:qplot(year,
1507559695093:prop,
1507559695094:data=names.df,
1507559695094:geom='point',
1507559695095:xlab='Year',
1507559695096:ylab='Proportion',
1507559695097:colour=name) + facet_grid(name ~ .)
1507559715045:qplot(year,
1507559715045:prop,
1507559715046:data=names.df,
1507559715046:geom='point',
1507559715047:xlab='Year',
1507559715047:ylab='Proportion',
1507559715047:colour=name) + facet_wrap(name ~ .)
1507559748297:qplot(year,
1507559748297:prop,
1507559748298:data=names.df,
1507559748299:geom='smooth',
1507559748299:xlab='Year',
1507559748299:ylab='Proportion',
1507559748300:colour=name) + facet_grid(name ~ .)
1507559839726:qplot(year,
1507559839727:prop,
1507559839728:data=names.df,
1507559839729:geom='point',
1507559839730:xlab='Year',
1507559839731:ylab='Proportion',
1507559839732:colour=name) + facet_grid(name ~ .)
1507559982378:qplot(david.df$year,
1507559982379:david.df$prop,
1507559982380:geom='smooth',
1507559982380:xlab='Year',
1507559982380:ylab='Proportion',
1507559982381:colour=sex)
1507559995304:qplot(year,
1507559995305:prop,
1507559995306:geom='smooth',
1507559995307:xlab='Year',
1507559995308:ylab='Proportion',
1507559995309:colour=sex)
1507560051664:qplot(year,
1507560051664:prop,
1507560051665:data=david.df,
1507560051666:geom='smooth',
1507560051666:xlab='Year',
1507560051666:ylab='Proportion',
1507560051667:colour=sex)
1507560061186:qplot(year,
1507560061187:prop,
1507560061188:data=david.df,
1507560061188:geom='line',
1507560061189:xlab='Year',
1507560061190:ylab='Proportion',
1507560061190:colour=sex)
1507560200932:qplot(year,
1507560200933:prop,
1507560200934:data=david.df,
1507560200934:geom='line',
1507560200935:xlab='Year',
1507560200935:ylab='Proportion') + facet_grid(sex ~ .)
1507560231542:qplot(year,
1507560231543:prop,
1507560231544:data=david.df,
1507560231544:geom='line',
1507560231544:xlab='Year',
1507560231545:ylab='Proportion') + facet_wrap(~ sex)
1507560245771:qplot(year,
1507560245772:prop,
1507560245773:data=david.df,
1507560245773:geom='line',
1507560245774:xlab='Year',
1507560245774:ylab='Proportion') + facet_grid(. ~ sex)
1507560273924:qplot(year,
1507560273925:prop,
1507560273926:data=names.df,
1507560273926:geom='smooth',
1507560273927:xlab='Year',
1507560273927:ylab='Proportion') + facet_grid(name ~ sex)
1507560297715:qplot(year,
1507560297716:prop,
1507560297716:data=names.df,
1507560297717:geom='line',
1507560297717:xlab='Year',
1507560297717:ylab='Proportion') + facet_grid(name ~ sex)
1507560424740:require(dplyr)
1507560622008:?subset
1507560676427:colours <- c('blue, 'red', 'red', 'red', 'blue )
1507560681049:colours <- c('blue, 'red', 'red', 'red', 'blue')
1507560688054:colours <- c('blue', 'red', 'red', 'red', 'blue')
1507560695702:values = 1:5
1507560706326:df <- data.frame(colours, values)
1507560719123:filter(df, colours=='blue')
1507560764440:df
1507560794267:1 %in% 1:5
1507560796880:1 %in% 2:5
1507560819146:subset(df, colours='blue')
1507560824276:subset(df, colours=='blue')
1507560829116:df
1507560852753:filter(df, value %in% c(1, 5))
1507560856406:filter(df, values %in% c(1, 5))
1507560863723:df
1507560894017:x <- filter(df, values %in% c(1, 5))
1507560896452:df
1507560896991:x
1507560909698:colours <- c('blue', 'red', 'red', 'red', 'blue')
1507560914636:values = 1:5
1507560923829:df <- data.frame(colours, values)
1507560940666:baby.names <- read.csv('bnames.csv.bz2', stringsAsFactors=F)
1507560994800:boys <- filter(baby.names, sex='boy' & year>=2000)
1507561003798:boys <- filter(baby.names, sex=='boy' & year>=2000)
1507561011073:View(boys)
1507561029642:boys.2000 <- filter(baby.names, sex=='boy' & year==2000)
1507561033948:View(boys.2000)
1507561116314:boys <- boys.2000
1507561122666:remove(boys.2000)
1507561733223:?select
1507561748489:select(df, colours='red')
1507561757371:select(df, c('colours'))
1507561769765:select(df, c('values'))
1507561777567:select(df, colours)
1507561783307:select(df)
1507561787428:select(df, !colours)
1507561792514:select(df, -colours)
1507561833475:colnames(df) <- c('colour', 'value')
1507561850056:select(df, c('colour', 'value'))
1507561876216:select(baby.names, c('year', 'name', 'sex'))
1507561917242:select(df, colour, value)
1507561958037:select(baby.names, c(year, name, sex))
1507562059980:?reorder
1507562107380:?arrange
1507562124002:arrange(colours)
1507562125482:arrange(colour)
1507562129813:arrange(df, colour)
1507562136059:arrange(df, -value)
1507562143765:arrange(df, value)
1507562178412:arrange(df, colour, value)
1507562191400:arrange(df, colour, -value)
1507562208006:desc
1507562226497:arrange(df, desc(value))
1507562233734:arrange(df, colour, desc(value))
1507562237823:arrange(df, colour, asc(value))
1507562242920:?desc
1507562280185:arrange(df, -colour)
1507562290672:arrange(df, desc(colour))
1507562297452:arrange(df, colour, desc(value))
1507562375142:arrange(df, colour
1507562376840:)
1507562427423:arrange(baby.names, -prop)
1507562470299:arrange(baby.names, desc(prop))
1507562484412:arrange(desc(baby.names), prop)
1507562525916:david.df <- filter(baby.names, name=='David')
1507562566254:arrange(david.df, desc(prop))[1]
1507562575470:arrange(david.df, desc(prop))
1507562578717:arrange(david.df, desc(prop))
1507562588637:arrange(david.df, desc(prop))[1]
1507562596975:arrange(david.df, desc(prop))[[1]]
1507562678629:david.df <- filter(baby.names, name=='David' & sex=='boy')
1507562695417:tail(arrange(david.df, desc(prop)))
1507562725346:?mutate
1507562815389:mutate(df, twice=value*2)
1507562827715:mutate(df, twice)
1507562831844:mutate(df, twice=1)
1507562834468:mutate(df, twice=value*2)
1507562868818:mutate(df, twice=2:6)
1507562872622:mutate(df, twice=2:7)
1507562877393:mutate(df, twice=value*2)
1507562888953:mutate(df, twice=value*2, quadruple=twice*2)
1507562898136:df
1507562916127:mutate(df, twice=square*2, cube=twice*value)
1507562931550:mutate(df, square=value*2, cube=square*value)
1507562939953:mutate(df, square=value**2, cube=square*value)
1507562947485:power.df <- mutate(df, square=value**2, cube=square*value)
1507562976662:mutate(df, steps=cumsum(value))
1507563060491:cumsum(1:5)
1507563064618:cumsum(1:4)
1507563070989:1:4:2
1507563078844:1:4
1507563107293:mutate(power.df, cube=NULL)
1507563175308:power.df
1507563266236:summary(df)
1507563317001:colSums(df)
1507563340177:summarise(df, total=sum(value))
1507563346636:?summarise
1507563444831:summarise(df, total=sum(value), avg=mean(value))
1507563464996:summarise(df)
1507563532830:mutate(baby.names, prop*100)
1507563558646:baby.percentage <- mutate(baby.names, percentage=prop*100)
1507563599131:summarise(david.df, minimum=min(prop), maximum=max(prop))
1507721708503:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1507721796524:require(foreign)
1507721796539:regfile <- read.spss('regression.por')
1507721796559:df <- as.data.frame(regfile)
1507721796573:colnames(df) <- tolower(colnames(df))
1507721796575:normexam <- df$normexam
1507721796575:standlrt <- df$standlrt
1507721796576:shapiro.test(normexam)
1507721796583:#    Shapiro-Wilk normality test
1507721796584:#
1507721796585:# data:  normexam
1507721796586:# W = 0.99937, p-value = 0.1843
1507721796587:# normexam apppears to be a normal distribution.
1507721796587:shapiro.test(standlrt)
1507721796589:#  	 Shapiro-Wilk normality test
1507721796590:#
1507721796591:# data:  standlrt
1507721796592:# W = 0.99706, p-value = 4.158e-07
1507722094233:density(normexam)
1507722099989:?density
1507722175218:plot(density(normexam))
1507722186482:plot(density(standlrt))
1507722260752:qqnorm(normexam)
1507722267587:qqplot(standlrt)
1507722275360:qqnorm(standlrt)
1507722282619:qqnorm(normexam)
1507722284842:qqnorm(standlrt)
1507722303042:shapiro.test(normexam)
1507722310414:shapiro.test(standlrt)
1507722443825:?replicate
1507722483439:x <- c(1, 2, 3, 4, 5)
1507722489691:x <- 1:5
1507722490583:x
1507722529286:replicate(5, mean(x))
1507722540705:hist(replicate(5, mean(x)))
1507722543945:hist(replicate(5, mean(x)))
1507722590179:?replicate
1507722607649:?rexp
1507722624012:replicate(5, mean(rexp(5)))
1507723211351:length(normexam)
1507723219064:length(standlrt)
1507723648704:require(Hmisc)
1507723671121:rcorr(normexam, standlrt)
1507723683820:rcorr(normexam, standlrt, type='spearman')
1507723688995:rcorr(normexam, standlrt, type='pearson')
1507723770564:densityplot(normexam)
1507723780627:plot(density(normexam))
1507727851992:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 5 - Oct 9 to Oct 13/Week5Data")
1507728384980:df <- read.table('youthcohort.dat')
1507728387437:View(df)
1507728404163:df <- read.table('youthcohort.dat', stringsAsFactors = F)
1507728409006:View(df)
1507728464435:require(psych)
1507728473139:?describe.by
1507728608066:require(FSA)
1507728611148:require(FSA)
1507728617787:install.packages('FSA')
1507728631395:require(FSA)
1507728633555:require(FSA)
1507728652392:dunnTest(df$s1weight)
1507729505851:require(pwr)
1507729510573:install.packages(pwr)
1507729513906:install.packages('pwr')
1507729518241:require(pwr)
1507731438037:View(df)
1507731589631:df <- read.table('youthcohort.dat')
1507731625940:ethnicity <- df$ethsfr
1507731625941:math.grades <- df$gradmath
1507731630650:str(math.grades)
1507731693266:str(ethnicity)
1507731842491:bully.df <- read.table('bullying.dat')
1507731850226:View(bully.df)
1507732062120:weights <- df$s1weight
1507732097124:weights[1]
1507732099865:weights[2]
1507732823485:require(ggplot2)
1507732980634:qplot(ethnicity, weights)
1507733007481:qplot(weights)
1507733015264:qplot(weights, ethnicity)
1507733037326:qplot(weights, colour=ethnicity)
1507733041402:qplot(weights, ethnicity)
1507733045546:qplot(ethnicity, weights)
1507733067782:qplot(ethnicity, weights, geom='boxplot')
1507733227601:?lm
1507733284311:?aov
1507733334723:lm.data <- lm(ethnicity ~ weights, data=df)
1507733350177:?lm
1507733395729:lm.data <- lm(weights ~ ethnicity, data=df)
1507733416334:summary(lm.data)
1507733606034:anova(lm.data)
1507733744963:confint(lm.data)
1507733762003:levels(ethnicity)
1507733799478:df[df$ethsfr=='Bangladeshi',]
1507733820543:bangla <- df[df$ethsfr=='Bangladeshi',]
1507733824408:View(bangla)
1507733896329:bangla <- subset(df, ethsfr=='Bangladeshi' & !is.na(ethsfr))
1507733949003:new.df <- subset(df, !is.na(ethsfr))
1507733989776:weights <- new.df$s1weight
1507734000246:ethnicity <- new.df$ethsfr
1507734040606:lm.data <- lm(weights ~ ethnicity)
1507734048004:summary(lm.data)
1507734070058:anova(lm.data)
1507803441351:require(tm)
1507803441737:require(tm)
1507803441738:require(wordcloud)
1507803441819:require(RCurl)
1507803442130:require(XML)
1507803442279:require(SnowballC)
1507803442306:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1507803442364:load(htmlToText)
1507803442366:setwd("~/MSc in Data Analytics/Data Mining/Week 2 - Sep 18 to Sep 22")
1507803442367:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1507803442368:source('htmlToText.R')
1507803442372:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1507803442554:data2 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html")
1507803442781:data3 <- htmlToText("http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html")
1507803442879:data4 <- htmlToText("http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html")
1507803442972:data <- c(data1, data2)
1507803442973:data <- c(data, data3)
1507803442974:c(data, data4)
1507803442989:data <- c(data, data4)
1507803442990:txt_corpus <- Corpus (VectorSource (data))
1507803442992:summary(txt_corpus)
1507803442996:tm_map <- tm_map (txt_corpus, stripWhitespace)
1507803443006:tm_map <- tm_map (tm_map, removePunctuation)
1507803443009:tm_map <- tm_map (tm_map, removeNumbers)
1507803443012:tm_map <- tm_map (tm_map, removeWords, stopwords("english"))
1507803443058:stopwords('english')
1507803443061:tm_map <- tm_map (tm_map, removeWords, c("work", "use", "java", "new", "support"))
1507803443063:inspect(tm_map)
1507803443074:Matrix <- TermDocumentMatrix(tm_map)
1507803443086:matrix_c <- as.matrix (Matrix)
1507803443087:freq <- sort (rowSums (matrix_c))
1507803443089:freq
1507803443118:tmdata <- data.frame (words=names(freq), freq)
1507803443120:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
1507803454500:setwd("~/MSc in Data Analytics/Data Mining/Week 2 - Sep 18 to Sep 22")
1507803463248:require(tm)
1507803463249:require(tm)
1507803463250:require(wordcloud)
1507803463251:require(RCurl)
1507803463251:require(XML)
1507803463252:require(SnowballC)
1507803463253:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1507803463344:load(htmlToText)
1507803463345:setwd("~/MSc in Data Analytics/Data Mining/Week 2 - Sep 18 to Sep 22")
1507803463346:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1507803463420:source('htmlToText.R')
1507803463421:data1 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/overview/index.html")
1507803463537:data2 <- htmlToText("http://www.oracle.com/technetwork/database/options/advanced-analytics/odm/index.html")
1507803463647:data3 <- htmlToText("http://www.oracle.com/technetwork/database/database-technologies/r/r-technologies/overview/index.html")
1507803463749:data4 <- htmlToText("http://www.oracle.com/technetwork/database/database-technologies/r/r-enterprise/overview/index.html")
1507803463827:data <- c(data1, data2)
1507803463827:data <- c(data, data3)
1507803463828:c(data, data4)
1507803463844:data <- c(data, data4)
1507803463844:txt_corpus <- Corpus (VectorSource (data))
1507803463845:summary(txt_corpus)
1507803463847:tm_map <- tm_map (txt_corpus, stripWhitespace)
1507803463854:tm_map <- tm_map (tm_map, removePunctuation)
1507803463858:tm_map <- tm_map (tm_map, removeNumbers)
1507803463861:tm_map <- tm_map (tm_map, removeWords, stopwords("english"))
1507803463895:stopwords('english')
1507803463898:tm_map <- tm_map (tm_map, removeWords, c("work", "use", "java", "new", "support"))
1507803463901:inspect(tm_map)
1507803463912:Matrix <- TermDocumentMatrix(tm_map)
1507803463954:matrix_c <- as.matrix (Matrix)
1507803463955:freq <- sort (rowSums (matrix_c))
1507803463957:freq
1507803463981:tmdata <- data.frame (words=names(freq), freq)
1507803463983:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
1507803472547:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
1507803539325:data
1507803547254:txt_corpus <- Corpus (VectorSource (data))
1507803553278:txt_corpus <- Corpus (VectorSource (data))
1507803553279:summary(txt_corpus)
1507803553280:tm_map <- tm_map (txt_corpus, stripWhitespace)
1507803553285:tm_map <- tm_map (tm_map, removePunctuation)
1507803553289:tm_map <- tm_map (tm_map, removeNumbers)
1507803553292:tm_map <- tm_map (tm_map, removeWords, stopwords("english"))
1507803553323:stopwords('english')
1507803560268:tm_map <- tm_map (tm_map, removeWords, c("work", "use", "java", "new", "support"))
1507803560271:inspect(tm_map)
1507803560281:Matrix <- TermDocumentMatrix(tm_map)
1507803560285:matrix_c <- as.matrix (Matrix)
1507803560286:freq <- sort (rowSums (matrix_c))
1507803567443:tmdata <- data.frame (words=names(freq), freq)
1507803567445:wordcloud (tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
1507803584388:tmdata$words
1507803608831:?wordcloud
1507803629502:wordcloud(tmdata$words, tmdata$freq, max.words=100, min.freq=3, scale=c(7,.5), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
1507803634641:warnings()
1507807561689:setwd("~/MSc in Data Analytics/Data Mining/Week 5 - Oct 9 to Oct 13")
1507811317758:setwd("~/MSc in Data Analytics/Data Mining/Week 5 - Oct 9 to Oct 13")
1507811338133:load('titanic.raw.data')
1507811348440:load('titanic.raw.rdata')
1507811388364:dim(titanic.raw)
1507811395383:View(titanic.raw)
1507811413315:table(titanic.raw)
1507811434475:?table
1507811444664:table(titanic.raw)
1507811496356:require(arules)
1507811502261:install.packages('arules')
1507811512483:require(arules)
1507811551459:rules <- apriori(titanic.raw)
1507811561185:View(rules)
1507811563079:rules
1507811570642:typeof(rules)
1507811574552:?S4
1507811583202:?apriori
1507811610634:inspect(rules)
1507811628794:inspection <- inspect(rules)
1507811634764:View(inspection)
1507811688780:?inspect
1507811914261:rules <- apriori(titanic.raw,
1507811914264:parameter=list(
1507811914264:minlen=2,
1507811914264:supp=0.005,
1507811914265:conf=0.8
1507811914265:),
1507811914266:appearance=list(rhs=c(
1507811914266:"Survived=No",
1507811914267:"Survived=Yes"),
1507811914267:)
1507811931606:)
1507812027523:rules <- apriori(
1507812027524:titanic.raw,
1507812027525:parameter=list(
1507812027525:minlen=2,
1507812027526:supp=0.005,
1507812027527:conf=0.8
1507812027528:),
1507812027529:appearance = list(
1507812027530:rhs=c(
1507812027531:"Survived=No",
1507812027532:"Survived=Yes"
1507812027532:),
1507812027534:default="lhs"
1507812027534:),
1507812027535:control = list(verbose=F))
1507812031243:rules
1507812035339:inspect(rules)
1507812042361:inspection <- inspect(rules)
1507812047409:View(inspection)
1507812090117:rules.sorted <- sort(rules, by="lift")
1507821128318:baby.names <- read.csv('bnames.csv.bz2', stringsAsFactors=F)
1507821128354:david.df <- baby.names[baby.names$name=='David',]
1507821128400:require(ggplot2)
1507821128708:qplot(david.df$year, david.df$prop, geom='smooth')
1507821128756:qplot(david.df$year,
1507821128757:david.df$prop,
1507821128758:geom='smooth',
1507821128758:xlab='Year',
1507821128758:ylab='Proportion')
1507821128993:names.df <- baby.names[baby.names$name=='David' | baby.names$name=='Lucy',]
1507821128994:qplot(year,
1507821128995:prop,
1507821128995:data=names.df,
1507821128996:geom='line',
1507821128996:xlab='Year',
1507821128996:ylab='Proportion') + facet_grid(name ~ sex)
1507821128997:qplot(year,
1507821128998:prop,
1507821128999:data=david.df,
1507821128999:geom='line',
1507821129000:xlab='Year',
1507821129000:ylab='Proportion',
1507821129000:colour=sex)
1507821129001:# ==========dplyr==========
1507821129002:require(dplyr)
1507821129143:select(baby.names, c('year', 'name', 'sex'))
1507821129144:arrange(baby.names, -prop)
1507821129145:david.df <- filter(baby.names, name=='David' & sex=='boy')
1507821129146:mutate(df, twice=value*2)
1507821129147:power.df <- mutate(df, square=value**2, cube=square*value)
1507821129149:summarise(df, total=sum(value), avg=mean(value))
1507821129150:baby.percentage <- mutate(baby.names, percentage=prop*100)
1507821129150:summarise(david.df, minimum=min(prop), maximum=max(prop))
1507821140807:setwd("~/MSc in Data Analytics/Working with Data/Week 5 - Oct 9 to Oct 13")
1507821143313:baby.names <- read.csv('bnames.csv.bz2', stringsAsFactors=F)
1507821145938:david.df <- baby.names[baby.names$name=='David',]
1507821146001:require(ggplot2)
1507821146001:qplot(david.df$year, david.df$prop, geom='smooth')
1507821146704:qplot(david.df$year,
1507821146705:david.df$prop,
1507821146706:geom='smooth',
1507821146706:xlab='Year',
1507821146707:ylab='Proportion')
1507821147323:names.df <- baby.names[baby.names$name=='David' | baby.names$name=='Lucy',]
1507821147330:qplot(year,
1507821147330:prop,
1507821147331:data=names.df,
1507821147332:geom='line',
1507821147333:xlab='Year',
1507821147334:ylab='Proportion') + facet_grid(name ~ sex)
1507821148107:qplot(year,
1507821148107:prop,
1507821148109:data=david.df,
1507821148109:geom='line',
1507821148110:xlab='Year',
1507821148110:ylab='Proportion',
1507821148111:colour=sex)
1507821148556:# ==========dplyr==========
1507821148557:require(dplyr)
1507821148558:select(baby.names, c('year', 'name', 'sex'))
1507821149502:arrange(baby.names, -prop)
1507821150279:david.df <- filter(baby.names, name=='David' & sex=='boy')
1507821150289:mutate(df, twice=value*2)
1507821150291:power.df <- mutate(df, square=value**2, cube=square*value)
1507821150294:summarise(df, total=sum(value), avg=mean(value))
1507821150296:baby.percentage <- mutate(baby.names, percentage=prop*100)
1507821150302:summarise(david.df, minimum=min(prop), maximum=max(prop))
1507821193989:summarise(david.df, minimum=min(prop), maximum=max(prop))
1507821211058:View(summarise(david.df, minimum=min(prop), maximum=max(prop)))
1507821346556:arrange(baby.names, -prop)
1507821355908:arrange(baby.names, desc(prop))
1507821492987:colnames(baby.percentage)
1507821500934:head(baby.percentage)
1507821598640:?join
1507821684658:remove(baby.percentage)
1507821689929:remove(david.df)
1507821693529:remove(names.df)
1507821716074:births.df <- read.csv('births.csv')
1507821852734:name = c('John', 'Paul', 'George', 'Ringo', 'Stuart', 'Pete')
1507821883122:instrument = c('guitar', 'bass', 'guitar', 'drums', 'bass', 'drums')
1507821898957:x = data.frame(name, instrument)
1507821918095:name = c('John', 'Paul', 'George', 'Ringo', 'Brian')
1507821946742:band = c('TRUE', 'TRUE', 'TRUE', 'TRUE', 'FALSE')
1507821955977:y = data.frame(name, band)
1507822063777:View(x)
1507822066497:View(y)
1507822072462:?join
1507822092343:inner_join(x, y, by='name')
1507822111494:left_join(x, y, by='name')
1507822135015:full_join(x, y, by='name')
1507822192936:left_join(x, y, by='name')
1507822336173:left_join(x, y, by='name', suffix='N')
1507822347569:left_join(x, y, by='name', suffix=c('N'))
1507822352007:left_join(x, y, by='name', suffix=c('N', 'N'))
1507822358569:left_join(x, y, by='name')
1507822366083:?join
1507822533298:inner_join(x, y, by='name')
1507822590799:semi_join(x, y, by='name')
1507822605500:anti_join(x, y, by='name')
1507822612987:semi_join(x, y, by='name')
1507822708661:births <- births.df
1507822712409:remove(births.df)
1507822747701:births <- read.csv('births.csv')
1507822774410:colnames(baby.names)
1507822778780:colnames(births)
1507822848524:baby.names.births <- left_join(baby.names, births, by=c('year', 'sex'))
1507822852443:View(baby.names.births)
1507823129666:mutate(baby.names.births, name.births=prop*births)
1507823140261:baby.names.births <- mutate(baby.names.births, name.births=prop*births)
1507823144064:View(baby.names.births)
1507823167641:baby.names.births <- mutate(baby.names.births, name.births=floor(prop*births))
1507823169740:View(baby.names)
1507823172852:View(baby.names.births)
1507823291913:?group_by
1507823437615:summarise(baby.names.births, total=sum(name.births))
1507823448864:?summarise
1507823550076:summarise(filter(baby.names.births, name='David'), total=sum(name.births))
1507823556376:summarise(filter(baby.names.births, name=='David'), total=sum(name.births))
1507823768111:names.births <- group_by(baby.names.births, name)
1507823776455:View(names.births)
1507823813581:str(names.births)
1507823877306:summarise(names.births, total=sum(name.births))
1507823995547:names.births <- group_by(baby.names.births, c(name, sex))
1507824001842:names.births <- group_by(baby.names.births, name, sex)
1507824008339:summarise(names.births, total=sum(name.births))
1507824108248:summarise(names.births, total=sum(name.births))
1507824112401:summarise(names.births, total=sum(name.births))
1507826251299:setwd("~/MSc in Data Analytics/Working with Data/Week 4 - Oct 2 to Oct 6")
1507826260263:require(readr)
1507826267696:df <- read_tsv('isoc_ec_ibuy', na=c(':'))
1507826294264:df <- read_tsv('isoc_ec_ibuy.tsv.gz', na=c(':'))
1507826310445:df <- read_tsv('isoc_ec_ibuy', na=c(':'))
1507826431355:df <- read_tsv('isoc_ec_ibuy.tsv.gz', na=':')
1507826438041:df <- read_tsv('isoc_ec_ibuy', na=c(':'))
1507826828643:?read_csv2
1507827005113:sheet.names <- excel_sheets('stock.xlsx')
1507827011987:require(readxl)
1507827013708:sheet.names <- excel_sheets('stock.xlsx')
1507827024942:sheet.name <- sheet.names[1]
1507827029631:df <- read_excel('stock.xlsx', sheet=sheet.name)
1507827030782:df
1507827033940:View(df)
1507827053650:View(df, skip=1)
1507827060832:df <- read_excel('stock.xlsx', sheet=sheet.name, skip=1)
1507827062229:View(df)
1507934545242:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1507934629172:require(readr)
1507934685169:df <- read_delim('dublin employment trends.txt', delim=":")
1507934715226:require(readr)
1507934715227:employment.trends <- read_delim('dublin employment trends.txt', delim=":")
1507934720754:View(employment.trends)
1507934757651:require(ggplot2)
1507934805300:colnames(employment.trends) <- tolower(colnames(employment.trends))
1507934881316:qplot(x=quarteryear, y=employment, data=employment.trends)
1507934901822:qplot(x=quarteryear, y=employment, data=employment.trends, geom=line)
1507934908813:qplot(x=quarteryear, y=employment, data=employment.trends, geom=line)
1507934915905:qplot(x=quarteryear, y=employment, data=employment.trends, geom='line')
1507934960198:qplot(x=quarteryear, y=employment, data=employment.trends, geom='line') +
1507934960198:facet_grid(sector ~ .)
1507934976734:qplot(x=quarteryear, y=employment, data=employment.trends, geom='line') +
1507934976734:facet_grid(. ~ sector)
1507935046230:construction.df <- employment.trends[employment.trends$sector=='Construction']
1507935048929:construction.df <- employment.trends[employment.trends$sector=='Construction', ]
1507935051519:View(construction.df)
1507935076987:qplot(x=time, y=employment, data=employment.trends, geom='line')
1507935084863:qplot(x=time, y=employment, data=employment.trends, geom='line') +
1507935084867:facet_grid(. ~ sector)
1507935154394:qplot(x=time, y=employment, data=employment.trends, geom='line',
1507935154395:xlab='Quarterly Figures', ylab='Trend') +
1507935154396:facet_grid(. ~ sector)
1507935544906:View(construction.df)
1507935554219:employment.trends <- read_delim('dublin employment trends.txt', delim=":")
1507935554229:colnames(employment.trends) <- tolower(colnames(employment.trends))
1507935554230:qplot(x=time, y=employment, data=employment.trends, geom='line',
1507935554231:xlab='Quarterly Figures', ylab='Trend') +
1507935554232:facet_grid(. ~ sector)
1507935596265:?read_delim
1507935676327:property.trends <- read_delim("dublin property trends.txt", delim=" ")
1507935687054:View(property.trends)
1507935693777:property.trends <- read_delim("dublin property trends.txt", delim="\t")
1507935714980:property.trends <- read_tsv("dublin property trends.txt")
1507935718086:View(property.trends)
1507935743136:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1507935743144:colnames(employment.trends) <- tolower(colnames(employment.trends))
1507935743145:qplot(x=time, y=employment, data=employment.trends, geom='line',
1507935743146:xlab="Quarterly Figures", ylab="Trend") +
1507935743146:facet_grid(. ~ sector)
1507935789331:qplot(x=time, y=employment, data=employment.trends, geom='line',
1507935789332:xlab="Quarterly Figures", ylab="Trend",
1507935789332:main="Dublin Employment Trends Per Sector: 2006???2016") +
1507935789333:facet_grid(. ~ sector)
1507935819310:qplot(x=time, y=employment, data=employment.trends, geom='line',
1507935819311:xlab="Quarterly Figures", ylab="Trend",
1507935819312:main="Dublin Employment Trends Per Sector: 2006-2016") +
1507935819312:facet_grid(. ~ sector)
1507935904270:property.trends <- read_tsv("dublin property trends.txt")
1507935996018:property.trends <- read_tsv("dublin property trends.txt")
1507935996024:colnames(property.trends) <- tolower(colnames(property.trends))
1507935996025:qplot(x=time, y=trend, data=property.trends, geom='line',
1507935996025:colour=category)
1507936077265:property.trends <- read_tsv("dublin property trends.txt")
1507936077274:colnames(property.trends) <- tolower(colnames(property.trends))
1507936077274:qplot(x=time, y=trend, data=property.trends, geom="line",
1507936077275:colour=category, xlab="Trend", ylab="Time",
1507936077276:main="Dublin Property Trends: 2007 - 2016")
1507942203840:require(httr)
1507942203876:require(jsonlite)
1507942203916:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1507942203917:# Going ahead with Paris
1507942203918:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507942203918:"?contract=Dublin",
1507942203919:"&apiKey=",
1507942203919:api.key)
1507942216705:dublin.data <- GET(dublin.url)
1507942243689:dublin.data.text <- content(dublin.data, as="text")
1507942243694:dublin.data.json <- fromJSON(dublin.data.text)
1507942246154:View(dublin.data.json)
1507942264551:dublin.data.text
1507942287570:# API Key f3af0867d0ae0de6957fa29b4469667fba4e229e
1507942287571:# GET https://api.jcdecaux.com/vls/v1/stations?contract={contract_name}&
1507942287572:# apiKey={api_key}
1507942287572:require(httr)
1507942287573:require(jsonlite)
1507942287573:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1507942287574:# Going ahead with Paris
1507942287575:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1507942287576:"?contract=Dublin",
1507942287576:"&apiKey=",
1507942287576:api.key)
1507942287577:dublin.data <- GET(dublin.url)
1507942287870:dublin.data.json <- content(dublin.data, as="text")
1507942287894:dublin.data.df <- fromJSON(dublin.data.json)
1507942300219:View(dublin.data.df)
1508191953941:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1")
1508198902637:require(readr)
1508199151636:df <- read_csv('paytm_com-ecommerce_sample.csv')
1508199161021:df <- read_csv('datasets/paytm_com-ecommerce_sample.csv')
1508199172743:View(df)
1508237860101:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1")
1508237880069:require(readr)
1508237880216:books <- read_csv('datasets/paytm_com-ecommerce_sample.csv')
1508238454609:View(books)
1508238472435:str(books)
1508239674767:dbConnect
1508239678823:??dbConnect
1508239727645:library(dplyr)
1508239730908:library(purrr)
1508239734626:library(tidyr)
1508239734654:library(ggplot2)
1508239738024:library(broom)
1508239740979:library(magrittr)
1508239747424:library(plotly)
1508239756314:install.packages('plotly')
1508239764301:library(RSQLite)
1508239781042:install.packages('RSQLite')
1508239793938:library(plotly)
1508239794119:library(RSQLite)
1508239825064:library(reshape2)
1508239828363:library(visNetwork)
1508239831496:library(networkD3)
1508239842377:install.packages('visNetwork')
1508239854402:install.packages('networkD3')
1508239864271:library(visNetwork)
1508239864295:library(networkD3)
1508239864355:library(jsonlite)
1508239868341:library(RColorBrewer)
1508239870950:library(gplots)
1508239877665:library(knitr)
1508239880289:library(DT)
1508239884280:library(data.table)
1508239887747:library(d3heatmap)
1508239891329:library(viridis)
1508239903300:install.packages('d3heatmap')
1508239918208:install.packages('DT')
1508239925189:library(DT)
1508239928768:library(d3heatmap)
1508239932606:library(maps)
1508239935281:library(ggmap)
1508239937975:library(circlize)
1508239947928:install.packages('maps')
1508239953218:install.packages('ggmap')
1508239963493:install.packages('circlize')
1508239971571:library(maps)
1508239971599:library(ggmap)
1508239971808:library(circlize)
1508239977784:library(dplyr)
1508239977786:library(purrr)
1508239977786:library(tidyr)
1508239977787:library(ggplot2)
1508239977788:library(broom)
1508239977789:library(magrittr)
1508239977790:library(plotly)
1508239977791:library(RSQLite)
1508239977792:library(reshape2)
1508239977793:library(visNetwork)
1508239977794:library(networkD3)
1508239977796:library(jsonlite)
1508239977796:library(RColorBrewer)
1508239977797:library(gplots)
1508239977798:library(knitr)
1508239977799:library(DT)
1508239977800:library(data.table)
1508239977801:library(d3heatmap)
1508239977802:library(viridis)
1508239977803:library(maps)
1508239977805:library(ggmap)
1508239977807:library(circlize)
1508240003818:# Functions ---------------------------------------------------------------
1508240003820:rsplit <- function(x) {
1508240003820:x <- x[!is.na(x[,1]),,drop=FALSE]
1508240003822:if(nrow(x)==0) return(NULL)
1508240003822:if(ncol(x)==1) return(lapply(x[,1], function(v) list(name=v)))
1508240003822:s <- split(x[,-1, drop=FALSE], x[,1])
1508240003823:unname(mapply(function(v,n) {if(!is.null(v)) list(name=n, children=v) else list(name=n)}, lapply(s, rsplit), names(s), SIMPLIFY=FALSE))
1508240003823:}
1508240123584:con <- dbConnect(SQLite(), dbname="datasets/eurofootball.sqlite")
1508240132720:dbListTables(con)
1508240162773:player       <- tbl_df(dbGetQuery(con,"SELECT * FROM player"))
1508240162838:# player_stats <- tbl_df(dbGetQuery(con,"SELECT * FROM player_stats"))
1508240162839:match        <- tbl_df(dbGetQuery(con,"SELECT * FROM Match"))
1508240166204:team        <- tbl_df(dbGetQuery(con,"SELECT * FROM Team"))
1508240166206:country        <- tbl_df(dbGetQuery(con,"SELECT * FROM Country"))
1508240166208:league        <- tbl_df(dbGetQuery(con,"SELECT * FROM League"))
1508240992233:require(RSQLite)
1508241031855:connection <- dbConnect(SQLite(), dbname="datasets/baseball.sqlite")
1508246077773:dbListTables(con)
1508246080827:dbListTables(connection)
1508261600991:?`dbConnect,SQLiteConnection-method`
1508261645271:require('RMySQL')
1508261655482:install.packages('RMySQL')
1508261663710:require(RMySQL)
1508261665679:require(RMySQL)
1508261675749:?`dbConnect,MySQLConnection-method`
1508261731928:require(RSQLite)
1508261738537:require(RMySQL)
1508261891495:baseball.db <- dbConnect(MySQL(),
1508261891496:user='root',
1508261891497:password='Apple@123',
1508261891497:dbname='lahman2016')
1508261909575:dbListTables(baseball.db)
1508261968805:dbListFields(baseball.db, "Teams")
1508262086059:rs <- dbSendQuery(baseball.db, "SELECT * FROM Teams;")
1508262186707:teams <- fetch(rs, n=-1)
1508262198772:?fetch
1508262271794:teams <- fetch(rs)
1508262290532:teams <- fetch(rs, n = -1)
1508262304007:rs <- dbSendQuery(baseball.db, "SELECT * FROM Teams;")
1508262321766:baseball.db <- dbConnect(MySQL(),
1508262321767:user='root',
1508262321767:password='Apple@123',
1508262321768:dbname='lahman2016')
1508262324307:rs <- dbSendQuery(baseball.db, "SELECT * FROM Teams;")
1508262327822:teams <- fetch(rs, n = -1)
1508262335023:View(teams)
1508262428908:df <- read_csv('datasets/baseballdatabank-2017.1/core/Teams.csv')
1508263348837:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1")
1508265026599:teams <- read.csv('dataset/core/Teams')
1508265043675:teams <- read.csv('dataset/core/Teams.csv')
1508265048751:str(teams)
1508265140716:View(teams)
1508265190716:length(teams$Rank==8)
1508265211606:nrow(teams[teams$Rank==8, ])
1508265217360:nrow(teams[teams$Rank==7, ])
1508265220113:nrow(teams[teams$Rank==6, ])
1508265222596:nrow(teams[teams$Rank==5, ])
1508265225261:nrow(teams[teams$Rank==4, ])
1508265227684:nrow(teams[teams$Rank==3, ])
1508265230908:nrow(teams[teams$Rank==2, ])
1508265233096:nrow(teams[teams$Rank==1, ])
1508277875168:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1508277976486:df <- read.table('survey.dat')
1508277990741:View(df)
1508278469999:df <- read.table('Field-BDI-Non-parametric.dat')
1508278503013:require(foreign)
1508278515752:df <- read.spss('PSI-Week3.sps')
1508278560478:df <- read.table('survey.dat')
1508278564473:df <- read.table('survey.dat')
1508278574210:colnames(df) <- tolower(colnames(df))
1508278589096:knitr::opts_chunk$set(echo = TRUE)
1508278589221:library(pastecs) #For creating descriptive statistic summaries
1508278589288:library(ggplot2) #For creating histograms with more detail than plot
1508278589290:library(psych) # Some useful descriptive functions
1508278589318:library(semTools) #For skewness and kurtosis
1508278589543:library(car) # For Levene's test for homogeneity of variance
1508278596780:library(pastecs)
1508278600746:library(ggplot2)
1508278602905:library(psych) # Some useful descriptive functions
1508278605322:library(semTools) #For skewness and kurtosis
1508278607969:library(car) # For Levene's test for homogeneity of variance
1508278622303:stat.desc(df$tpcoiss, basic=F)
1508278649899:colnames(df)
1508278710330:stat.desc(df$tpcoiss, basic=F)
1508278724511:skew(survey$tpcoiss)
1508278739679:skew(df$tpcoiss)
1508278744705:skew(df$tpcoiss)
1508278753976:kurtosis(df$tpcoiss)
1508278767021:gg <- ggplot(survey, aes(x=survey$tpcoiss))
1508278775325:gg <- ggplot(df, aes(x=survey$tpcoiss))
1508278778587:gg <- gg + labs(x="Feeling of Control")
1508278783985:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1508278784067:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508278796311:qqnorm(df$tpcoiss)
1508278800492:qqline(df$tpcoiss, col=2) #show a line on theplot
1508278831437:qqplot(df$tpcoiss)
1508278844804:qqplot(y=df$tpcoiss)
1508278862254:?qqnorm
1508278876822:qqnorm(df$tpcoiss)
1508278899222:qqnorm(df$tpcoiss)
1508278904047:df$tpcoiss
1508278948134:qqnorm(c(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9))
1508278974918:qqline(c(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9))
1508278980975:qqline(c(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9), col=2)
1508278995130:stat.desc(survey$tpcoiss, basic=F)
1508279002709:stat.desc(df$tpcoiss, basic=F)
1508279012579:skew(df$tpcoiss)
1508279050607:df <- subset(df, !is.na(tpcoiss))
1508279057244:skew(df$tpcoiss)
1508279063202:qqnorm(df$tpcoiss)
1508317300054:x <- df$tpcoiss
1508317335274:?survey
1508317366804:stat.desc(x)
1508317373865:stat.desc(x, basic=F)
1508317384034:?stat.desc
1508317416131:skew(x)
1508317428236:kurtosis(x)
1508317436454:hist(x0)
1508317438838:hist(x)
1508317444343:?hist
1508317466259:qqnorm(x)
1508317493329:qqline(x, col=2)
1508317513018:skew(x)
1508317516361:kurtosis(x)
1508317844023:sort(scale(x))
1508317849962:y <- sort(scale(x))
1508317863794:skew(y)
1508317872278:kurtosis(y)
1508317888766:qqline(y, col=3)
1508317897821:qqnorm(y)
1508317906638:qqline(y, col=3)
1508318365956:qqplot(x, y=df$tpstress)
1508318435654:survey <- df
1508318440564:colnames(survey) <- tolower(colnames(survey))
1508318453885:stat.desc(survey$tpstress, basic=F)
1508318453891:skew(survey$tpstress)
1508318453895:kurtosis(survey$tpstress)
1508318453900:gs <- ggplot(survey, aes(x=survey$tpstress))
1508318453993:gs <- gs + labs(x="Perceived Stress")
1508318454063:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1508318454167:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508318454280:gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpstress, na.rm=TRUE), sd=sd(survey$tpstress, na.rm=TRUE)))
1508318459345:gs
1508318498141:scatter <- ggplot(survey, aes(survey$tpstress, survey$tpcoiss))
1508318498209:scatter + geom_point() + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1508318510765:scatter + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Total Perceived Stress", y = "Total PCOISS")
1508318528859:cor.test(survey$tpcoiss, survey$tpstress, method='pearson')
1508318540070:#Pearson Correlation
1508318540071:cor.test(survey$tpcoiss, survey$tpstress, method='pearson')
1508318540085:#Spearman Correlation
1508318540087:#Change the method to be spearman.
1508318540088:#This test will give an error since this method uses ranking but cannot handle ties
1508318540090:cor.test(survey$tpcoiss, survey$tpstress, method = "spearman")
1508318540103:#We can also use kendall's tau which does handle ties
1508318540104:cor.test(survey$tpcoiss, survey$tpstress, method = "kendall")
1508318632441:?cor.test
1508320482723:require(foreign)
1508320482725:regfile <- read.spss('regression.por')
1508320482747:df <- as.data.frame(regfile)
1508320482750:colnames(df) <- tolower(colnames(df))
1508320490226:normexam <- df$normexam
1508320490227:standlrt <- df$standlrt
1508320501141:qqplot(standlrt)
1508320505642:qqnorm(standlrt)
1508320519169:qqnorm(normexam)
1508320535344:qqline(standlrt, col=2)
1508320543601:qqline(normexam, col=2)
1508320553778:qqnorm(normexam)
1508320559447:qqline(normexam, col=2)
1508320649286:cor.test(standlrt, normexam, method="pearson")
1508422395578:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1508422449842:require(foreign)
1508422449877:regfile <- read.spss('regression.por')
1508422449896:df <- as.data.frame(regfile)
1508422449899:colnames(df) <- tolower(colnames(df))
1508422449901:normexam <- df$normexam
1508422449902:standlrt <- df$standlrt
1508422484749:stat.desc(standlrt, basic=F)
1508422523184:require(pastecs)
1508422539778:stat.desc(standlrt)
1508422545155:stat.desc(standlrt, basic=F)
1508422581302:skew(standlrt)
1508422607397:require(semTools)
1508422623000:skew(standlrt)
1508422630523:kurtosis(standlrt)
1508423924704:require(ggplot2)
1508423966544:?ggplot
1508424016895:gg <- ggplot(standlrt)
1508424079686:gg <- ggplot(data=df, mapping=aes(x=standlrt))
1508424087129:remove(standlrt)
1508424088232:gg <- ggplot(data=df, mapping=aes(x=standlrt))
1508424092371:gg <- ggplot(data=df, mapping=aes(x=standlrts))
1508424095562:gg
1508424097612:gg <- ggplot(data=df, mapping=aes(x=standlrt))
1508424098757:gg
1508424172354:x = 1
1508424174305:x += 1
1508424181432:remove(x)
1508424479753:gg <- ggplot(data=df, mapping=aes(x=standlrt))
1508424479754:gg <- gg + labs(x='standlrt')
1508424479755:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1508424479763:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508424483454:gg
1508424515231:?aes
1508428252687:require(httr)
1508428252753:require(jsonlite)
1508428252803:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1508428252804:stations.url <- paste0("https://api.jcdecaux.com/vls/v1/contracts",
1508428252805:"?apiKey=",
1508428252805:api.key)
1508428252806:stations.response <- GET(stations.url)
1508428253144:# Going ahead with Paris
1508428253144:paris.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1508428253145:"?contract=Paris",
1508428253145:"&apiKey=",
1508428253146:api.key)
1508428253146:paris.data <- GET(paris.url)
1508428253512:paris.data.text <- content(paris.data, as="text")
1508428253524:paris.data.json <- fromJSON(paris.data.text)
1508428261075:View(paris.data.json)
1508431747285:getwd()
1508431755865:require(lubridate)
1508431817475:ymd('19900531')
1508431823699:x <- ymd('19900531')
1508431827800:typeof(x)
1508431843763:is.Date(x)
1508431856514:is.Date("1990-05-31")
1508431872002:y <- ymd('1990-11-30')
1508431874564:y
1508431878342:x - y
1508431880421:y - x
1508431910312:diff = as.numeric(y-x)
1508431963480:?diff.Date
1508431991374:as.numeric(x)
1508431996912:x - 7455
1508432044197:difftime(x, y, units='days')
1508432047481:difftime(x, y, units='years')
1508432055552:difftime(x, y, units='weeks')
1508432177281:?cat
1508432184284:cat('a')
1508432187045:cat('a', 'b')
1508432193151:cat('a', 'b', sep="")
1508432248643:for (i in 1:5):
1508432251765:for (i in 1:5) {}
1508432255071:for (i in 1:5) {
1508432264184:cat(i)
1508432265287:}
1508616886508:setwd("~/MSc in Data Analytics/Data Visualisation/Assignments/Story")
1508618257411:ls()
1508618259681:ls
1508618265892:ls('.')
1508618275856:ls('t20_csv_male')
1508618282043:ls()
1508618284851:getwd()
1508618294523:require(readr)
1508618324409:df <- read_csv('t20_csv_male/1074962.csv')
1508618329187:View(df)
1508619017567:df <- read_csv('t20_csv_male/1074962.csv', skip=19)
1508621987804:View(df)
1508622314193:require(yaml)
1508622351291:yaml.load_file('ipl/392190.yaml')
1508622354952:df <- yaml.load_file('ipl/392190.yaml')
1508622356276:df
1508622367738:df <- as.data.frame(df)
1508622370544:View(df)
1508622418012:?yaml.load_file
1508622474240:yaml.load_file('ipl/392190.yaml')
1508622483640:unlink('ipl/392190.yaml')
1508622493432:yaml.load_file('ipl/392190.yaml')
1508623410651:rm('df')
1508623587882:ball.by.ball <- read_csv('ipl_csv/Ball_by_Ball.csv')
1508623611386:colnames(ball.by.ball)
1508623633198:colnames(ball.by.ball) <- tolower(colnames(ball.by.ball))
1508623648821:View(ball.by.ball)
1508623682747:matches <- read_csv('ipl_csv/Match.csv')
1508623709317:colnames(matches) <- tolower(colnames(matches))
1508623724107:View(matches)
1508623941145:require(dplyr)
1508623950090:?join
1508623993459:final <- inner_join(matches, ball.by.ball, by='match_id')
1508624206616:teams <- read_csv('ipl_csv/Team.csv')
1508624218819:colnames(teams) <- tolower(colnames(teams))
1508624418615:?join
1508624478127:View(teams)
1508624538472:View(final)
1508624710119:final <- inner_join(final, teams, by=c("final.team_batting_id"="teams.team_id"))
1508624732514:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508624736868:View(final)
1508624762836:final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508624765671:View(final)
1508624808538:?mutate
1508624882315:mutate(final, batting.team_name_batting=team_name.x)
1508624889092:View(final)
1508624916405:mutate(final, team_name_batting=team_name.x)
1508624949691:x <- mutate(final, team_name_batting=team_name.x)
1508624968773:x <- transmute(x, team_name.x)
1508624990224:View(x)
1508625050308:colnames[length(colnames)]
1508625059041:colnames(final)[length(colnames)]
1508625073145:colnames(final)[length(colnames(final))]
1508625191546:colnames(final)[which(names(final) == "team_name.x")] <- "team_name_batting"
1508625194212:View(final)
1508625237402:colnames(final)[which(colnames(final) == "team_short_code.x")] <- "team_short_code.batting"
1508625247452:View(final)
1508625266120:colnames(final)[which(colnames(final) == "team_short_code.batting")] <- "team_short_code_batting"
1508625288714:colnames(final)[which(colnames(final) == "team_short_code.y")] <- "team_short_code_bowling"
1508625301657:colnames(final)[which(colnames(final) == "team_name.y")] <- "team_short_code_batting"
1508625303690:View(final)
1508625412506:rm(x)
1508625435696:players <- read_csv('ipl_csv/Player.csv')
1508625490139:View(players)
1508625514637:colnames(players) <- tolower(colnames(players))
1508625627371:x <- inner_join(final, players, by=c("striker_id"="player_id"))
1508625634921:View(x)
1508626056632:read.csv.create.df <- function (path) {
1508626056635:df <- read_csv(path)
1508626056635:colnames(df) <- tolower(colnames(df))
1508626056636:return(df)
1508626056637:}
1508626056640:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508626056934:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508626056952:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508626056962:players <- read.csv.create.df('ipl_csv/Player.csv')
1508626062889:View(players)
1508626217228:x <- as.character(1:5)
1508626225513:x
1508626238531:for (item in x) {}
1508626245403:for (item in x) {cat item}
1508626258706:for (item in x) {
1508626258708:cat item
1508626258709:}
1508626267324:for (item in x) {
1508626267325:cat item
1508626267326:}
1508626309150:for (item in x) {
1508626309152:print item
1508626309152:}
1508626323594:for (item in x) {
1508626323595:print(item)
1508626323596:}
1508626348066:x[2]
1508626349558:x[1]
1508626589555:require(readr)
1508626589556:require(dplyr)
1508626589558:read.csv.create.df <- function (path) {
1508626589558:df <- read_csv(path)
1508626589559:colnames(df) <- tolower(colnames(df))
1508626589560:return(df)
1508626589562:}
1508626589565:rename.columns <- function (df, old.names, new.names) {
1508626589566:for (index in 1:length(old.names)) {
1508626589567:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508626589569:}
1508626589570:}
1508626589571:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508626589844:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508626589863:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508626589871:players <- read.csv.create.df('ipl_csv/Player.csv')
1508626589879:final <- inner_join(matches, ball.by.ball, by='match_id')
1508626589934:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508626590115:rename.columns(
1508626590115:c('team_name', 'team_short_code'),
1508626590118:c('team_name_batting', 'team_short_code.batting')
1508626590119:)
1508626590129:final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508626590177:rename.columns(
1508626590178:c('team_name', 'team_short_code_batting'),
1508626590180:c('team_name_batting', 'team_short_code_bowling')
1508626590181:)
1508626595564:View(final)
1508626665564:read.csv.create.df <- function (path) {
1508626665565:df <- read_csv(path)
1508626665566:colnames(df) <- tolower(colnames(df))
1508626665566:return(df)
1508626665567:}
1508626665568:rename.columns <- function (df, old.names, new.names) {
1508626665569:for (index in 1:length(old.names)) {
1508626665569:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508626665569:}
1508626665570:}
1508626665571:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508626665779:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508626665793:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508626665797:players <- read.csv.create.df('ipl_csv/Player.csv')
1508626665807:final <- inner_join(matches, ball.by.ball, by='match_id')
1508626665857:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508626665909:rename.columns(
1508626665910:old.names=c('team_name', 'team_short_code'),
1508626665911:new.names=c('team_name_batting', 'team_short_code.batting')
1508626665911:)
1508626665920:final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508626665987:rename.columns(
1508626665987:old.names=c('team_name', 'team_short_code_batting'),
1508626665988:new.names=c('team_name_batting', 'team_short_code_bowling')
1508626665989:)
1508626696735:read.csv.create.df <- function (path) {
1508626696735:df <- read_csv(path)
1508626696736:colnames(df) <- tolower(colnames(df))
1508626696737:return(df)
1508626696738:}
1508626696739:rename.columns <- function (df, old.names, new.names) {
1508626696740:for (index in 1:length(old.names)) {
1508626696740:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508626696741:}
1508626696741:}
1508626696742:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508626696961:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508626696982:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508626696990:players <- read.csv.create.df('ipl_csv/Player.csv')
1508626696999:final <- inner_join(matches, ball.by.ball, by='match_id')
1508626697048:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508626697140:rename.columns(
1508626697141:final,
1508626697143:old.names=c('team_name', 'team_short_code'),
1508626697144:new.names=c('team_name_batting', 'team_short_code.batting')
1508626697145:)
1508626697156:final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508626697206:rename.columns(
1508626697207:final,
1508626697208:old.names=c('team_name', 'team_short_code_batting'),
1508626697209:new.names=c('team_name_batting', 'team_short_code_bowling')
1508626697210:)
1508626969561:View(final)
1508627026755:View(players)
1508627032236:final <- inner_join(final, players, by=c("striker_id"="player_id"))
1508627034145:View(final)
1508627114079:colnames(players)
1508627196326:rename.columns(
1508627196327:final,
1508627196328:old.names=c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508627196329:'country'),
1508627196331:new.names=c('striker_name', 'striker_dob', 'striker_hand',
1508627196331:'striker_bowling_skill', 'striker_country')
1508627196332:)
1508627203333:View(final)
1508627235904:View(final)
1508627298428:read.csv.create.df <- function (path) {
1508627298428:df <- read_csv(path)
1508627298429:colnames(df) <- tolower(colnames(df))
1508627298429:return(df)
1508627298430:}
1508627298431:rename.columns <- function (df, old.names, new.names) {
1508627298431:for (index in 1:length(old.names)) {
1508627298432:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508627298433:}
1508627298435:return(df)
1508627298435:}
1508627298436:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508627298708:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508627298725:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508627298733:players <- read.csv.create.df('ipl_csv/Player.csv')
1508627298744:final <- inner_join(matches, ball.by.ball, by='match_id')
1508627298788:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508627298954:final <- rename.columns(
1508627298954:final,
1508627298955:old.names=c('team_name', 'team_short_code'),
1508627298956:new.names=c('team_name_batting', 'team_short_code.batting')
1508627298958:)
1508627298966:final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508627299014:final <- rename.columns(
1508627299015:final,
1508627299016:old.names=c('team_name', 'team_short_code_batting'),
1508627299016:new.names=c('team_name_batting', 'team_short_code_bowling')
1508627299018:)
1508627299019:final <- inner_join(final, players, by=c("striker_id"="player_id"))
1508627299074:final <- rename.columns(
1508627299075:final,
1508627299076:old.names=c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508627299076:'country'),
1508627299078:new.names=c('striker_name', 'striker_dob', 'striker_hand',
1508627299078:'striker_bowling_skill', 'striker_country')
1508627299079:)
1508627301244:View(final)
1508627555557:drop.columns <- function(df, unwanted.columns) {
1508627555558:df <- df[, !colnames(df) %in% unwanted.columns]
1508627555559:return(df)
1508627555560:}
1508627559737:final <- drop.columns(
1508627559738:df=final,
1508627559739:unwanted.columns=c('is_umpire', 'x8')
1508627559739:)
1508627563197:View(final)
1508627795752:strsplit("non_striker_id", "_id")
1508627800038:strsplit("non_striker_id", "_id")[1]
1508627807163:x <- strsplit("non_striker_id", "_id")
1508627809002:x[[1]]
1508627815306:y <- x[1]
1508627816787:y
1508627821485:y <- x[[1]
1508627823530:]
1508627824578:y
1508627881842:x <- as.character(1:5)
1508627901919:paste('y', x, sep="_")
1508627989154:for (colname in c("non_striker_id", "bowler_id")) {
1508627989155:final <- inner_join(final, players, by=c("striker_id"="player_id"))
1508627989156:prefix <- strsplit(colname, "_id")
1508627989156:final <- rename.columns(
1508627989159:final,
1508627989159:old.names=c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508627989160:'country'),
1508627989161:new.names=paste(prefix,
1508627989161:c('striker_name', 'striker_dob', 'striker_hand',
1508627989161:'striker_bowling_skill', 'striker_country'),
1508627989162:sep='_'
1508627989162:)
1508627989163:final <- drop.columns(
1508627989163:df=final,
1508627989164:unwanted.columns=c('is_umpire', 'x8')
1508627989166:)
1508627989168:}
1508628020175:for (colname in c("non_striker_id", "bowler_id")) {
1508628020176:final <- inner_join(final, players, by=c("striker_id"="player_id"))
1508628020177:prefix <- strsplit(colname, "_id")
1508628020178:final <- rename.columns(
1508628020179:final,
1508628020180:old.names=c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508628020181:'country'),
1508628020182:new.names=paste(prefix,
1508628020183:c('striker_name', 'striker_dob', 'striker_hand',
1508628020184:'striker_bowling_skill', 'striker_country'),
1508628020185:sep='_')
1508628020186:)
1508628020187:final <- drop.columns(
1508628020187:df=final,
1508628020189:unwanted.columns=c('is_umpire', 'x8')
1508628020189:)
1508628020190:}
1508628023585:View(final)
1508628145547:require(readr)
1508628145548:require(dplyr)
1508628145549:read.csv.create.df <- function (path) {
1508628145550:df <- read_csv(path)
1508628145551:colnames(df) <- tolower(colnames(df))
1508628145551:return(df)
1508628145552:}
1508628145554:rename.columns <- function (df, old.names, new.names) {
1508628145554:for (index in 1:length(old.names)) {
1508628145557:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508628145559:}
1508628145560:return(df)
1508628145561:}
1508628145562:drop.columns <- function(df, unwanted.columns) {
1508628145563:df <- df[, !colnames(df) %in% unwanted.columns]
1508628145564:return(df)
1508628145565:}
1508628145566:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508628145919:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508628145936:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508628145942:players <- read.csv.create.df('ipl_csv/Player.csv')
1508628145952:final <- inner_join(matches, ball.by.ball, by='match_id')
1508628145991:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508628146037:final <- rename.columns(
1508628146037:final,
1508628146039:old.names=c('team_name', 'team_short_code'),
1508628146039:new.names=c('team_name_batting', 'team_short_code.batting')
1508628146040:)
1508628146049:final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508628146101:final <- rename.columns(
1508628146102:final,
1508628146103:old.names=c('team_name', 'team_short_code_batting'),
1508628146103:new.names=c('team_name_batting', 'team_short_code_bowling')
1508628146105:)
1508628146106:for (colname in c("striker_id", "non_striker_id", "bowler_id")) {
1508628146107:final <- inner_join(final, players, by=c("striker_id"="player_id"))
1508628146107:prefix <- strsplit(colname, "_id")
1508628146108:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508628146109:'country')
1508628146110:final <- rename.columns(
1508628146110:final,
1508628146110:old.names=old.names,
1508628146111:new.names=paste(prefix, old_names, sep='_')
1508628146111:)
1508628146112:final <- drop.columns(
1508628146112:df=final,
1508628146113:unwanted.columns=c('is_umpire', 'x8')
1508628146114:)
1508628146115:}
1508628163430:require(readr)
1508628163432:require(dplyr)
1508628163433:read.csv.create.df <- function (path) {
1508628163434:df <- read_csv(path)
1508628163435:colnames(df) <- tolower(colnames(df))
1508628163435:return(df)
1508628163436:}
1508628163438:rename.columns <- function (df, old.names, new.names) {
1508628163438:for (index in 1:length(old.names)) {
1508628163439:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508628163439:}
1508628163439:return(df)
1508628163440:}
1508628163441:drop.columns <- function(df, unwanted.columns) {
1508628163441:df <- df[, !colnames(df) %in% unwanted.columns]
1508628163443:return(df)
1508628163445:}
1508628163447:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508628163794:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508628163814:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508628163819:players <- read.csv.create.df('ipl_csv/Player.csv')
1508628163833:final <- inner_join(matches, ball.by.ball, by='match_id')
1508628163877:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508628163923:final <- rename.columns(
1508628163924:final,
1508628163925:old.names=c('team_name', 'team_short_code'),
1508628163925:new.names=c('team_name_batting', 'team_short_code.batting')
1508628163926:)
1508628163935:final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508628163985:final <- rename.columns(
1508628163986:final,
1508628163986:old.names=c('team_name', 'team_short_code_batting'),
1508628163987:new.names=c('team_name_batting', 'team_short_code_bowling')
1508628163988:)
1508628163990:for (colname in c("striker_id", "non_striker_id", "bowler_id")) {
1508628163990:final <- inner_join(final, players, by=c("striker_id"="player_id"))
1508628163990:prefix <- strsplit(colname, "_id")
1508628163991:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508628163992:'country')
1508628163992:final <- rename.columns(
1508628163993:final,
1508628163993:old.names=old.names,
1508628163994:new.names=paste(prefix, old.names, sep='_')
1508628163996:)
1508628163997:final <- drop.columns(
1508628163998:df=final,
1508628163999:unwanted.columns=c('is_umpire', 'x8')
1508628164001:)
1508628164002:}
1508628167190:View(final)
1508628179428:View(ball.by.ball)
1508628241153:View(matches)
1508628547320:require(readr)
1508628547321:require(dplyr)
1508628547321:read.csv.create.df <- function (path) {
1508628547322:df <- read_csv(path)
1508628547323:colnames(df) <- tolower(colnames(df))
1508628547323:return(df)
1508628547324:}
1508628547325:rename.columns <- function (df, old.names, new.names) {
1508628547325:for (index in 1:length(old.names)) {
1508628547328:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508628547331:}
1508628547332:return(df)
1508628547333:}
1508628547335:drop.columns <- function(df, unwanted.columns) {
1508628547336:df <- df[, !colnames(df) %in% unwanted.columns]
1508628547337:return(df)
1508628547338:}
1508628547340:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508628547573:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508628547592:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508628547599:players <- read.csv.create.df('ipl_csv/Player.csv')
1508628547608:final <- inner_join(matches, ball.by.ball, by='match_id')
1508628547664:team.columns <- c("team_batting_id", "team_bowling_id", "team_name_id",
1508628547664:"opponent_team_id", "toss_winner_id", "match_winner_id")
1508628547665:for (colname in team.columns) {
1508628547666:final <- inner_join(final, teams, by=c(colname="team_id"))
1508628547667:prefix <- strsplit(colname, "_id")
1508628547667:old.names <- c('team_name', 'team_short_code')
1508628547668:final <- rename.columns(
1508628547668:final,
1508628547669:old.names=old.names,
1508628547670:new.names=paste(prefix, old.names, sep='_')
1508628547670:)
1508628547671:}
1508628547729:#final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508628547730:#final <- rename.columns(
1508628547731:#  final,
1508628547731:#  old.names=c('team_name', 'team_short_code'),
1508628547732:#  new.names=c('team_name_batting', 'team_short_code.batting')
1508628547733:#)
1508628547735:#final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508628547736:#final <- rename.columns(
1508628547737:#  final,
1508628547738:#  old.names=c('team_name', 'team_short_code_batting'),
1508628547739:#  new.names=c('team_name_batting', 'team_short_code_bowling')
1508628547739:#)
1508628547741:player.columns <- c("striker_id", "non_striker_id", "bowler_id", "fielder_id",
1508628547742:"man_of_the_match_id")
1508628547743:for (colname in player.columns) {
1508628547744:final <- inner_join(final, players, by=c(colname="player_id"))
1508628547745:prefix <- strsplit(colname, "_id")
1508628547745:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508628547746:'country')
1508628547747:final <- rename.columns(
1508628547748:final,
1508628547749:old.names=old.names,
1508628547750:new.names=paste(prefix, old.names, sep='_')
1508628547751:)
1508628547752:final <- drop.columns(
1508628547753:df=final,
1508628547753:unwanted.columns=c('is_umpire', 'x8')
1508628547754:)
1508628547754:}
1508628678862:require(readr)
1508628678863:require(dplyr)
1508628678865:read.csv.create.df <- function (path) {
1508628678865:df <- read_csv(path)
1508628678866:colnames(df) <- tolower(colnames(df))
1508628678867:return(df)
1508628678869:}
1508628678869:rename.columns <- function (df, old.names, new.names) {
1508628678870:for (index in 1:length(old.names)) {
1508628678871:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508628678872:}
1508628678874:return(df)
1508628678876:}
1508628678878:drop.columns <- function(df, unwanted.columns) {
1508628678878:df <- df[, !colnames(df) %in% unwanted.columns]
1508628678879:return(df)
1508628678880:}
1508628678881:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508628679093:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508628679130:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508628679135:players <- read.csv.create.df('ipl_csv/Player.csv')
1508628679144:final <- inner_join(matches, ball.by.ball, by='match_id')
1508628679189:team.columns <- c("team_batting_id", "team_bowling_id")
1508628679190:for (colname in team.columns) {
1508628679191:final <- inner_join(final, teams, by=c(colname="team_id"))
1508628679191:prefix <- strsplit(colname, "_id")
1508628679192:old.names <- c('team_name', 'team_short_code')
1508628679193:final <- rename.columns(
1508628679194:final,
1508628679194:old.names=old.names,
1508628679194:new.names=paste(prefix, old.names, sep='_')
1508628679195:)
1508628679195:}
1508628679203:#final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508628679204:#final <- rename.columns(
1508628679205:#  final,
1508628679206:#  old.names=c('team_name', 'team_short_code'),
1508628679207:#  new.names=c('team_name_batting', 'team_short_code.batting')
1508628679208:#)
1508628679209:#final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508628679209:#final <- rename.columns(
1508628679210:#  final,
1508628679211:#  old.names=c('team_name', 'team_short_code_batting'),
1508628679213:#  new.names=c('team_name_batting', 'team_short_code_bowling')
1508628679214:#)
1508628679215:player.columns <- c("striker_id", "non_striker_id", "bowler_id", "fielder_id",
1508628679215:"man_of_the_match_id")
1508628679217:for (colname in player.columns) {
1508628679217:final <- inner_join(final, players, by=c(colname="player_id"))
1508628679218:prefix <- strsplit(colname, "_id")
1508628679219:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508628679219:'country')
1508628679220:final <- rename.columns(
1508628679221:final,
1508628679221:old.names=old.names,
1508628679224:new.names=paste(prefix, old.names, sep='_')
1508628679225:)
1508628679226:final <- drop.columns(
1508628679228:df=final,
1508628679228:unwanted.columns=c('is_umpire', 'x8')
1508628679229:)
1508628679230:}
1508628706749:require(readr)
1508628706750:require(dplyr)
1508628706751:read.csv.create.df <- function (path) {
1508628706752:df <- read_csv(path)
1508628706753:colnames(df) <- tolower(colnames(df))
1508628706753:return(df)
1508628706755:}
1508628706757:rename.columns <- function (df, old.names, new.names) {
1508628706758:for (index in 1:length(old.names)) {
1508628706759:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508628706760:}
1508628706760:return(df)
1508628706761:}
1508628706763:drop.columns <- function(df, unwanted.columns) {
1508628706763:df <- df[, !colnames(df) %in% unwanted.columns]
1508628706764:return(df)
1508628706765:}
1508628706767:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508628706990:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508628707006:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508628707012:players <- read.csv.create.df('ipl_csv/Player.csv')
1508628707023:final <- inner_join(matches, ball.by.ball, by='match_id')
1508628713283:team.columns <- c("team_batting_id", "team_bowling_id")
1508628718112:for (colname in team.columns) {
1508628718113:final <- inner_join(final, teams, by=c(colname="team_id"))
1508628718113:prefix <- strsplit(colname, "_id")
1508628718114:old.names <- c('team_name', 'team_short_code')
1508628718115:final <- rename.columns(
1508628718116:final,
1508628718117:old.names=old.names,
1508628718118:new.names=paste(prefix, old.names, sep='_')
1508628718119:)
1508628718119:}
1508628772478:View(final)
1508628802552:View(final)
1508628827133:final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508628849491:View(final)
1508628871568:require(readr)
1508628871571:require(dplyr)
1508628871572:read.csv.create.df <- function (path) {
1508628871573:df <- read_csv(path)
1508628871573:colnames(df) <- tolower(colnames(df))
1508628871574:return(df)
1508628871575:}
1508628871576:rename.columns <- function (df, old.names, new.names) {
1508628871577:for (index in 1:length(old.names)) {
1508628871577:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508628871579:}
1508628871580:return(df)
1508628871581:}
1508628871582:drop.columns <- function(df, unwanted.columns) {
1508628871583:df <- df[, !colnames(df) %in% unwanted.columns]
1508628871584:return(df)
1508628871585:}
1508628871587:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508628871799:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508628871819:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508628871824:players <- read.csv.create.df('ipl_csv/Player.csv')
1508628883185:final <- inner_join(matches, ball.by.ball, by='match_id')
1508628892872:team.columns <- c("team_batting_id", "team_bowling_id")
1508628908107:colname <- "team_batting_id"
1508628912560:final <- inner_join(final, teams, by=c(colname="team_id"))
1508628931365:final <- inner_join(final, teams, by=c(as.character(colname)="team_id"))
1508628983265:final <- inner_join(final, teams, by=c(team_batting_id="team_id"))
1508628993917:?inner_join
1508629304475:inner_join
1508629420191:require(readr)
1508629420193:require(dplyr)
1508629420195:read.csv.create.df <- function (path) {
1508629420195:df <- read_csv(path)
1508629420197:colnames(df) <- tolower(colnames(df))
1508629420197:return(df)
1508629420198:}
1508629420200:rename.columns <- function (df, old.names, new.names) {
1508629420200:for (index in 1:length(old.names)) {
1508629420201:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508629420202:}
1508629420202:return(df)
1508629420204:}
1508629420206:drop.columns <- function(df, unwanted.columns) {
1508629420206:df <- df[, !colnames(df) %in% unwanted.columns]
1508629420208:return(df)
1508629420210:}
1508629420211:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508629420495:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508629420517:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508629420526:players <- read.csv.create.df('ipl_csv/Player.csv')
1508629420537:final <- inner_join(matches, ball.by.ball, by='match_id')
1508629420711:team.columns <- c("team_batting_id", "team_bowling_id")
1508629442977:colname <- 'team_batting_id'
1508629454707:y <- c(colname="team_id")
1508629455729:y
1508629470996:?c
1508629499170:y <- c(colname="team_id", use.names=F)
1508629500077:y
1508629538272:names(y) <- colname
1508629539671:y
1508629621975:require(readr)
1508629621976:require(dplyr)
1508629621977:read.csv.create.df <- function (path) {
1508629621978:df <- read_csv(path)
1508629621979:colnames(df) <- tolower(colnames(df))
1508629621980:return(df)
1508629621981:}
1508629621982:rename.columns <- function (df, old.names, new.names) {
1508629621983:for (index in 1:length(old.names)) {
1508629621984:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508629621985:}
1508629621989:return(df)
1508629621989:}
1508629621990:drop.columns <- function(df, unwanted.columns) {
1508629621991:df <- df[, !colnames(df) %in% unwanted.columns]
1508629621992:return(df)
1508629621992:}
1508629621993:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508629622199:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508629622214:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508629622222:players <- read.csv.create.df('ipl_csv/Player.csv')
1508629622235:final <- inner_join(matches, ball.by.ball, by='match_id')
1508629622287:team.columns <- c("team_batting_id", "team_bowling_id")
1508629622288:for (colname in team.columns) {
1508629622288:by.parameter <- c("team_id")
1508629622289:names(by.parameter) <- colname
1508629622289:final <- inner_join(final, teams, by=by.parameter)
1508629622289:prefix <- strsplit(colname, "_id")
1508629622290:old.names <- c('team_name', 'team_short_code')
1508629622290:final <- rename.columns(
1508629622290:final,
1508629622291:old.names=old.names,
1508629622291:new.names=paste(prefix, old.names, sep='_')
1508629622291:)
1508629622292:}
1508629622397:#final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508629622398:#final <- rename.columns(
1508629622399:#  final,
1508629622399:#  old.names=c('team_name', 'team_short_code'),
1508629622400:#  new.names=c('team_name_batting', 'team_short_code.batting')
1508629622401:#)
1508629622402:#final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508629622402:#final <- rename.columns(
1508629622403:#  final,
1508629622404:#  old.names=c('team_name', 'team_short_code_batting'),
1508629622404:#  new.names=c('team_name_batting', 'team_short_code_bowling')
1508629622405:#)
1508629622406:player.columns <- c("striker_id", "non_striker_id", "bowler_id", "fielder_id",
1508629622407:"man_of_the_match_id")
1508629622408:for (colname in player.columns) {
1508629622408:by.parameter <- c("player_id")
1508629622409:names(by.parameter) <- colname
1508629622410:final <- inner_join(final, players, by=by.parameter)
1508629622411:prefix <- strsplit(colname, "_id")
1508629622411:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508629622412:'country')
1508629622413:final <- rename.columns(
1508629622413:final,
1508629622414:old.names=old.names,
1508629622415:new.names=paste(prefix, old.names, sep='_')
1508629622416:)
1508629622417:final <- drop.columns(
1508629622417:df=final,
1508629622418:unwanted.columns=c('is_umpire', 'x8')
1508629622419:)
1508629622420:}
1508629624811:View(final)
1508629669145:View(ball.by.ball)
1508629707280:require(readr)
1508629707283:require(dplyr)
1508629707284:read.csv.create.df <- function (path) {
1508629707285:df <- read_csv(path)
1508629707286:colnames(df) <- tolower(colnames(df))
1508629707287:return(df)
1508629707288:}
1508629707289:rename.columns <- function (df, old.names, new.names) {
1508629707290:for (index in 1:length(old.names)) {
1508629707291:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508629707292:}
1508629707292:return(df)
1508629707293:}
1508629707294:drop.columns <- function(df, unwanted.columns) {
1508629707294:df <- df[, !colnames(df) %in% unwanted.columns]
1508629707295:return(df)
1508629707296:}
1508629707297:ball.by.ball <- read.csv.create.df('ipl_csv/Ball_by_Ball.csv')
1508629707528:matches <- read.csv.create.df('ipl_csv/Match.csv')
1508629707545:teams <- read.csv.create.df('ipl_csv/Team.csv')
1508629707552:players <- read.csv.create.df('ipl_csv/Player.csv')
1508629707561:final <- inner_join(matches, ball.by.ball, by='match_id')
1508629707607:team.columns <- c("team_batting_id", "team_bowling_id")
1508629707607:for (colname in team.columns) {
1508629707608:by.parameter <- c("team_id")
1508629707609:names(by.parameter) <- colname
1508629707612:final <- inner_join(final, teams, by=by.parameter)
1508629707613:prefix <- strsplit(colname, "_id")
1508629707613:old.names <- c('team_name', 'team_short_code')
1508629707615:final <- rename.columns(
1508629707616:final,
1508629707616:old.names=old.names,
1508629707618:new.names=paste(prefix, old.names, sep='_')
1508629707619:)
1508629707620:}
1508629707748:#final <- inner_join(final, teams, by=c("team_batting_id"="team_id"))
1508629707749:#final <- rename.columns(
1508629707750:#  final,
1508629707750:#  old.names=c('team_name', 'team_short_code'),
1508629707752:#  new.names=c('team_name_batting', 'team_short_code.batting')
1508629707752:#)
1508629707754:#final <- inner_join(final, teams, by=c("team_bowling_id"="team_id"))
1508629707754:#final <- rename.columns(
1508629707757:#  final,
1508629707758:#  old.names=c('team_name', 'team_short_code_batting'),
1508629707759:#  new.names=c('team_name_batting', 'team_short_code_bowling')
1508629707760:#)
1508629707761:player.columns <- c("striker_id", "non_striker_id", "bowler_id", "fielder_id",
1508629707762:"man_of_the_match_id")
1508629707763:for (colname in player.columns) {
1508629707764:by.parameter <- c("player_id")
1508629707764:names(by.parameter) <- colname
1508629707765:final <- left_join(final, players, by=by.parameter)
1508629707766:prefix <- strsplit(colname, "_id")
1508629707767:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508629707768:'country')
1508629707769:final <- rename.columns(
1508629707770:final,
1508629707771:old.names=old.names,
1508629707772:new.names=paste(prefix, old.names, sep='_')
1508629707772:)
1508629707773:final <- drop.columns(
1508629707773:df=final,
1508629707774:unwanted.columns=c('is_umpire', 'x8')
1508629707779:)
1508629707779:}
1508629712365:View(final)
1508630910299:require(readr)
1508630910303:require(dplyr)
1508630910305:# File to read from the CSVs downloaded from
1508630910306:# https://www.kaggle.com/harsha547/indian-premier-league-csv-dataset/data
1508630910306:# and collate it to a single csv as needed.
1508630910307:ReadCsvCreateDf <- function (path) {
1508630910308:# Reads a csv from the path using readr::read_csv, converts the column names
1508630910309:# to lower case and returns the data frame.
1508630910309:# Args:
1508630910311:#   path: Path from which to read the csv file.
1508630910311:# Returns:
1508630910312:#   The data frame with column names converted to lowercase.
1508630910313:df <- read_csv(path)
1508630910314:colnames(df) <- tolower(colnames(df))
1508630910315:return(df)
1508630910316:}
1508630910317:RenameColumns <- function (df, old.names, new.names) {
1508630910318:# Renames column names of a data frame as needed.
1508630910318:# Args:
1508630910322:#   df: The data frame to be modified.
1508630910324:#   old.names: The column names to be altered.
1508630910325:#   new.names: The new column names.
1508630910327:# Returns:
1508630910328:#   The data frame with column names modified.
1508630910328:for (index in 1:length(old.names)) {
1508630910332:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508630910333:}
1508630910334:return(df)
1508630910335:}
1508630910336:DropColumns <- function (df, unwanted.columns) {
1508630910337:# Drop columns of a data frame by names.
1508630910338:# Args:
1508630910338:#   df: The data frame to be modified.
1508630910340:#   unwanted.columns: Names of the columns to be dropped.
1508630910340:# Returns:
1508630910341:#   The data frame with unwanted columns dropped.
1508630910342:df <- df[, !colnames(df) %in% unwanted.columns]
1508630910343:return(df)
1508630910344:}
1508630910346:ball.by.ball <- ReadCsvCreateDf('ipl_csv/Ball_by_Ball.csv')
1508630910675:matches <- ReadCsvCreateDf('ipl_csv/Match.csv')
1508630910693:teams <- ReadCsvCreateDf('ipl_csv/Team.csv')
1508630910701:players <- ReadCsvCreateDf('ipl_csv/Player.csv')
1508630910712:final <- inner_join(matches, ball.by.ball, by='match_id')
1508630910760:team.columns <- c("team_batting_id", "team_bowling_id")
1508630910761:for (colname in team.columns) {
1508630910761:by.parameter <- c("team_id")
1508630910762:names(by.parameter) <- colname
1508630910762:final <- inner_join(final, teams, by=by.parameter)
1508630910762:prefix <- strsplit(colname, "_id")
1508630910763:old.names <- c('team_name', 'team_short_code')
1508630910763:final <- RenameColumns(
1508630910763:final,
1508630910764:old.names=old.names,
1508630910764:new.names=paste(prefix, old.names, sep='_')
1508630910764:)
1508630910765:}
1508630911004:player.columns <- c("striker_id", "non_striker_id", "bowler_id", "fielder_id",
1508630911005:"man_of_the_match_id")
1508630911006:for (colname in player.columns) {
1508630911006:by.parameter <- c("player_id")
1508630911007:names(by.parameter) <- colname
1508630911008:final <- left_join(final, players, by=by.parameter)
1508630911009:prefix <- strsplit(colname, "_id")
1508630911010:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508630911011:'country')
1508630911012:final <- RenameColumns(
1508630911013:final,
1508630911013:old.names=old.names,
1508630911014:new.names=paste(prefix, old.names, sep='_')
1508630911015:)
1508630911016:final <- DropColumns(
1508630911017:df=final,
1508630911018:unwanted.columns=c('is_umpire', 'x8')
1508630911019:)
1508630911020:}
1508630965147:write_csv(final, "ipl_data.csv")
1508668585860:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1")
1508668892876:??ggplot
1508668897229:?ggplot
1508668904963:require(ggplot2)
1508668907263:?ggplot
1508668920406:?stat.desc
1508668924674:require(pastecs)
1508668926166:?stat.desc
1508668952748:require(semTools)
1508668957089:?skew
1508668977481:?ggplot
1508669076714:c(1:5)
1508669083833:ggplot(data=1:5)
1508669105889:hist(1:5)
1508669131790:?hist
1508669165924:qplot(1:5)
1508669196738:?qplot
1508669238934:qplot(1:5)
1508669534549:qplot(1:5, binwidth=1)
1508669538623:qplot(1:5, binwidth=5)
1508669547371:qplot(1:5, binwidth=2)
1508669554574:qplot(1:5, bins=5)
1508669573528:qplot(1:100, bins=5)
1508669598940:qplot(1:100, binwidth=10)
1508669631250:qplot(1:100, bins=10)
1508669708494:y <- data.frame(x=1:5)
1508669710933:y
1508669804931:as.logical("")
1508669806698:as.logical(" ")
1508669808327:as.logical("s")
1508669832045:as.logical(0)
1508669833436:as.logical(1)
1508669845665:if (1) {print(1)}
1508669848943:if (0) {print(1)}
1508670113293:library(pastecs) #For creating descriptive statistic summaries
1508670113295:library(ggplot2) #For creating histograms with more detail than plot
1508670113296:library(semTools) #For skewness and kurtosis
1508670113298:InspectScaleVariable <- function (variable, label) {
1508670113298:# Basic summary stats of the variable
1508670113299:stat.desc(x=variable, basic=FALSE)
1508670113300:#skewness and kurtosis from semTools with standard error
1508670113300:skew(object=variable)
1508670113303:kurtosis(object=variable)
1508670113305:df <- as.data.frame(column=variable)
1508670113307:viz <- ggplot(data=df, mapping=aes(x=column))
1508670113308:viz <- viz + labs(x=label)
1508670113310:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508670113311:aes(y=..density.., fill=..count..))
1508670113312:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508670113313:qqnorm(variable)
1508670113314:qqline(variable, col=2)
1508670113314:}
1508670168449:require(foreign)
1508670227670:item <- read.spss('regression.por')
1508670243259:standlrt <- item$STANDLRT
1508670257624:InspectScaleVariable(standlrt)
1508670284026:?as.data.frame
1508670306388:InspectScaleVariable <- function (variable, label) {
1508670306388:# Basic summary stats of the variable
1508670306389:stat.desc(x=variable, basic=FALSE)
1508670306390:#skewness and kurtosis from semTools with standard error
1508670306390:skew(object=variable)
1508670306390:kurtosis(object=variable)
1508670306391:df <- as.data.frame(x=variable)
1508670306391:viz <- ggplot(data=df, mapping=aes(x=x))
1508670306392:viz <- viz + labs(x=label)
1508670306392:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508670306392:aes(y=..density.., fill=..count..))
1508670306393:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508670306393:qqnorm(variable)
1508670306394:qqline(variable, col=2)
1508670306395:}
1508670310883:InspectScaleVariable(standlrt)
1508670317488:InspectScaleVariable(standlrt, "standlrt")
1508670327791:InspectScaleVariable(standlrt, "standlrt")
1508670422973:InspectScaleVariable <- function (variable, label) {
1508670422974:# Basic summary stats of the variable
1508670422975:stat.desc(x=variable, basic=FALSE)
1508670422975:#skewness and kurtosis from semTools with standard error
1508670422976:skew(object=variable)
1508670422977:kurtosis(object=variable)
1508670422978:df <- as.data.frame(x=variable)
1508670422978:viz <- ggplot(data=df, mapping=aes(x=x))
1508670422979:viz <- viz + labs(x=label)
1508670422980:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508670422980:aes(y=..density.., fill=..count..))
1508670422980:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508670422981:viz <- viz + stat_function(fun=dnorm,
1508670422981:color="red",
1508670422984:args=list(mean=mean(variable, na.rm=TRUE),
1508670422986:sd=sd(variable, na.rm=TRUE)))
1508670422988:viz
1508670422989:qqnorm(variable)
1508670422990:qqline(variable, col=2)
1508670422990:}
1508670428313:InspectScaleVariable(standlrt, "standlrt")
1508670561593:knitr::opts_chunk$set(echo = TRUE)
1508670561910:#We need to load the file so that we can use it in R.
1508670561912:survey <- read.table("C:/tempR/survey.dat")
1508670571490:survey <- read.table("survey.dat")
1508670571574:#Setting the column names to be that used in the dataset
1508670571576:colnames(survey) <- tolower(colnames(survey))
1508670579856:library(pastecs) #For creating descriptive statistic summaries
1508670579857:library(ggplot2) #For creating histograms with more detail than plot
1508670579859:library(psych) # Some useful descriptive functions
1508670579946:library(semTools) #For skewness and kurtosis
1508670579948:library(car) # For Levene's test for homogeneity of variance
1508670587019:#numerical summary and histograms of variables of interest
1508670587020:#Starting with feeling of control
1508670587021:#stat.desc is a function form pastecs - make sure you include the basic switch=F to ensure you don't get scienfitic notation
1508670587023:stat.desc(survey$tpcoiss, basic=F)
1508670587031:#skewness and kurtosis from semTools with standard error
1508670587032:skew(survey$tpcoiss)
1508670587035:kurtosis(survey$tpcoiss)
1508670587042:#We will allocate the histogram to a variable to allow use to manipulate it
1508670587043:gg <- ggplot(survey, aes(x=survey$tpcoiss))
1508670587128:#Change the label of the x axis
1508670587129:gg <- gg + labs(x="Feeling of Control")
1508670587227:#manage binwidth and colours
1508670587228:gg <- gg + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1508670587302:gg <- gg + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508670591852:#Create a qqplot
1508670591853:qqnorm(survey$tpcoiss)
1508670591892:qqline(survey$tpcoiss, col=2) #show a line on theplot
1508670595927:#adding a normal curve
1508670595928:#use stat_function to compute a normalised score for each value of tpcois
1508670595929:#pass the mean and standard deviation
1508670595930:#use the na.rm parameter to say how missing values are handled
1508670595931:gg <- gg + stat_function(fun=dnorm, color="red",args=list(mean=mean(survey$tpcoiss, na.rm=TRUE), sd=sd(survey$tpcoiss, na.rm=TRUE)))
1508670596002:#to display the graph request the contents of the variable be shown
1508670596003:gg
1508670601759:ff
1508670602834:gg
1508670651696:InspectScaleVariable(survey$tpcoiss)
1508670685721:InspectScaleVariable(survey$tpcoiss, label='Feeling of Control')
1508670696517:InspectScaleVariable(variable=survey$tpcoiss, label='Feeling of Control')
1508670725768:skew(object=survey$tpcoiss)
1508670732321:skew(survey$tpcoiss)
1508670739165:?skew
1508670763832:require(semTools)
1508670767196:skew(object=survey$tpcoiss)
1508670773221:skew
1508670787788:detach("package:psych", unload=TRUE)
1508670791921:skew(object=survey$tpcoiss)
1508670800677:skew(object=survey$tpcoiss)
1508670928277:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508670960426:qq <- qqnorm(survey$tpcoiss)
1508670969643:qq
1508670978763:qq <- qqnorm(survey$tpcoiss)
1508671192575:x <- list()
1508671194469:x
1508671210806:append(x, 1)
1508671213185:append(x, 2)
1508671215961:append(x, "asd")
1508671221699:x
1508671230202:x <- append(x, 1)
1508671232522:x <- append(x, 2)
1508671234946:x <- append(x, "a")
1508671235743:x
1508671347290:InspectScaleVariable <- function (variable, label) {
1508671347291:result <- list()
1508671347292:# Basic summary stats of the variable
1508671347292:result <- append(result, stat.desc(x=variable, basic=FALSE))
1508671347293:#skewness and kurtosis from semTools with standard error
1508671347293:result <- append(result, skew(object=variable))
1508671347294:result <- append(result, kurtosis(object=variable))
1508671347295:df <- as.data.frame(x=variable)
1508671347295:viz <- ggplot(data=df, mapping=aes(x=x))
1508671347296:viz <- viz + labs(x=label)
1508671347296:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671347296:aes(y=..density.., fill=..count..))
1508671347297:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671347297:viz <- viz + stat_function(fun=dnorm,
1508671347298:color="red",
1508671347299:args=list(mean=mean(variable, na.rm=TRUE),
1508671347300:sd=sd(variable, na.rm=TRUE)))
1508671347302:result <- append(result, viz)
1508671347304:qqnorm(variable)
1508671347305:qqline(variable, col=2)
1508671347306:return(result)
1508671347307:}
1508671356061:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508671461623:TestFunction <- function () {
1508671461623:print("Testing shit")
1508671461624:}
1508671465427:TestFunction()
1508671488527:InspectScaleVariable <- function (variable, label) {
1508671488528:# Basic summary stats of the variable
1508671488529:stat.desc(x=variable, basic=FALSE)
1508671488530:#skewness and kurtosis from semTools with standard error
1508671488530:print(skew(object=variable))
1508671488530:print(kurtosis(object=variable))
1508671488531:df <- as.data.frame(x=variable)
1508671488531:viz <- ggplot(data=df, mapping=aes(x=x))
1508671488532:viz <- viz + labs(x=label)
1508671488533:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671488533:aes(y=..density.., fill=..count..))
1508671488533:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671488534:viz <- viz + stat_function(fun=dnorm,
1508671488535:color="red",
1508671488536:args=list(mean=mean(variable, na.rm=TRUE),
1508671488536:sd=sd(variable, na.rm=TRUE)))
1508671488537:print(viz)
1508671488537:qqnorm(variable)
1508671488538:qqline(variable, col=2)
1508671488540:}
1508671493228:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508671582518:variable <- survey$tpcoiss
1508671595482:label <- 'Feeling of control'
1508671607528:print(skew(object=variable))
1508671614640:print(kurtosis(object=variable))
1508671622111:df <- as.data.frame(x=variable)
1508671627046:viz <- ggplot(data=df, mapping=aes(x=x))
1508671630390:viz <- viz + labs(x=label)
1508671637245:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671649760:aes(y=..density.., fill=..count..))
1508671653749:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671660521:viz
1508671692508:viz <- ggplot(data=df, mapping=aes(x=x))
1508671692509:viz <- viz + labs(x=label)
1508671692510:viz <- viz + geom_histogram(binwidth=2, colour='black')
1508671696956:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671699663:viz
1508671733290:viz <- ggplot(survey, mapping=aes(x=tpcoiss))
1508671739674:viz <- viz + labs(x=label)
1508671739676:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671739677:aes(y=..density.., fill=..count..))
1508671739683:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671743079:viz
1508671761771:variable
1508671768182:df <- as.data.frame(x=variable)
1508671770811:View(df)
1508671791597:InspectScaleVariable <- function (variable, label) {
1508671791597:# Basic summary stats of the variable
1508671791598:stat.desc(x=variable, basic=FALSE)
1508671791599:#skewness and kurtosis from semTools with standard error
1508671791599:print(skew(object=variable))
1508671791600:print(kurtosis(object=variable))
1508671791600:df <- as.data.frame(x=variable)
1508671791600:viz <- ggplot(data=df, mapping=aes(x=variable))
1508671791602:viz <- viz + labs(x=label)
1508671791602:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671791602:aes(y=..density.., fill=..count..))
1508671791603:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671791603:viz <- viz + stat_function(fun=dnorm,
1508671791604:color="red",
1508671791606:args=list(mean=mean(variable, na.rm=TRUE),
1508671791607:sd=sd(variable, na.rm=TRUE)))
1508671791608:print(viz)
1508671791610:qqnorm(variable)
1508671791611:qqline(variable, col=2)
1508671791612:}
1508671799286:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508671813007:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508671837996:InspectScaleVariable <- function (variable, label) {
1508671837997:# Basic summary stats of the variable
1508671837998:stat.desc(x=variable, basic=FALSE)
1508671837998:#skewness and kurtosis from semTools with standard error
1508671837999:print(skew(object=variable))
1508671838000:print(kurtosis(object=variable))
1508671838001:df <- as.data.frame(x=variable)
1508671838001:viz <- ggplot(data=df, mapping=aes(x=variable))
1508671838002:viz <- viz + labs(x=label)
1508671838002:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671838003:aes(y=..density.., fill=..count..))
1508671838003:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671838004:viz <- viz + stat_function(fun=dnorm,
1508671838004:color="red",
1508671838005:args=list(mean=mean(variable, na.rm=TRUE),
1508671838006:sd=sd(variable, na.rm=TRUE)))
1508671838006:print(viz)
1508671838007:#qqnorm(variable)
1508671838007:#qqline(variable, col=2)
1508671838008:}
1508671846017:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508671869359:InspectScaleVariable <- function (variable, label) {
1508671869360:# Basic summary stats of the variable
1508671869361:stat.desc(x=variable, basic=FALSE)
1508671869362:#skewness and kurtosis from semTools with standard error
1508671869363:print(skew(object=variable))
1508671869364:print(kurtosis(object=variable))
1508671869365:df <- as.data.frame(x=variable)
1508671869366:viz <- ggplot(data=df, mapping=aes(x=variable))
1508671869367:viz <- viz + labs(x=label)
1508671869367:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671869368:aes(y=..density.., fill=..count..))
1508671869369:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671869370:viz <- viz + stat_function(fun=dnorm,
1508671869370:color="red",
1508671869371:args=list(mean=mean(variable, na.rm=TRUE),
1508671869372:sd=sd(variable, na.rm=TRUE)))
1508671869373:print(viz)
1508671869373:qqnorm(variable)
1508671869374:qqline(variable, col=2)
1508671869374:}
1508671873211:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508671892807:InspectScaleVariable <- function (variable, label) {
1508671892808:# Basic summary stats of the variable
1508671892809:stat.desc(x=variable, basic=FALSE)
1508671892810:#skewness and kurtosis from semTools with standard error
1508671892810:print(skew(object=variable))
1508671892811:print(kurtosis(object=variable))
1508671892812:df <- as.data.frame(x=variable)
1508671892812:viz <- ggplot(data=df, mapping=aes(x=variable))
1508671892813:viz <- viz + labs(x=label)
1508671892813:viz <- viz + geom_histogram(binwidth=2, colour='black',
1508671892814:aes(y=..density.., fill=..count..))
1508671892814:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1508671892815:viz <- viz + stat_function(fun=dnorm,
1508671892815:color="red",
1508671892817:args=list(mean=mean(variable, na.rm=TRUE),
1508671892817:sd=sd(variable, na.rm=TRUE)))
1508671892819:qqnorm(variable)
1508671892820:qqline(variable, col=2)
1508671892822:print(viz)
1508671892823:}
1508671898305:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508671907326:InspectScaleVariable(survey$tpcoiss, "Feeling of Control")
1508674172610:require(readr)
1508674199630:players <- read_csv('lahman2017/core/Master.csv')
1508674205633:players <- read_csv('lahman2017/core/Master.csv')
1508674220110:head(players)
1508674228225:View(head(players))
1508674609962:install.packages('Lahman')
1508674693566:View(players)
1508674709678:?data
1508674748759:data('Master')
1508674767101:data(Master)
1508674773025:require(Lahman)
1508674784213:data(Master)
1508674814513:players <- Master
1508674824444:rm(Master)
1508674839133:colnames(players)
1508674886665:str(players)
1508674899476:require(lubridate)
1508674940023:x <- players$debut
1508674973559:x
1508674991727:as.Date(x)
1508674997215:as.Date(x[0])
1508674998818:as.Date(x[1])
1508675004587:y <- as.Date(x[1])
1508675013429:is.Date(y)
1508675015536:is.Date(x[1])
1508675032799:players$debut <- as.Date(players$debut)
1508675046115:str(players)
1508675064369:rm(x)
1508675071915:debut <- players$debut
1508675106946:debut > as.Date("1980-01-01")
1508675230332:str(players)
1508676088710:batting <- Batting
1508676095553:str(batting)
1508676109555:levels(battting$lgID)
1508676117339:levels(batting$lgID)
1508676214606:batting <- subset(batting, lgId %in% c('AL', 'NL'))
1508676226601:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508676237043:batting <- Batting
1508676253912:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508676261006:levels(batting$lgID)
1508676288436:batting$lgID
1508676323212:batting.nl <- subset(batting, lgID=='AL')
1508676330485:batting.nl <- subset(batting, lgID=='NL')
1508676337969:batting.al <- subset(batting, lgID=='AL')
1508676514855:players <- Master
1508676514856:batting <- Batting
1508676514857:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508676533796:require(dplyr)
1508676561355:View(players)
1508676562192:View(batting)
1508676578610:final <- inner_join(players, batting, by=playerID)
1508676592067:final <- inner_join(players, batting, by='playerID')
1508676615945:head(final)
1508679445288:DropColumns <- function (df, unwanted.columns) {
1508679445290:# Drop columns of a data frame by names.
1508679445291:# Args:
1508679445292:#   df: The data frame to be modified.
1508679445292:#   unwanted.columns: Names of the columns to be dropped.
1508679445293:# Returns:
1508679445293:#   The data frame with unwanted columns dropped.
1508679445293:df <- df[, !colnames(df) %in% unwanted.columns]
1508679445294:return(df)
1508679445294:}
1508679476558:colnames(players)
1508679535918:players[1]
1508679545052:head(players)
1508679566210:colnames(players)
1508679699955:players <- Master
1508679699956:unwanted.columns <- c('birthYear', 'birthMonth', 'birthDay', 'birthCountry',
1508679699957:'birthState', 'deathYear', 'deathMonth', 'deathDay',
1508679699957:'deathCountry', 'deathState', 'birthCity', 'deathCity')
1508679699959:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508679707514:batting <- Batting
1508679711461:colnames(batting)
1508679718131:batting <- Batting
1508679718133:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508679722218:final <- inner_join(players, batting, by='playerID')
1508680113265:fielding <- Fielding
1508680129257:fielding <- subset(fielding, lgID %in% c('AL', 'NL'))
1508680149986:fielding.final <- inner_join(players, fielding, by='playerID')
1508680183790:bf.final <- inner_join(final, fielding.final, by='playerID')
1508680297424:fielding <- Fielding
1508680297426:fielding <- subset(fielding, lgID %in% c('AL', 'NL'))
1508680297513:fielding.final <- inner_join(players, fielding, by='playerID')
1508680297886:pitching <- Pitching
1508680297887:pitching <- subset(pitching, lgID %in% c('AL', 'NL'))
1508680297912:pitching.final <- inner_join(players, pitching, by='playerID')
1508680308954:DropColumns <- function (df, unwanted.columns) {
1508680308955:# Drop columns of a data frame by names.
1508680308955:# Args:
1508680308955:#   df: The data frame to be modified.
1508680308956:#   unwanted.columns: Names of the columns to be dropped.
1508680308956:# Returns:
1508680308956:#   The data frame with unwanted columns dropped.
1508680308957:df <- df[, !colnames(df) %in% unwanted.columns]
1508680308957:return(df)
1508680308957:}
1508680308958:players <- Master
1508680308959:unwanted.columns <- c('birthYear', 'birthMonth', 'birthDay', 'birthCountry',
1508680308960:'birthState', 'deathYear', 'deathMonth', 'deathDay',
1508680308960:'deathCountry', 'deathState', 'birthCity', 'deathCity')
1508680308960:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508680308961:batting <- Batting
1508680308961:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508680309022:batting.final <- inner_join(players, batting, by='playerID')
1508680309092:fielding <- Fielding
1508680309092:fielding <- subset(fielding, lgID %in% c('AL', 'NL'))
1508680309164:fielding.final <- inner_join(players, fielding, by='playerID')
1508680309235:pitching <- Pitching
1508680309235:pitching <- subset(pitching, lgID %in% c('AL', 'NL'))
1508680309260:pitching.final <- inner_join(players, pitching, by='playerID')
1508680344961:salaries <- Salaries
1508680349113:colnames(salaries)
1508680375599:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1508680404274:salaries.final <- inner_join(players, salaries, by='playerID')
1508680782019:View(batting.final)
1508680792221:View(pitching.final)
1508680874805:bp.final <- inner_join(batting.final, pitching.final, by=c('playerID', 'yearID', 'lgID'))
1508680893482:?join
1508680914917:bp.final <- full_join(batting.final, pitching.final, by=c('playerID', 'yearID', 'lgID'))
1508680929304:View(bp.final)
1508680990987:bp.final <- full_join(batting.final, pitching, by=c('playerID', 'yearID', 'lgID'))
1508680996852:bp.final <- full_join(batting.final, pitching.final, by=c('playerID', 'yearID', 'lgID'))
1508680998665:bp.final <- full_join(batting.final, pitching, by=c('playerID', 'yearID', 'lgID'))
1508681004563:View(bp.final)
1508681283772:players <- Master
1508681283773:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508681283773:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508681283774:'birthCity', 'deathCity')
1508681283774:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508681283775:batting <- Batting
1508681283776:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508681283832:batting.final <- inner_join(players, batting, by='playerID')
1508681283898:fielding <- Fielding
1508681283898:fielding <- subset(fielding, lgID %in% c('AL', 'NL'))
1508681283972:fielding.final <- inner_join(players, fielding, by='playerID')
1508681284051:pitching <- Pitching
1508681284051:pitching <- subset(pitching, lgID %in% c('AL', 'NL'))
1508681284075:pitching.final <- inner_join(players, pitching, by='playerID')
1508681284124:salaries <- Salaries
1508681284124:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1508681284130:salaries.final <- inner_join(players, salaries, by='playerID')
1508681308431:DropColumns <- function (df, unwanted.columns) {
1508681308432:# Drop columns of a data frame by names.
1508681308432:# Args:
1508681308433:#   df: The data frame to be modified.
1508681308433:#   unwanted.columns: Names of the columns to be dropped.
1508681308434:# Returns:
1508681308434:#   The data frame with unwanted columns dropped.
1508681308434:df <- df[, !colnames(df) %in% unwanted.columns]
1508681308435:return(df)
1508681308435:}
1508681308436:players <- Master
1508681308437:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508681308438:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508681308439:'birthCity', 'deathCity')
1508681308441:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508681308442:batting <- Batting
1508681308443:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508681308502:batting.final <- inner_join(players, batting, by='playerID')
1508681308560:# fielding <- Fielding
1508681308561:# fielding <- subset(fielding, lgID %in% c('AL', 'NL'))
1508681308562:# fielding.final <- inner_join(players, fielding, by='playerID')
1508681308562:pitching <- Pitching
1508681308563:pitching <- subset(pitching, lgID %in% c('AL', 'NL'))
1508681308589:pitching.final <- inner_join(players, pitching, by='playerID')
1508681308633:salaries <- Salaries
1508681308633:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1508681308642:salaries.final <- inner_join(players, salaries, by='playerID')
1508681466526:batting <- Batting
1508681521299:batting.stats <- battingStats
1508681528015:?battingStats
1508681558709:str(batting.stats)
1508681577663:batting.stats <- battingStats(cbind=F)
1508681579362:str(batting.stats)
1508681678454:bs <- inner_join(batting, batting.stats, by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508681688908:View(bs)
1508681790330:batting <- Batting
1508681790331:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508681793974:batting.stats <- battingStats(cbind=F)
1508681794229:batting <- inner_join(batting, batting.stats,
1508681794230:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508681810617:batting <- Batting
1508681810621:batting <- subset(batting, lgID %in% c('AL', 'NL'))
1508681814893:batting <- inner_join(batting, batting.stats,
1508681814893:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508682092144:batting <- Batting
1508682092145:batting <- subset(batting, yearID > 1900 & lgID %in% c('AL', 'NL'))
1508682105209:batting <- Batting
1508682105211:batting <- subset(batting, yearID > 1900 & lgID %in% c('AL', 'NL'))
1508682105268:batting.stats <- battingStats(cbind=F)
1508682105440:batting <- inner_join(batting, batting.stats,
1508682105440:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508682105620:final <- inner_join(players, batting, by='playerID')
1508682124381:players <- Master
1508682124382:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508682124383:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508682124383:'birthCity', 'deathCity')
1508682124384:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508682124385:batting <- Batting
1508682124385:batting <- subset(batting, yearID > 1900 & lgID %in% c('AL', 'NL'))
1508682124443:batting.stats <- battingStats(cbind=F)
1508682124613:batting <- inner_join(batting, batting.stats,
1508682124614:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508682124761:final <- inner_join(players, batting, by='playerID')
1508682152456:DropColumns <- function (df, unwanted.columns) {
1508682152457:# Drop columns of a data frame by names.
1508682152458:# Args:
1508682152458:#   df: The data frame to be modified.
1508682152458:#   unwanted.columns: Names of the columns to be dropped.
1508682152459:# Returns:
1508682152459:#   The data frame with unwanted columns dropped.
1508682152459:df <- df[, !colnames(df) %in% unwanted.columns]
1508682152460:return(df)
1508682152460:}
1508682152461:players <- Master
1508682152461:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508682152462:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508682152463:'birthCity', 'deathCity')
1508682152464:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508682152467:batting <- Batting
1508682152469:batting <- subset(batting, yearID > 1900 & lgID %in% c('AL', 'NL'))
1508682152529:batting.stats <- battingStats(cbind=F)
1508682152738:batting <- inner_join(batting, batting.stats,
1508682152738:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508682152882:final <- inner_join(players, batting, by='playerID')
1508682197211:View(final)
1508682311020:DropColumns <- function (df, unwanted.columns) {
1508682311021:# Drop columns of a data frame by names.
1508682311021:# Args:
1508682311022:#   df: The data frame to be modified.
1508682311022:#   unwanted.columns: Names of the columns to be dropped.
1508682311022:# Returns:
1508682311023:#   The data frame with unwanted columns dropped.
1508682311023:df <- df[, !colnames(df) %in% unwanted.columns]
1508682311023:return(df)
1508682311024:}
1508682311024:players <- Master
1508682311025:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508682311026:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508682311026:'birthCity', 'deathCity', 'nameGiven', 'debut',
1508682311027:'finalGame', 'retroID', 'bbrefID', 'deathDate')
1508682311028:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508682311030:batting <- Batting
1508682311032:batting <- subset(batting, yearID > 1900 & lgID %in% c('AL', 'NL'))
1508682311086:batting.stats <- battingStats(cbind=F)
1508682311254:batting <- inner_join(batting, batting.stats,
1508682311255:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508682311399:final <- inner_join(players, batting, by='playerID')
1508682442197:pitching <- Pitching
1508682983134:View(pitching)
1508691685722:require(Lahman)
1508691697654:DropColumns <- function (df, unwanted.columns) {
1508691697655:# Drop columns of a data frame by names.
1508691697656:# Args:
1508691697656:#   df: The data frame to be modified.
1508691697657:#   unwanted.columns: Names of the columns to be dropped.
1508691697657:# Returns:
1508691697657:#   The data frame with unwanted columns dropped.
1508691697658:df <- df[, !colnames(df) %in% unwanted.columns]
1508691697658:return(df)
1508691697659:}
1508691709532:players <- Master
1508691709672:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508691709672:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508691709673:'birthCity', 'deathCity', 'nameGiven', 'debut',
1508691709674:'finalGame', 'retroID', 'bbrefID', 'deathDate')
1508691709674:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508691864434:pitching <- Pitching
1508691877710:pitchingLabels
1508691923983:pitching
1508691928292:View(pitching)
1508692375472:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1")
1508692436417:require(dplyr)
1508692436684:DropColumns <- function (df, unwanted.columns) {
1508692436685:# Drop columns of a data frame by names.
1508692436686:# Args:
1508692436686:#   df: The data frame to be modified.
1508692436687:#   unwanted.columns: Names of the columns to be dropped.
1508692436687:# Returns:
1508692436687:#   The data frame with unwanted columns dropped.
1508692436688:df <- df[, !colnames(df) %in% unwanted.columns]
1508692436688:return(df)
1508692436688:}
1508692439600:require(Lahman)
1508692445068:players <- Master
1508692445070:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508692445071:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508692445072:'birthCity', 'deathCity', 'nameGiven', 'debut',
1508692445073:'finalGame', 'retroID', 'bbrefID', 'deathDate')
1508692445074:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508692455247:pitching <- Pitching
1508692460196:colnames(pitching)
1508692476035:pitchingLabels
1508692525969:colnames(pitching)
1508692669147:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1508692669147:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1508692669148:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1508692669149:'GIDP')
1508692669149:pitching <- DropColumns(df=pitching, unwanted.columns=unwanted.pitching.columns)
1508692674510:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1508692706480:head(pitching)
1508692732374:?group_by
1508692819233:group_by(pitching, 'playerID')
1508692831855:group_by(pitching, playerID)
1508693137769:aggregate(Frequency ~ playerID, pitching, sum)
1508693148406:aggregate(. ~ playerID, pitching, sum)
1508693176945:aggregate(IPouts ~ playerID, pitching, sum)
1508693491857:pitching <- DropColumns(df=pitching, unwanted.columns=unwanted.pitching.columns)
1508693491863:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1508693491879:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1508693548443:View(pitching.summary)
1508693606821:pitching.summary = subset(pitching.summary, IPouts > 1000)
1508693621079:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1508693626985:pitching.summary = subset(pitching.summary, IPouts > 1000)
1508693630673:View(pitching.summary)
1508693753203:pitchers <- inner_join(players, pitching.summary, by='playerID')
1508693753232:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPout'))
1508693773450:pitchers <- inner_join(players, pitching, by='playerID')
1508693789971:pitchers <- inner_join(players, pitching, by='playerID')
1508693805816:pitching <- DropColumns(df=pitching, unwanted.columns=unwanted.pitching.columns)
1508693805817:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1508693814816:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1508693818843:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1508693836405:pitchers <- inner_join(players, pitching.summary, by='playerID')
1508693842420:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPout'))
1508693845619:View(pitchers)
1508693864611:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1508693868456:View(pitchers)
1508693999245:pitchers <- inner_join(players, pitching, by='playerID')
1508694004437:View(pitchers)
1508694040240:pitching <- DropColumns(df=pitching, unwanted.columns=unwanted.pitching.columns)
1508694040241:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1508694040263:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1508694040302:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1508694040303:pitchers <- inner_join(players, pitching.summary, by='playerID')
1508694040308:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1508694057219:pitching <- DropColumns(df=pitching, unwanted.columns=unwanted.pitching.columns)
1508694057220:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1508694057224:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1508694057275:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1508694057276:pitchers <- inner_join(players, pitching.summary, by='playerID')
1508694057280:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1508694057282:pitchers <- inner_join(pitchers, pitching, by='playerID')
1508694266627:players <- Master
1508694266628:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508694266629:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508694266629:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1508694266629:'retroID', 'bbrefID', 'deathDate')
1508694266630:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508694302465:players <- Master
1508694302467:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508694302468:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508694302470:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1508694302471:'retroID', 'bbrefID', 'deathDate')
1508694302471:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508694326411:View(players)
1508694334426:players$debut <- as.Date(players$debut)
1508694338014:View(players)
1508694348167:str(players)
1508694372239:x <= as.Date('2017-01-01')
1508694377395:x <- as.Date('2017-01-01')
1508694384899:year(x)
1508694491381:x <- '2017-1'
1508694496526:substr(x, 1, 4)
1508694512837:players <- Master
1508694512838:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508694512839:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508694512839:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1508694512840:'retroID', 'bbrefID', 'deathDate')
1508694512840:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508694512841:players <- subset(players, as.integer(substr(debut, 1, 4)) > 1980)
1508694522025:pitching <- Pitching
1508694522027:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1508694522028:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1508694522029:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1508694522030:'GIDP')
1508694522031:pitching <- DropColumns(df=pitching, unwanted.columns=unwanted.pitching.columns)
1508694522032:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1508694522039:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1508694522084:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1508694522085:pitchers <- inner_join(players, pitching.summary, by='playerID')
1508694522090:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1508694522090:pitchers <- inner_join(pitchers, pitching, by='playerID')
1508694590849:batting <- Batting
1508694601207:colnames(batting)
1508694633767:batting <- subset(batting, yearID > 1980 & lgID %in% c('AL', 'NL'))
1508694633801:batting.stats <- battingStats(cbind=F)
1508694634218:batting <- inner_join(batting, batting.stats,
1508694634218:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508694652836:colnames(batting)
1508695292248:batting <- Batting
1508695292249:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1508695292250:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1508695292250:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1508695292251:'OPS')
1508695292251:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1508695292252:batting <- subset(batting, yearID > 1980 & lgID %in% c('AL', 'NL'))
1508695304107:batting
1508695326456:batting <- Batting
1508695369626:batting <- Batting
1508695369627:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1508695369628:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1508695369628:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1508695369628:'OPS')
1508695369629:batting <- subset(batting, yearID > 1980 & lgID %in% c('AL', 'NL'))
1508695369671:batting.stats <- battingStats(cbind=F)
1508695369950:batting <- inner_join(batting, batting.stats,
1508695369951:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508695370075:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1508695378632:colnames(batting)
1508695666047:View(batting)
1508695806524:batting <- Batting
1508695806525:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1508695806526:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1508695806526:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1508695806527:'OPS')
1508695806528:batting <- subset(batting, yearID > 1980 & lgID %in% c('AL', 'NL'))
1508695806557:batting.stats <- battingStats(cbind=F)
1508695806831:batting <- inner_join(batting, batting.stats,
1508695806831:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508695806947:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1508695817050:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1508695844447:View(batting.summary)
1508696702446:batting.summary <- subset(batting.summary, PA > 300)
1508696709588:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1508696718640:atting.summary <- subset(batting.summary, PA > 250)
1508696724148:View(atting.summary)
1508696731694:rm(atting.summary)
1508696738662:batting.summary <- subset(batting.summary, PA > 250)
1508696840000:hitters <- inner_join(players, batting.summary, by='playerID')
1508696840003:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1508696840004:hitters <- inner_join(hitters, batting, by='playerID')
1508696926313:x <- 1:5
1508696929727:y <- 6:10
1508696935649:?append
1508696948257:append(x, y)
1508696952584:x <- append(x, y)
1508696952950:x
1508696980968:playerIDs <- append(hitters$playerID, pitchers$playerID)
1508697024178:playerIDs <- append(batting.summary$playerID, pitching.summary$playerID)
1508697095003:playerIDs <- unique(append(batting.summary$playerID, pitching.summary$playerID))
1508697141817:players <- subset(players, playerIDs %in% playerIDs)
1508697164886:View(players)
1508697202791:sort(playerIDs)
1508697314078:players[players$playerID=="aardsda01", ]
1508697327727:players[players$playerID=="aasedo01", ]
1508697376147:players <- Master
1508697376148:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508697376149:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508697376149:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1508697376150:'retroID', 'bbrefID', 'deathDate')
1508697376150:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508697376151:players <- subset(players, as.integer(substr(debut, 1, 4)) > 1980)
1508697376161:# getting the data on Hitters
1508697376162:batting <- Batting
1508697376163:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1508697376164:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1508697376165:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1508697376165:'OPS')
1508697376167:batting <- subset(batting, yearID > 1980 & lgID %in% c('AL', 'NL'))
1508697376207:batting.stats <- battingStats(cbind=F)
1508697376479:batting <- inner_join(batting, batting.stats,
1508697376480:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1508697376595:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1508697376595:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1508697376773:batting.summary <- subset(batting.summary, PA > 250)
1508697376774:hitters <- inner_join(players, batting.summary, by='playerID')
1508697376777:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1508697376778:hitters <- inner_join(hitters, batting, by='playerID')
1508697376793:# getting the data on Pitchers
1508697376794:pitching <- Pitching
1508697376795:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1508697376796:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1508697376797:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1508697376797:'GIDP')
1508697376798:pitching <- DropColumns(df=pitching, unwanted.columns=unwanted.pitching.columns)
1508697376798:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1508697376808:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1508697376847:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1508697376849:pitchers <- inner_join(players, pitching.summary, by='playerID')
1508697376853:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1508697376854:pitchers <- inner_join(pitchers, pitching, by='playerID')
1508697401297:playerIDs <- sort(unique(append(batting.summary$playerID,
1508697401298:pitching.summary$playerID)))
1508697410949:View(players)
1508697464714:playerIDs <- sort(unique(append(hitters$playerID,
1508697464715:pitchers$playerID)))
1508697464717:players <- subset(players, playerIDs %in% playerIDs)
1508697478849:playerIDs
1508697513899:length(unique(players$playerID))
1508697545761:length(playerIDs)
1508697573959:xx <- sort(unique(append(hitters$playerID,
1508697573961:pitchers$playerID)))
1508697573963:players <- subset(players, playerIDs %in% xx)
1508697607488:xx <- sort(unique(append(hitters$playerID,
1508697607489:pitchers$playerID)))
1508697607492:players <- filter(players, playerIDs %in% xx)
1508697716748:players <- Master
1508697716749:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1508697716750:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1508697716750:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1508697716752:'retroID', 'bbrefID', 'deathDate')
1508697716753:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1508697716754:players <- subset(players, as.integer(substr(debut, 1, 4)) > 1980)
1508697741704:View(players)
1508697770670:playerIds <- sort(unique(append(hitters$playerID,
1508697770670:pitchers$playerID)))
1508697770673:players <- filter(players, playerID %in% playerIDs)
1508699965031:battingLabels
1508699973270:batting.stats
1508699980609:battingStats
1508699988252:?battingStats
1508700017840:View(hitters)
1508702220486:setwd("~/MSc in Data Analytics/Data Visualisation/Assignments/Story")
1508702226806:require(readr)
1508702226860:require(dplyr)
1508702232620:ReadCsvCreateDf <- function (path) {
1508702232620:# Reads a csv from the path using readr::read_csv, converts the column names
1508702232621:# to lower case and returns the data frame.
1508702232622:# Args:
1508702232622:#   path: Path from which to read the csv file.
1508702232622:# Returns:
1508702232623:#   The data frame with column names converted to lowercase.
1508702232623:df <- read_csv(path)
1508702232623:colnames(df) <- tolower(colnames(df))
1508702232624:return(df)
1508702232624:}
1508702232625:RenameColumns <- function (df, old.names, new.names) {
1508702232625:# Renames column names of a data frame as needed.
1508702232626:# Args:
1508702232627:#   df: The data frame to be modified.
1508702232628:#   old.names: The column names to be altered.
1508702232629:#   new.names: The new column names.
1508702232630:# Returns:
1508702232632:#   The data frame with column names modified.
1508702232633:for (index in 1:length(old.names)) {
1508702232633:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508702232634:}
1508702232635:return(df)
1508702232636:}
1508702232637:DropColumns <- function (df, unwanted.columns) {
1508702232638:# Drop columns of a data frame by names.
1508702232639:# Args:
1508702232640:#   df: The data frame to be modified.
1508702232640:#   unwanted.columns: Names of the columns to be dropped.
1508702232641:# Returns:
1508702232642:#   The data frame with unwanted columns dropped.
1508702232642:df <- df[, !colnames(df) %in% unwanted.columns]
1508702232643:return(df)
1508702232644:}
1508702239100:ball.by.ball <- ReadCsvCreateDf('ipl_csv/Ball_by_Ball.csv')
1508702239355:matches <- ReadCsvCreateDf('ipl_csv/Match.csv')
1508702239492:teams <- ReadCsvCreateDf('ipl_csv/Team.csv')
1508702239496:players <- ReadCsvCreateDf('ipl_csv/Player.csv')
1508702260610:ball.by.ball <- ReadCsvCreateDf('ipl_csv/Ball_by_Ball.csv')
1508702260611:matches <- ReadCsvCreateDf('ipl_csv/Match.csv')
1508702260611:teams <- ReadCsvCreateDf('ipl_csv/Team.csv')
1508702260612:players <- ReadCsvCreateDf('ipl_csv/Player.csv')
1508702266740:ReadCsvCreateDf <- function (path) {
1508702266741:# Reads a csv from the path using readr::read_csv, converts the column names
1508702266741:# to lower case and returns the data frame.
1508702266742:# Args:
1508702266742:#   path: Path from which to read the csv file.
1508702266742:# Returns:
1508702266743:#   The data frame with column names converted to lowercase.
1508702266743:df <- read_csv(path)
1508702266744:colnames(df) <- tolower(colnames(df))
1508702266744:return(df)
1508702266744:}
1508702266745:RenameColumns <- function (df, old.names, new.names) {
1508702266745:# Renames column names of a data frame as needed.
1508702266746:# Args:
1508702266747:#   df: The data frame to be modified.
1508702266747:#   old.names: The column names to be altered.
1508702266747:#   new.names: The new column names.
1508702266748:# Returns:
1508702266748:#   The data frame with column names modified.
1508702266749:for (index in 1:length(old.names)) {
1508702266749:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508702266749:}
1508702266750:return(df)
1508702266750:}
1508702266751:DropColumns <- function (df, unwanted.columns) {
1508702266751:# Drop columns of a data frame by names.
1508702266753:# Args:
1508702266754:#   df: The data frame to be modified.
1508702266755:#   unwanted.columns: Names of the columns to be dropped.
1508702266757:# Returns:
1508702266758:#   The data frame with unwanted columns dropped.
1508702266759:df <- df[, !colnames(df) %in% unwanted.columns]
1508702266759:return(df)
1508702266761:}
1508702266762:ball.by.ball <- ReadCsvCreateDf('ipl_csv/Ball_by_Ball.csv')
1508702266914:matches <- ReadCsvCreateDf('ipl_csv/Match.csv')
1508702266927:teams <- ReadCsvCreateDf('ipl_csv/Team.csv')
1508702266932:players <- ReadCsvCreateDf('ipl_csv/Player.csv')
1508702310066:final <- inner_join(matches, ball.by.ball, by='match_id')
1508702310105:team.columns <- c("team_batting_id", "team_bowling_id")
1508702310105:for (colname in team.columns) {
1508702310106:by.parameter <- c("team_id")
1508702310107:names(by.parameter) <- colname
1508702310108:final <- inner_join(final, teams, by=by.parameter)
1508702310108:prefix <- strsplit(colname, "_id")
1508702310109:old.names <- c('team_name', 'team_short_code')
1508702310109:final <- RenameColumns(
1508702310109:final,
1508702310110:old.names=old.names,
1508702310110:new.names=paste(prefix, old.names, sep='_')
1508702310111:)
1508702310113:}
1508702310228:player.columns <- c("striker_id", "non_striker_id", "bowler_id", "fielder_id",
1508702310229:"man_of_the_match_id")
1508702310230:for (colname in player.columns) {
1508702310230:by.parameter <- c("player_id")
1508702310232:names(by.parameter) <- colname
1508702310232:final <- left_join(final, players, by=by.parameter)
1508702310233:prefix <- strsplit(colname, "_id")
1508702310233:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508702310233:'country')
1508702310234:final <- RenameColumns(
1508702310234:final,
1508702310234:old.names=old.names,
1508702310235:new.names=paste(prefix, old.names, sep='_')
1508702310235:)
1508702310235:final <- DropColumns(
1508702310236:df=final,
1508702310236:unwanted.columns=c('is_umpire', 'x8')
1508702310236:)
1508702310237:}
1508702323264:colnames(final)
1508702331679:colnames(final)
1508702356780:colnames(players)
1508702370817:str(players)
1508702402200:players$bowling_skill <- as.vector(players$bowling_skill)
1508702416633:levels(players$bowling_skill)
1508702427127:players <- ReadCsvCreateDf('ipl_csv/Player.csv')
1508702434023:players$bowling_skill <- as.factor(players$bowling_skill)
1508702437239:levels(players$bowling_skill)
1508702519376:players$bowling_skill == "Left-arm fast-medium"
1508702636171:index <- players$bowling_skill == "Left-arm fast-medium"
1508702811332:levels(players$bowling_skill)
1508702841466:players$bowling_skill[index] <- "Left-arm fast"
1508702856934:index <- players$bowling_skill == "Left-arm medium-fast"
1508702864087:players$bowling_skill[index] <- "Left-arm medium"
1508702871683:index <- players$bowling_skill == "Right-arm medium-fast"
1508702876695:players$bowling_skill[index] <- "Right-arm medium"
1508702887757:index <- players$bowling_skill == "Right-arm fast-medium"
1508702894603:players$bowling_skill[index] <- "Right-arm fast"
1508702948794:index <- players$bowling_skill == "Legbreak googly"
1508702955028:players$bowling_skill[index] <- "Legbreak"
1508702995978:players$bowling_skill <- as.character(players$bowling_skill)
1508703003084:players$bowling_skill <- as.factor(players$bowling_skill)
1508703009234:levels(players$bowling_skill)
1508703067764:final[final$bowler_bowling_skill=='Right-arm bowler', ]
1508703082505:View(final[final$bowler_bowling_skill=='Right-arm bowler', ])
1508703094135:View(final[final$bowler_bowling_skill=='Right-arm fast', ])
1508703101313:View(final[final$bowler_bowling_skill=='Right-arm bowler', ])
1508703126013:players[players$bowling_skill=="Right-arm bowler",]
1508703171770:index <- players$bowling_skill == "Right-arm bowler"
1508703192015:players$bowling_skill[index] <- "Right-arm medium"
1508703196572:players$bowling_skill <- as.character(players$bowling_skill)
1508703199824:players$bowling_skill <- as.factor(players$bowling_skill)
1508703204515:levels(players$bowling_skill)
1508703224307:players[is.na(players$bowling_skill),]
1508703234208:players[!is.na(players$bowling_skill),]
1508703243609:players[is.na(players$bowling_skill),]
1508703692846:# File to read from the CSVs downloaded from
1508703692847:# https://www.kaggle.com/harsha547/indian-premier-league-csv-dataset/data
1508703692848:# and collate it to a single csv as needed.
1508703692849:require(readr)
1508703692849:require(dplyr)
1508703692851:ReadCsvCreateDf <- function (path) {
1508703692851:# Reads a csv from the path using readr::read_csv, converts the column names
1508703692852:# to lower case and returns the data frame.
1508703692853:# Args:
1508703692853:#   path: Path from which to read the csv file.
1508703692853:# Returns:
1508703692854:#   The data frame with column names converted to lowercase.
1508703692854:df <- read_csv(path)
1508703692854:colnames(df) <- tolower(colnames(df))
1508703692855:return(df)
1508703692855:}
1508703692857:RenameColumns <- function (df, old.names, new.names) {
1508703692858:# Renames column names of a data frame as needed.
1508703692860:# Args:
1508703692861:#   df: The data frame to be modified.
1508703692862:#   old.names: The column names to be altered.
1508703692862:#   new.names: The new column names.
1508703692863:# Returns:
1508703692863:#   The data frame with column names modified.
1508703692864:for (index in 1:length(old.names)) {
1508703692864:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1508703692865:}
1508703692866:return(df)
1508703692866:}
1508703692868:DropColumns <- function (df, unwanted.columns) {
1508703692868:# Drop columns of a data frame by names.
1508703692869:# Args:
1508703692870:#   df: The data frame to be modified.
1508703692870:#   unwanted.columns: Names of the columns to be dropped.
1508703692871:# Returns:
1508703692871:#   The data frame with unwanted columns dropped.
1508703692873:df <- df[, !colnames(df) %in% unwanted.columns]
1508703692875:return(df)
1508703692876:}
1508703692877:FixBowlerSkills <- function (players) {
1508703692877:# Broadens the classification of bowling types by converting fast-medium
1508703692878:# bowlers to fast bowlers and medium-fast bowlers to medium bowlers.
1508703692878:# An exception found in the dataset is Herschelle Gibbs of South Africa.
1508703692879:# His bowling type will be set to Right-arm medium which is his actual
1508703692879:# bowling style.
1508703692879:# Args:
1508703692880:#   players: The data frame of player details.
1508703692880:# Returns:
1508703692883:#   The data frame with the bowling types modified.
1508703692883:index <- players$bowling_skill == "Right-arm bowler" # Herschelle Gibbs
1508703692884:players$bowling_skill[index] <- "Right-arm medium"
1508703692884:index <- players$bowling_skill == "Right-arm fast-medium"
1508703692885:players$bowling_skill[index] <- "Right-arm fast"
1508703692885:index <- players$bowling_skill == "Right-arm medium-fast"
1508703692886:players$bowling_skill[index] <- "Right-arm medium"
1508703692887:index <- players$bowling_skill == "Left-arm fast-medium"
1508703692888:players$bowling_skill[index] <- "Left-arm fast"
1508703692889:index <- players$bowling_skill == "Left-arm medium-fast"
1508703692889:players$bowling_skill[index] <- "Left-arm medium"
1508703692890:index <- players$bowling_skill == "Legbreak googly"
1508703692890:players$bowling_skill[index] <- "Legbreak"
1508703692891:return(players)
1508703692891:}
1508703692894:ball.by.ball <- ReadCsvCreateDf('ipl_csv/Ball_by_Ball.csv')
1508703693043:matches <- ReadCsvCreateDf('ipl_csv/Match.csv')
1508703693055:teams <- ReadCsvCreateDf('ipl_csv/Team.csv')
1508703693059:players <- ReadCsvCreateDf('ipl_csv/Player.csv')
1508703693064:players <- FixBowlerSkills(players)
1508703693084:final <- inner_join(matches, ball.by.ball, by='match_id')
1508703693125:team.columns <- c("team_batting_id", "team_bowling_id")
1508703693126:for (colname in team.columns) {
1508703693126:by.parameter <- c("team_id")
1508703693127:names(by.parameter) <- colname
1508703693127:final <- inner_join(final, teams, by=by.parameter)
1508703693127:prefix <- strsplit(colname, "_id")
1508703693128:old.names <- c('team_name', 'team_short_code')
1508703693128:final <- RenameColumns(
1508703693128:final,
1508703693129:old.names=old.names,
1508703693130:new.names=paste(prefix, old.names, sep='_')
1508703693131:)
1508703693132:}
1508703693250:player.columns <- c("striker_id", "non_striker_id", "bowler_id", "fielder_id",
1508703693252:"man_of_the_match_id")
1508703693253:for (colname in player.columns) {
1508703693253:by.parameter <- c("player_id")
1508703693255:names(by.parameter) <- colname
1508703693255:final <- left_join(final, players, by=by.parameter)
1508703693255:prefix <- strsplit(colname, "_id")
1508703693256:old.names <- c('player_name', 'dob', 'batting_hand', 'bowling_skill',
1508703693256:'country')
1508703693256:final <- RenameColumns(
1508703693257:final,
1508703693257:old.names=old.names,
1508703693257:new.names=paste(prefix, old.names, sep='_')
1508703693258:)
1508703693258:final <- DropColumns(
1508703693258:df=final,
1508703693259:unwanted.columns=c('is_umpire', 'x8')
1508703693259:)
1508703693259:}
1508703693794:write_csv(final, "ipl_data2.csv")
1508703728198:colnames(players)
1508864996315:getwd()
1508865280850:purchases <- read_csv('purchases.csv')
1508865300766:sales <- read_csv('sales.csv')
1508865338726:purchases <- read_csv('purchases.csv')
1508865437917:sales <- read_csv('sales.csv')
1508866822669:colnames(purchases)
1508866828809:colnames(sales)
1508938104026:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 2 - Sep 18 to Sep 22")
1508938125893:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1508938142458:require(foreign)
1508940385575:?cbind
1508975159690:setwd("~/MSc in Data Analytics/Data Visualisation/Assignments/Story")
1508975177673:require(readr)
1508975177980:purchases <- read_csv('purchases.csv')
1508975208320:require(dplyr)
1508975237644:View(purchases)
1508975290879:purchases <- filter(purchases, purchases$`Invoice Date` > '31/07/2017')
1508975302539:purchases <- read_csv('purchases.csv')
1508975325223:purchases$`Invoice Date` <- as.Date(purchases$`Invoice Date`)
1508975328941:purchases <- filter(purchases, purchases$`Invoice Date` > '31/07/2017')
1508975333008:View(purchases)
1508975348375:purchases <- read_csv('purchases.csv')
1508975350590:purchases$`Invoice Date` <- as.Date(purchases$`Invoice Date`)
1508975360701:purchases <- filter(purchases, purchases$`Invoice Date` > as.Date('31/07/2017'))
1508975490758:purchases <- read_csv('purchases.csv')
1508975510182:purchases <- filter(purchases, purchases$`Invoice Date` != '31/07/2017')
1508975517720:purchases <- filter(purchases, purchases$`Invoice Date` != '29/07/2017')
1508975531493:purchases <- filter(purchases, purchases$`Invoice Date` != '29/07/17')
1508975540090:purchases <- filter(purchases, purchases$`Invoice Date` != '31/07/17')
1508975571497:purchases <- subset(purchases, purchases$`Invoice Date` != '31/07/17')
1508975574155:View(purchases)
1508975582046:purchases <- subset(purchases, purchases$`Invoice Date` != '31-07-17')
1508975587989:purchases <- subset(purchases, purchases$`Invoice Date` != '31-07-2017')
1508975592223:purchases <- subset(purchases, purchases$`Invoice Date` != '30-07-2017')
1508975595990:purchases <- subset(purchases, purchases$`Invoice Date` != '29-07-2017')
1508975600859:purchases <- subset(purchases, purchases$`Invoice Date` != '28-07-2017')
1508975604867:purchases <- subset(purchases, purchases$`Invoice Date` != '27-07-2017')
1508975608588:purchases <- subset(purchases, purchases$`Invoice Date` != '26-07-2017')
1508975612207:purchases <- subset(purchases, purchases$`Invoice Date` != '20-07-2017')
1508975615220:purchases <- subset(purchases, purchases$`Invoice Date` != '21-07-2017')
1508975618159:purchases <- subset(purchases, purchases$`Invoice Date` != '22-07-2017')
1508975621214:purchases <- subset(purchases, purchases$`Invoice Date` != '23-07-2017')
1508975624197:purchases <- subset(purchases, purchases$`Invoice Date` != '24-07-2017')
1508975720844:purchases <- read_csv('purchases.csv')
1508975720870:sales <- read_csv('sales.csv')
1508975724702:for (i in 20:31) {
1508975724703:target.date <- paste0(as.character(i), '-07-2017')
1508975724704:purchases <- subset(purchases, purchases$`Invoice Date` != target.date)
1508975724704:}
1508975754817:write_csv(purchases, 'purchases.csv')
1509271652923:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1509271683551:require(readr)
1509271683755:require(ggplot2)
1509271683855:# 1.a
1509271683855:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1509271683944:colnames(employment.trends) <- tolower(colnames(employment.trends))
1509271683945:qplot(x=time, y=employment, data=employment.trends, geom="line",
1509271683946:xlab="Quarterly Figures", ylab="Trend",
1509271683946:main="Dublin Employment Trends Per Sector: 2006-2016") +
1509271683946:facet_grid(. ~ sector)
1509271685525:# 1.b
1509271685526:property.trends <- read_tsv("dublin property trends.txt")
1509271686601:colnames(property.trends) <- tolower(colnames(property.trends))
1509271686602:qplot(x=time, y=trend, data=property.trends, geom="line",
1509271686603:colour=category, xlab="Trend", ylab="Time",
1509271686603:main="Dublin Property Trends: 2007 - 2016")
1509272132676:?qplot
1509272159210:qplot(x=time, y=trend, data=property.trends, geom="line",
1509272159211:colour=category, xlab="Trend", ylab="Time",
1509272159212:main="Dublin Property Trends: 2007 - 2016",las=1)
1509273050964:View(employment.trends)
1509273320238:rnorm(10)
1509273337022:rbinom(1, 100, 0.5)
1509273340576:rbinom(1, 100, 0.5)
1509273345558:rbinom(1, 100, 0.5)
1509273346297:rbinom(1, 100, 0.5)
1509273347207:rbinom(1, 100, 0.5)
1509273348479:rbinom(1, 100, 0.5)
1509273357383:rbinom(100, 1, 0.5)
1509273380008:mean(binom(100, 1, 0.5))
1509273388776:mean(rbinom(100, 1, 0.5))
1509273391287:mean(rbinom(100, 1, 0.5))
1509273393631:mean(rbinom(100, 1, 0.5))
1509273395005:mean(rbinom(100, 1, 0.5))
1509273395949:mean(rbinom(100, 1, 0.5))
1509273396805:mean(rbinom(100, 1, 0.5))
1509273398322:mean(rbinom(100, 1, 0.5))
1509273399092:mean(rbinom(100, 1, 0.5))
1509273399859:mean(rbinom(100, 1, 0.5))
1509273400899:mean(rbinom(100, 1, 0.5))
1509273430898:plot(rbinom(100, 1, 0.5))
1509273500495:x <- rbinom(100, 1, 0.5)
1509273536847:hist(x)
1509273669300:y<-seq(0,100)
1509273676380:y
1509273716318:y<-seq(0,100)
1509273716322:for(i in 1:len(y))
1509273716323:x<-rbinom(100,1,0.5)
1509273716359:y[i]<-mean(x)
1509273741676:for(i in 1:length(y)){
1509273741677:x<-rbinom(100,1,0.5)
1509273741679:y[i]<-mean(x)}
1509273764331:par(mforw=c(2,2))
1509273777262:par(mfrow=c(3,3))
1509273785202:ploty(y)
1509273792991:plot(y)
1509273815532:par(mfrow=c(2,2))
1509273816709:plot(y)
1509273831263:hist(y)
1509274004920:par(mfrow=c(2,2))
1509274004928:for(j in 1:4){
1509274004928:y<-seq(0,1000*j)
1509274004929:for(i in 1:length(y)){
1509274004930:x<-rbinom(100,1,0.5)
1509274004931:y[i]<-mean(x)
1509274004932:}
1509274004934:hist(y)
1509274004936:}
1509274038272:par(mfrow=c(2,2))
1509274038275:for(j in 1:4){
1509274038276:y<-seq(0,1000*j)
1509274038277:for(i in 1:length(y)){
1509274038278:x<-rbinom(100,1,0.5)
1509274038279:y[i]<-mean(x)
1509274038280:}
1509274038281:qqplot(y)
1509274038282:}
1509274054770:?pplot
1509274069772:?qqplot
1509274113666:for(j in 1:4){
1509274113668:y<-seq(0,1000*j)
1509274113668:for(i in 1:length(y)){
1509274113669:x<-rbinom(100,1,0.5)
1509274113670:y[i]<-mean(x)
1509274113671:}
1509274113672:qqnorm(y)
1509274113672:}
1509274300899:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1509274300905:colnames(employment.trends) <- tolower(colnames(employment.trends))
1509274300906:qplot(x=time, y=employment, data=employment.trends, geom="line",
1509274300906:xlab="Quarterly Figures", ylab="Trend",
1509274300907:main="Dublin Employment Trends Per Sector: 2006-2016") +
1509274300908:facet_grid(. ~ sector)
1509274994834:View(employment.trends)
1509299845938:require(httr)
1509299845960:require(jsonlite)
1509299845992:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1509299845993:# Going ahead with Dublin
1509299845994:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1509299845996:"?contract=Dublin",
1509299845996:"&apiKey=",
1509299845997:api.key)
1509299845998:dublin.data <- GET(dublin.url)
1509299846344:dublin.data.json <- content(dublin.data, as="text")
1509299846348:dublin.data.df <- fromJSON(dublin.data.json)
1509299869525:View(dublin.data.df)
1509300770702:sum(dublin.data.df$banking)
1509303633129:sum(dublin.data.df$status=='OPEN')
1509303637347:sum(dublin.data.df$status=='CLOSED')
1509303638903:sum(dublin.data.df$status=='OPEN')
1509307005602:require(httr)
1509307005607:require(jsonlite)
1509307005608:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1509307005609:# Going ahead with Dublin
1509307005610:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1509307005611:"?contract=Dublin",
1509307005611:"&apiKey=",
1509307005613:api.key)
1509307005614:dublin.data <- GET(dublin.url)
1509307006003:dublin.data.json <- content(dublin.data, as="text")
1509307006027:dublin.data.df <- fromJSON(dublin.data.json)
1509307006031:payment.active.count <- sum(dublin.data.df$banking)
1509307006032:open.stations.count <- sum(dublin.data.df$status=='OPEN')
1509308239002:require(httr)
1509308239004:require(jsonlite)
1509308239004:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1509308239006:# Going ahead with Dublin
1509308239007:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1509308239008:"?contract=Dublin",
1509308239009:"&apiKey=",
1509308239010:api.key)
1509308239012:dublin.data <- GET(dublin.url)
1509308245456:dublin.data.json <- content(dublin.data, as="text")
1509308245458:dublin.data.df <- fromJSON(dublin.data.json)
1509308245461:payment.active.count <- sum(dublin.data.df$banking)
1509308245462:open.stations.count <- sum(dublin.data.df$status=='OPEN')
1509308245464:View(dublin.data.df)
1509308601325:open.stations <- subset(dublin.data.df, status=='OPEN')
1509308763070:payment.active.stations <- subset(open.stations, banking==TRUE)
1509557006972:db.url <- paste0("https://data.dublinked.ie/dataset/a97edfe6-1ee2-494c-9998-",
1509557006973:"c7ab29214d59/resource/e95bd0b4-1ac3-471d-93ea-2d129c8e8dfe",
1509557006973:"/download/googletransitdublinbusp20130315-1546.zip")
1509557006974:download.file(db.url, "gtfs_dataset")
1509557035758:download.file(db.url, "gtfs_dataset.zip")
1509557074818:unzip("gtfs_dataset")
1509557135615:?unzip
1509557170660:unzip("gtfs_dataset", exdir="gtfs_dataset")
1509557183290:unzip("gtfs_dataset")
1509557204842:unzip("gtfs_dataset", exdir="gtfs")
1509579653471:library(help='base')
1509579716914:help(package='devtools')
1509579722669:?devtools
1509579728875:require(devtools)
1509579733369:?devtools
1509579738612:help(package='devtools')
1509579749507:vignette(package = 'devtools')
1509579768532:vignette('dependencies')
1509579799080:?vignette
1509579828046:vignette(package = 'devtools')
1509579840880:vignette('dependencies')
1509581415179:type(4)
1509581421596:typeof(4)
1509581423767:typeof(4L)
1509613362063:(0.5 - 0.4) == 0.1
1509613371205:all.equal(0.5 - 0.4, 0.1)
1509613562460:mixed = c(F, 'Barack', 'George', 'Bill')
1509613572237:mixed = c(T, 56, 71, 71)
1509621487458:setwd("~/MSc in Data Analytics/Data Mining/Assignments")
1509621502000:require(readr)
1509621522779:organics <- read_csv('organics/organics.csv')
1509621540990:View(organics)
1509621565530:?read_csv
1509621604422:organics <- organics[, -1]
1509627925757:View(organics)
1509627935412:fwf_sample = readr_example("fwf-sample.txt")
1509627962833:read_fwf(fwf_sample, fwf_cols(name = c(1, 10), ssn = c(31, 42)))
1509627974478:read_fwf(fwf_sample, fwf_cols(name = c(1, 13), ssn = c(31, 42)))
1509628034171:setwd("~/MSc in Data Analytics/Working with Data/Week 3 - Sep 25 to Sep 29")
1509628251560:read_fwf('Data/data.txt', skip=1, fwf_cols(price=c(1, 4), 'stock item'=c(5, 13), purchased=c(18, 18)))
1509628542862:require(readxl)
1509628573974:tbl = read_excel('Data/example.xls')
1509628579038:View(tbl)
1509628666440:tbl = read_excel('Data/example.xls', range='B1:C3')
1509629367066:tbl = read_excel('Data/example.txt', range=cell_rows(1:3))
1509629385343:tbl = read_excel('Data/example.xls', range=cell_rows(1:3))
1509629399144:tbl = read_excel('Data/example.xls', range=cell_cols(B:C))
1509629405112:tbl = read_excel('Data/example.xls', range=cell_cols('B:C'))
1509629450477:tbl = read_excel('Data/example.xls', col_types=c('skip', 'skip', 'logical'))
1509629481598:excel_sheets('Data/example.xls')
1509629537039:read_excel('Data/example.xls', sheet='missing')
1509629557029:read_excel('Data/example.xls', sheet='missing', na=c('NA', NA, '?'))
1509629612154:read_excel('Data/example.xls', sheet='missing', na=c('NA', '', '?'))
1509630044428:x <- c('a', 'a', 'b', 'c')
1509630048084:levels(x)
1509630057505:levels(factor(x))
1509630073239:x <- factor(x)
1509630075313:levels(x)
1509630817755:requrie('rvest')
1509630821829:require('rvest')
1509630828567:?read_html
1509630834149:?html_nodes
1509630882423:?html_table
1509630896178:guardian.url <- 'https://www.theguardian.com/football/premierleague/table'
1509630896179:require('rvest')
1509630896180:guardian.data <- read_html(guardian.url)
1509630896582:tbl.nodes <- html_nodes(guardian.data, 'table')
1509630896790:prem.league.table <- html_table(tbl.nodes)
1509630909773:is.list(prem.league.table)
1509630915919:is.data.frame(prem.league.table)
1509630923087:prem.league.df <- prem.league.table[[1]]
1509630925292:View(prem.league.df)
1509633175361:require(r2excel)
1509633192530:install.packages('r2excel')
1509633517140:require(xlsx)
1509633525573:require(WriteXLS)
1509633828273:rm(list=ls())
1509633845844:setwd("~/MSc in Data Analytics/Working with Data/Week 4 - Oct 2 to Oct 6")
1509633961737:mpg
1509633976385:library ( ??? ggplot2 ??? )
1509633980502:library (ggplot2)
1509633982337:mpg
1509634000359:?qplot
1509634025402:qplot(mpg$displ, mpg$hwy)
1509634090882:qplot(mpg$displ, mpg$hwy, colour=mpg$class)
1509634185908:?I
1509634318219:qplot(x = displ, y = hwy, data = mpg, size = I(0.25))
1509634324620:qplot(x = displ, y = hwy, data = mpg, size = I(0.5))
1509634335131:qplot(x = displ, y = hwy, data = mpg, alpha = I(0.1))
1509634339137:qplot(x = displ, y = hwy, data = mpg, alpha = I(0.5))
1509634348256:qplot(x = displ, y = hwy, data = mpg, size = I(0.5))
1509634355695:qplot(x = displ, y = hwy, data = mpg, shape = I(4))
1509634359128:qplot(x = displ, y = hwy, data = mpg, shape = I(3))
1509634369345:qplot(x = displ, y = hwy, data = mpg, colour = I('red'))
1509634374210:qplot(x = displ, y = hwy, data = mpg, colour = 'red'
1509634375818:)
1509634379592:qplot(x = displ, y = hwy, data = mpg, colour = I('red'))
1509634384122:qplot(x = displ, y = hwy, data = mpg, colour = 'red')
1509634387140:qplot(x = displ, y = hwy, data = mpg, colour = I('red'))
1509634420676:qplot(x = displ , y = hwy, data = mpg) + facet_grid(rows ~ cols)
1509634430781:qplot(x = displ , y = hwy, data = mpg) + facet_grid(class ~ .)
1509634443737:qplot(x = displ , y = hwy, data = mpg) + facet_wrap(class ~ .)
1509634456161:qplot(x = displ , y = hwy, data = mpg) + facet_grid(. ~ class)
1509634541552:qplot(x = displ , y = hwy, data = mpg) + facet_grid(drv ~ class)
1509634574907:qplot(x = displ , y = hwy, data = mpg) + facet_grid( ~ class)
1509634587940:qplot(x = displ , y = hwy, data = mpg) + facet_wrap( ~ class)
1509634626109:=qplot(x = displ, y = hwy, data = mpg, geom = ???point???)
1509634631284:qplot(x = displ, y = hwy, data = mpg, geom = ???point???)
1509634635981:qplot(x = displ, y = hwy, data = mpg, geom = 'point')
1509634643020:qplot(x = displ, y = hwy, data = mpg, geom = 'smooth')
1509634657454:qplot(x = displ, y = hwy, data = mpg, geom = c('point', 'smooth'))
1509634680153:qplot(x = class, y = hwy, data = mpg, geom = ???point???)
1509634690136:qplot(x = class, y = hwy, data = mpg, geom = 'point')
1509634694628:qplot(x = class, y = hwy, data = mpg, geom = 'boxplot')
1509634760220:qplot(reorder(class, hwy), y = hwy, data = mpg, geom = 'boxplot')
1509634883370:?reorder
1509634909751:qplot(reorder(class, hwy, median), y = hwy, data = mpg, geom = 'boxplot')
1509634923188:qplot(reorder(class, hwy), y = hwy, data = mpg, geom = 'boxplot')
1509634973797:diamonds
1509634983224:qplot(x, z, data = diamonds)
1509634999222:qplot(x, data = diamonds)
1509635007760:qplot(cut , data = diamonds)
1509635028836:qplot(cut , data = diamonds, colour = cut)
1509635037263:qplot(cut , data = diamonds, fill = cut)
1509635059057:qplot ( carat , data = diamonds )
1509635076328:qplot ( carat , data = diamonds, binwidth=1)
1509635228555:?options
1509635252025:?unzip
1509635268480:?options
1509635314134:setwd("~/MSc in Data Analytics/Working with Data/Week 5 - Oct 9 to Oct 13")
1509635336506:rm(list=ls())
1509635343927:baby.names <- read.csv('bnames.csv.bz2', stringsAsFactors=F)
1509635346465:david.df <- baby.names[baby.names$name=='David',]
1509635346486:require(ggplot2)
1509635353113:qplot(david.df$year, david.df$prop, geom='smooth')
1509635493269:names.df <- baby.names[baby.names$name=='David' | baby.names$name=='Lucy',]
1509635493277:qplot(year,
1509635493278:prop,
1509635493278:data=names.df,
1509635493279:geom='line',
1509635493279:xlab='Year',
1509635493282:ylab='Proportion') + facet_grid(name ~ sex)
1509635576908:1:5
1509635578711:1:5, 6
1509635595795:View(baby.names)
1509635606567:require(dplyr)
1509635641282:filter(baby.names, sex=='boy' & year==2000)
1509635690783:filter(baby.names, sex=='boy' & year==2000)
1509635712899:select(baby.names, c('year', 'name', 'sex'))
1509635794410:colours = c('blue', 'blue', 'black', 'blue', 'black')
1509635807817:value = 1:5
1509635811434:colour = colours
1509635826050:df <- data.frame(colours, value)
1509635830532:df <- data.frame(colour, value)
1509635849117:arrange(df, colour)
1509635870896:arrange(df, desc(colour))
1509635891089:arrange(df, c(desc(colour), desc(value))
1509635893346:)
1509635900425:arrange(df, c(desc(colour), desc(value)))
1509635917260:arrange(df, desc(colour), desc(value))
1509635926798:arrange(df, desc(colour), value)
1509635963223:arrange(baby.names, -prop)
1509636165264:summarise(df, total=sum(value))
1509636174585:summarise(df, total=sum(colour))
1509636178522:summarise(df, total=sum(value))
1509636200494:summarise(df, total=sum(value), avg=mean(value))
1509636237235:summarise(baby.names, min=min(prop), max=max(prop))
1509636319699:births <- read_csv('births.csv')
1509636431588:baby.births <- inner_join(baby.names, births, by=year)
1509636436071:baby.births <- inner_join(baby.names, births, by="year")
1509636456646:baby.births <- inner_join(baby.names, births, by=c("year", "sex"))
1509636475524:baby.births <- mutate(namesBirths , total = prop * births )
1509636484342:baby.births <- mutate(baby.births , total = prop * births )
1509636491319:baby.births <- mutate(baby.births , total = prop * births)
1509636501788:head(baby.births)
1509636619736:baby.births <- group_by(baby.births, name)
1509636624771:head(baby.births)
1509636673338:summarise(baby.births, total=sum(total))
1509636677525:summarise(baby.births, total=sum(total))
1509636678967:summarise(baby.births, total=sum(total))
1509636680039:summarise(baby.births, total=sum(total))
1509636740495:baby.births <- group_by(baby.births, c(name, sex))
1509636754937:baby.births <- group_by(baby.births, name, sex)
1509636818176:baby.births
1509636821286:baby.births
1509636834681:baby.births
1509636926449:level1 <- summarise(baby.births, s1=sum(total))
1509636932115:level1
1509636938906:baby.births
1509636941805:level1
1509636962052:level2 <- summarise(level1, s2=sum(s1))
1509636973100:level2
1509636983799:level1
1509637035958:baby.births
1509637064070:ungroup(baby.births)
1509637137769:rm(list=ls())
1509637145292:setwd("~/MSc in Data Analytics/Working with Data/Week 6 - Oct 16 to Oct 20")
1509637185384:length('Jayadeep')
1509637191182:nchar('Jayadeep')
1509637209112:Jayadeep
1509637211761:"Jayadeep"
1509637218299:as.character(NA)
1509637225227:is.character(as.character(NA))
1509637235219:typeof(as.character(NA))
1509637344302:category = c(???Title???, ???Name???, ???Surname???)
1509637344303:lecturer = c( title , name, surname)
1509637366135:category = c('Title', 'Name', 'Surname')
1509637366138:lecturer = c( title , name, surname)
1509637396229:category = c('Title', 'Name', 'Surname')
1509637396230:lecturer = c( 'Dr.' , 'David', 'Leonard')
1509637406765:paste(category , lecturer , sep = ??? = ???)
1509637411994:paste(category , lecturer , sep = '=')
1509637434975:paste(category , lecturer , sep = '=', collapse=',')
1509637502807:?cat
1509637566782:cat ( category , lecturer )
1509637647567:require(stringr)
1509637653174:str_detect()
1509637659997:str_detect('aaaaabsbsb', 'bs')
1509637661335:str_detect('aaaaabsbsb', 'bss')
1509637663550:str_detect('aaaaabsbsb', 'bsb')
1509637675850:str_locate('aaaaabsbsb', 'bsb')
1509637678096:str_locate('aaaaabsbsb', 'bsbss')
1509637680189:str_locate('aaaaabsbsb', 'bsbs')
1509637684420:str_locate('aaaaabsbsb', 'bs')
1509637732625:str_replace (name, ??? id ??? , ???e ??? )
1509637738480:name = 'David'
1509637747834:str_replace (name, 'id', 'e')
1509637751649:name
1509637780627:substr(name, 1, 3)
1509637789080:str_sub(name, 1, 3)
1509637975306:require(lubridate)
1509637988397:as.Date('31-05-90')
1509637992082:as.Date('31-05-1990')
1509731260835:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1")
1509731966276:# File to prepare the dataset into the required format for the rest of the
1509731966281:# analysis.
1509731966282:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509731966283:#
1509731966283:# This analysis looks to answer whether MLB players earn the most when they are
1509731966285:# performing at their respective peaks.
1509731966285:#
1509731966286:# The challenges involved are identifying at what age range the peak of MLB
1509731966287:# players fall, identifying whether there is a difference in the peak age range
1509731966288:# of hitters and that of pitchers.
1509731966289:#
1509731966290:# The analysis then tries to understand the relationship of salary with time.
1509731966291:# The salaries over the time are compared to identify if there is
1509731966292:# statistical evidence for a difference in the mean salaries over the decades.
1509731966292:#
1509731966293:# The analysis tries to study how the mean salaries for hitters and pitchers
1509731966293:# compare and if there is any difference between the salaries of the two
1509731966294:# groups.
1509731966296:#
1509731966298:# The study considers players who have played their entire career after
1509731966299:# 1980. One of the statistic most commonly used to judge the quality of a
1509731966300:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509731966301:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509731966302:# who has at least one 1000 outs pitched over their entire career has been
1509731966302:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509731966303:# to gauge the quality of a pitcher.
1509731966304:require(Lahman)
1509731966328:require(dplyr)
1509731966759:DropColumns <- function (df, unwanted.columns) {
1509731966759:# Drop columns of a data frame by names.
1509731966760:# Args:
1509731966761:#   df: The data frame to be modified.
1509731966761:#   unwanted.columns: Names of the columns to be dropped.
1509731966761:# Returns:
1509731966762:#   The data frame with unwanted columns dropped.
1509731966762:df <- df[, !colnames(df) %in% unwanted.columns]
1509731966762:return(df)
1509731966763:}
1509731966763:# getting the data on players who made their debut after 1980
1509731966764:players <- Master
1509731966894:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509731966894:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509731966895:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509731966895:'retroID', 'bbrefID', 'deathDate')
1509731966896:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509731966897:players <- subset(players, as.integer(substr(debut, 1, 4)) > 1980)
1509731966934:# getting the data on Hitters
1509731966935:# a) 250+ PA per season over the career
1509731966936:# b) seasons after 1980
1509731966938:batting <- Batting
1509731967190:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509731967190:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509731967191:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509731967192:'OPS')
1509731967192:batting <- subset(batting, yearID > 1980 & lgID %in% c('AL', 'NL'))
1509731967227:batting.stats <- battingStats(cbind=F)
1509731967681:batting <- inner_join(batting, batting.stats,
1509731967681:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509731967823:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509731967826:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509731967945:batting.summary <- subset(batting.summary, PA > 250)
1509731967946:hitters <- inner_join(players, batting.summary, by='playerID')
1509731967966:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509731967967:hitters <- inner_join(hitters, batting, by='playerID')
1509731967991:# getting the data on Pitchers
1509731967991:# a) 1000+ outs pitched over the career
1509731967992:# b) seasons after 1980
1509731967992:pitching <- Pitching
1509731968059:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509731968060:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509731968061:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509731968062:'GIDP')
1509731968062:pitching <- DropColumns(df=pitching,
1509731968063:unwanted.columns=unwanted.pitching.columns)
1509731968064:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1980)
1509731968080:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509731968120:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509731968121:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509731968124:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509731968124:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509731968134:# Limiting the players considered to only those who feature in the top pitchers
1509731968135:# or top hitters.
1509731968136:playerIds <- sort(unique(append(hitters$playerID,
1509731968137:pitchers$playerID)))
1509731968140:players <- filter(players, playerID %in% playerIDs)
1509731968186:salaries <- Salaries
1509731968204:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1509731968210:salaries.final <- inner_join(players, salaries, by='playerID')
1509732007339:str(Batting)
1509732018454:?Batting
1509754629484:# File to prepare the dataset into the required format for the rest of the
1509754629486:# analysis.
1509754629486:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509754629487:#
1509754629488:# This analysis looks to answer whether MLB players earn the most when they are
1509754629489:# performing at their respective peaks.
1509754629490:#
1509754629490:# The challenges involved are identifying at what age range the peak of MLB
1509754629491:# players fall, identifying whether there is a difference in the peak age range
1509754629492:# of hitters and that of pitchers.
1509754629493:#
1509754629494:# The analysis then tries to understand the relationship of salary with time.
1509754629494:# The salaries over the time are compared to identify if there is
1509754629496:# statistical evidence for a difference in the mean salaries over the decades.
1509754629496:#
1509754629497:# The analysis tries to study how the mean salaries for hitters and pitchers
1509754629498:# compare and if there is any difference between the salaries of the two
1509754629498:# groups.
1509754629499:#
1509754629499:# The study considers players who have played their entire career after
1509754629500:# 1980. One of the statistic most commonly used to judge the quality of a
1509754629500:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509754629501:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509754629501:# who has at least one 1000 outs pitched over their entire career has been
1509754629501:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509754629502:# to gauge the quality of a pitcher.
1509754629502:require(Lahman)
1509754629503:require(dplyr)
1509754629504:DropColumns <- function (df, unwanted.columns) {
1509754629505:# Drop columns of a data frame by names.
1509754629506:# Args:
1509754629507:#   df: The data frame to be modified.
1509754629508:#   unwanted.columns: Names of the columns to be dropped.
1509754629508:# Returns:
1509754629509:#   The data frame with unwanted columns dropped.
1509754629511:df <- df[, !colnames(df) %in% unwanted.columns]
1509754629511:return(df)
1509754629512:}
1509754629513:# getting the data on players who made their debut after 1980
1509754629514:players <- Master
1509754629515:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509754629515:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509754629516:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509754629516:'retroID', 'bbrefID', 'deathDate')
1509754629517:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509754629518:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509754629534:# getting the data on Hitters
1509754629534:# a) 250+ PA per season over the career
1509754629535:# b) seasons after 1980
1509754629536:batting <- Batting
1509754629537:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509754629538:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509754629538:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509754629539:'OPS')
1509754629540:batting <- subset(batting, yearID > 2000 & lgID %in% c('AL', 'NL'))
1509754629604:batting.stats <- battingStats(cbind=F)
1509754630052:batting <- inner_join(batting, batting.stats,
1509754630052:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509754630175:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509754630178:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509754630236:batting.summary <- subset(batting.summary, PA > 250)
1509754630237:hitters <- inner_join(players, batting.summary, by='playerID')
1509754630240:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509754630241:hitters <- inner_join(hitters, batting, by='playerID')
1509754630253:# getting the data on Pitchers
1509754630254:# a) 1000+ outs pitched over the career
1509754630255:# b) seasons after 1980
1509754630256:pitching <- Pitching
1509754630257:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509754630257:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509754630258:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509754630259:'GIDP')
1509754630259:pitching <- DropColumns(df=pitching,
1509754630260:unwanted.columns=unwanted.pitching.columns)
1509754630262:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 2000)
1509754630268:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509754630289:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509754630291:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509754630294:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509754630294:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509754630303:# Limiting the players considered to only those who feature in the top pitchers
1509754630303:# or top hitters.
1509754630304:playerIds <- sort(unique(append(hitters$playerID,
1509754630305:pitchers$playerID)))
1509754630307:players <- filter(players, playerID %in% playerIDs)
1509754630360:salaries <- Salaries
1509754630361:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1509754630371:salaries.final <- inner_join(players, salaries, by='playerID')
1509754646681:# File to prepare the dataset into the required format for the rest of the
1509754646685:# analysis.
1509754646686:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509754646686:#
1509754646687:# This analysis looks to answer whether MLB players earn the most when they are
1509754646687:# performing at their respective peaks.
1509754646689:#
1509754646689:# The challenges involved are identifying at what age range the peak of MLB
1509754646691:# players fall, identifying whether there is a difference in the peak age range
1509754646691:# of hitters and that of pitchers.
1509754646693:#
1509754646697:# The analysis then tries to understand the relationship of salary with time.
1509754646698:# The salaries over the time are compared to identify if there is
1509754646699:# statistical evidence for a difference in the mean salaries over the decades.
1509754646700:#
1509754646701:# The analysis tries to study how the mean salaries for hitters and pitchers
1509754646702:# compare and if there is any difference between the salaries of the two
1509754646703:# groups.
1509754646704:#
1509754646704:# The study considers players who have played their entire career after
1509754646706:# 1980. One of the statistic most commonly used to judge the quality of a
1509754646706:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509754646707:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509754646708:# who has at least one 1000 outs pitched over their entire career has been
1509754646708:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509754646709:# to gauge the quality of a pitcher.
1509754646710:require(Lahman)
1509754646714:require(dplyr)
1509754646715:DropColumns <- function (df, unwanted.columns) {
1509754646715:# Drop columns of a data frame by names.
1509754646716:# Args:
1509754646717:#   df: The data frame to be modified.
1509754646718:#   unwanted.columns: Names of the columns to be dropped.
1509754646719:# Returns:
1509754646720:#   The data frame with unwanted columns dropped.
1509754646721:df <- df[, !colnames(df) %in% unwanted.columns]
1509754646722:return(df)
1509754646722:}
1509754646724:# getting the data on players who made their debut after 1980
1509754646725:players <- Master
1509754646727:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509754646730:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509754646731:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509754646732:'retroID', 'bbrefID', 'deathDate')
1509754646734:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509754646735:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509754646745:# getting the data on Hitters
1509754646746:# a) 250+ PA per season over the career
1509754646747:# b) seasons after 1980
1509754646747:batting <- Batting
1509754646748:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509754646749:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509754646750:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509754646751:'OPS')
1509754646752:batting <- subset(batting, yearID > 2000 & lgID %in% c('AL', 'NL'))
1509754646769:batting.stats <- battingStats(cbind=F)
1509754647019:batting <- inner_join(batting, batting.stats,
1509754647020:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509754647127:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509754647130:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509754647184:batting.summary <- subset(batting.summary, PA > 250)
1509754647185:hitters <- inner_join(players, batting.summary, by='playerID')
1509754647187:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509754647188:hitters <- inner_join(hitters, batting, by='playerID')
1509754647198:# getting the data on Pitchers
1509754647199:# a) 1000+ outs pitched over the career
1509754647200:# b) seasons after 1980
1509754647200:pitching <- Pitching
1509754647202:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509754647203:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509754647203:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509754647204:'GIDP')
1509754647204:pitching <- DropColumns(df=pitching,
1509754647205:unwanted.columns=unwanted.pitching.columns)
1509754647206:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 2000)
1509754647223:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509754647244:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509754647245:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509754647249:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509754647249:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509754647255:# Limiting the players considered to only those who feature in the top pitchers
1509754647256:# or top hitters.
1509754647257:playerIds <- sort(unique(append(hitters$playerID,
1509754647257:pitchers$playerID)))
1509754647261:players <- filter(players, playerID %in% playerIDs)
1509754647268:salaries <- Salaries
1509754647268:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1509754647275:salaries.final <- inner_join(players, salaries, by='playerID')
1509754663354:# File to prepare the dataset into the required format for the rest of the
1509754663355:# analysis.
1509754663356:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509754663356:#
1509754663357:# This analysis looks to answer whether MLB players earn the most when they are
1509754663357:# performing at their respective peaks.
1509754663357:#
1509754663358:# The challenges involved are identifying at what age range the peak of MLB
1509754663358:# players fall, identifying whether there is a difference in the peak age range
1509754663358:# of hitters and that of pitchers.
1509754663359:#
1509754663359:# The analysis then tries to understand the relationship of salary with time.
1509754663359:# The salaries over the time are compared to identify if there is
1509754663360:# statistical evidence for a difference in the mean salaries over the decades.
1509754663361:#
1509754663362:# The analysis tries to study how the mean salaries for hitters and pitchers
1509754663363:# compare and if there is any difference between the salaries of the two
1509754663364:# groups.
1509754663365:#
1509754663366:# The study considers players who have played their entire career after
1509754663366:# 1980. One of the statistic most commonly used to judge the quality of a
1509754663367:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509754663367:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509754663368:# who has at least one 1000 outs pitched over their entire career has been
1509754663368:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509754663368:# to gauge the quality of a pitcher.
1509754663369:require(Lahman)
1509754663369:require(dplyr)
1509754663370:DropColumns <- function (df, unwanted.columns) {
1509754663370:# Drop columns of a data frame by names.
1509754663372:# Args:
1509754663372:#   df: The data frame to be modified.
1509754663372:#   unwanted.columns: Names of the columns to be dropped.
1509754663373:# Returns:
1509754663373:#   The data frame with unwanted columns dropped.
1509754663373:df <- df[, !colnames(df) %in% unwanted.columns]
1509754663374:return(df)
1509754663374:}
1509754663375:# getting the data on players who made their debut after 1980
1509754663375:players <- Master
1509754663376:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509754663376:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509754663377:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509754663377:'retroID', 'bbrefID', 'deathDate')
1509754663378:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509754663379:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509754663383:# getting the data on Hitters
1509754663384:# a) 250+ PA per season over the career
1509754663385:# b) seasons after 1980
1509754663385:batting <- Batting
1509754663386:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509754663386:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509754663387:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509754663388:'OPS')
1509754663388:batting <- subset(batting, yearID > 2000 & lgID %in% c('AL', 'NL'))
1509754663404:batting.stats <- battingStats(cbind=F)
1509754663680:batting <- inner_join(batting, batting.stats,
1509754663680:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509754663785:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509754663788:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509754663841:batting.summary <- subset(batting.summary, PA > 250)
1509754663842:hitters <- inner_join(players, batting.summary, by='playerID')
1509754663848:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509754663849:hitters <- inner_join(hitters, batting, by='playerID')
1509754663859:# getting the data on Pitchers
1509754663859:# a) 1000+ outs pitched over the career
1509754663861:# b) seasons after 1980
1509754663863:pitching <- Pitching
1509754663864:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509754663865:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509754663865:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509754663868:'GIDP')
1509754663869:pitching <- DropColumns(df=pitching,
1509754663870:unwanted.columns=unwanted.pitching.columns)
1509754663870:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 2000)
1509754663888:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509754663908:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509754663908:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509754663913:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509754663914:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509754663920:# Limiting the players considered to only those who feature in the top pitchers
1509754663921:# or top hitters.
1509754663922:playerIds <- sort(unique(append(hitters$playerID,
1509754663922:pitchers$playerID)))
1509754663924:players <- filter(players, playerID %in% playerIds)
1509754663929:salaries <- Salaries
1509754663930:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1509754663936:salaries.final <- inner_join(players, salaries, by='playerID')
1509754669520:View(hitters)
1509754697221:View(hitters)
1509754736297:View(salaries)
1509754748905:View(pitchers)
1509754795329:summary(Salaries$yearID)
1509754990301:length(players)
1509755002091:nrow(players)
1509755036275:length(levels(factor(salaries$playerID)))
1509755071406:length(salaries$playerID)
1509755079145:length(salaries.final$playerID)
1509755084302:length(levels(factor(salaries.final$playerID)))
1509755162690:View(salaries.final)
1509755537555:# File to prepare the dataset into the required format for the rest of the
1509755537556:# analysis.
1509755537557:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509755537558:#
1509755537559:# This analysis looks to answer whether MLB players earn the most when they are
1509755537559:# performing at their respective peaks.
1509755537560:#
1509755537560:# The challenges involved are identifying at what age range the peak of MLB
1509755537560:# players fall, identifying whether there is a difference in the peak age range
1509755537560:# of hitters and that of pitchers.
1509755537561:#
1509755537561:# The analysis then tries to understand the relationship of salary with time.
1509755537561:# The salaries over the time are compared to identify if there is
1509755537562:# statistical evidence for a difference in the mean salaries over the decades.
1509755537562:#
1509755537562:# The analysis tries to study how the mean salaries for hitters and pitchers
1509755537563:# compare and if there is any difference between the salaries of the two
1509755537563:# groups.
1509755537563:#
1509755537564:# The study considers players who have played their entire career after
1509755537564:# 1980. One of the statistic most commonly used to judge the quality of a
1509755537564:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509755537565:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509755537565:# who has at least one 1000 outs pitched over their entire career has been
1509755537565:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509755537566:# to gauge the quality of a pitcher.
1509755537567:require(Lahman)
1509755537569:require(dplyr)
1509755537571:DropColumns <- function (df, unwanted.columns) {
1509755537571:# Drop columns of a data frame by names.
1509755537572:# Args:
1509755537573:#   df: The data frame to be modified.
1509755537573:#   unwanted.columns: Names of the columns to be dropped.
1509755537574:# Returns:
1509755537575:#   The data frame with unwanted columns dropped.
1509755537576:df <- df[, !colnames(df) %in% unwanted.columns]
1509755537576:return(df)
1509755537578:}
1509755537578:# getting the data on players who made their debut after 1980
1509755537579:players <- Master
1509755537580:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509755537581:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509755537582:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509755537582:'retroID', 'bbrefID', 'deathDate')
1509755537583:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509755537584:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509755537593:# getting the data on Hitters
1509755537594:# a) 250+ PA per season over the career
1509755537595:# b) seasons after 1980
1509755537595:batting <- Batting
1509755537596:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509755537596:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509755537597:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509755537598:'OPS')
1509755537599:batting <- subset(batting, yearID > 2000 & lgID %in% c('AL', 'NL'))
1509755537613:batting.stats <- battingStats(cbind=F)
1509755537946:batting <- inner_join(batting, batting.stats,
1509755537947:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509755538053:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509755538057:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509755538116:batting.summary <- subset(batting.summary, PA > 250)
1509755538117:hitters <- inner_join(players, batting.summary, by='playerID')
1509755538120:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509755538121:hitters <- inner_join(hitters, batting, by='playerID')
1509755538131:# getting the data on Pitchers
1509755538132:# a) 1000+ outs pitched over the career
1509755538133:# b) seasons after 1980
1509755538133:pitching <- Pitching
1509755538134:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509755538136:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509755538137:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509755538138:'GIDP')
1509755538139:pitching <- DropColumns(df=pitching,
1509755538140:unwanted.columns=unwanted.pitching.columns)
1509755538141:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 2000)
1509755538147:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509755538170:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509755538171:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509755538174:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509755538175:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509755538182:# Limiting the players considered to only those who feature in the top pitchers
1509755538183:# or top hitters.
1509755538184:playerIds <- sort(unique(append(hitters$playerID,
1509755538185:pitchers$playerID)))
1509755538187:players <- filter(players, playerID %in% playerIds)
1509755538192:players <- mutate(players, age=yearID-birthYear-1L*(birthMonth >= 10))
1509755538202:salaries <- Salaries
1509755538203:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1509755538210:salaries.final <- inner_join(players, salaries, by='playerID')
1509755561241:View(Master)
1509755594953:View(salaries.final)
1509755603675:# File to prepare the dataset into the required format for the rest of the
1509755603676:# analysis.
1509755603677:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509755603677:#
1509755603678:# This analysis looks to answer whether MLB players earn the most when they are
1509755603678:# performing at their respective peaks.
1509755603679:#
1509755603679:# The challenges involved are identifying at what age range the peak of MLB
1509755603680:# players fall, identifying whether there is a difference in the peak age range
1509755603681:# of hitters and that of pitchers.
1509755603683:#
1509755603684:# The analysis then tries to understand the relationship of salary with time.
1509755603686:# The salaries over the time are compared to identify if there is
1509755603687:# statistical evidence for a difference in the mean salaries over the decades.
1509755603688:#
1509755603689:# The analysis tries to study how the mean salaries for hitters and pitchers
1509755603690:# compare and if there is any difference between the salaries of the two
1509755603691:# groups.
1509755603691:#
1509755603693:# The study considers players who have played their entire career after
1509755603693:# 1980. One of the statistic most commonly used to judge the quality of a
1509755603694:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509755603695:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509755603697:# who has at least one 1000 outs pitched over their entire career has been
1509755603699:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509755603701:# to gauge the quality of a pitcher.
1509755603702:require(Lahman)
1509755603704:require(dplyr)
1509755603705:DropColumns <- function (df, unwanted.columns) {
1509755603706:# Drop columns of a data frame by names.
1509755603707:# Args:
1509755603707:#   df: The data frame to be modified.
1509755603708:#   unwanted.columns: Names of the columns to be dropped.
1509755603709:# Returns:
1509755603709:#   The data frame with unwanted columns dropped.
1509755603710:df <- df[, !colnames(df) %in% unwanted.columns]
1509755603710:return(df)
1509755603710:}
1509755603711:# getting the data on players who made their debut after 1980
1509755603712:players <- Master
1509755603713:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509755603714:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509755603715:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509755603715:'retroID', 'bbrefID', 'deathDate')
1509755603718:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509755603719:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509755603727:# getting the data on Hitters
1509755603728:# a) 250+ PA per season over the career
1509755603729:# b) seasons after 1980
1509755603730:batting <- Batting
1509755603732:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509755603734:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509755603736:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509755603737:'OPS')
1509755603738:batting <- subset(batting, yearID > 2000 & lgID %in% c('AL', 'NL'))
1509755603760:batting.stats <- battingStats(cbind=F)
1509755604087:batting <- inner_join(batting, batting.stats,
1509755604088:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509755604195:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509755604198:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509755604262:batting.summary <- subset(batting.summary, PA > 250)
1509755604263:hitters <- inner_join(players, batting.summary, by='playerID')
1509755604267:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509755604268:hitters <- inner_join(hitters, batting, by='playerID')
1509755604277:# getting the data on Pitchers
1509755604277:# a) 1000+ outs pitched over the career
1509755604278:# b) seasons after 1980
1509755604279:pitching <- Pitching
1509755604280:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509755604281:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509755604282:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509755604283:'GIDP')
1509755604284:pitching <- DropColumns(df=pitching,
1509755604284:unwanted.columns=unwanted.pitching.columns)
1509755604286:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 2000)
1509755604290:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509755604311:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509755604312:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509755604317:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509755604317:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509755604325:# Limiting the players considered to only those who feature in the top pitchers
1509755604325:# or top hitters.
1509755604326:playerIds <- sort(unique(append(hitters$playerID,
1509755604327:pitchers$playerID)))
1509755604329:players <- filter(players, playerID %in% playerIds)
1509755604335:salaries <- Salaries
1509755604336:salaries <- subset(salaries, lgID %in% c('AL', 'NL'))
1509755604341:salaries.final <- inner_join(players, salaries, by='playerID')
1509755604351:salaries.final <- mutate(salaries.final, age=yearID-birthYear-1L*(birthMonth >= 10))
1509755606855:View(salaries.final)
1509755652013:age <- salaries.final$age
1509755664889:salary <- salaries.final$salary
1509755696315:library(pastecs) #For creating descriptive statistic summaries
1509755696355:library(ggplot2) #For creating histograms with more detail than plot
1509755696482:library(semTools) #For skewness and kurtosis
1509755696637:InspectScaleVariable <- function (variable, label) {
1509755696637:# Basic summary stats of the variable
1509755696638:stat.desc(x=variable, basic=FALSE)
1509755696639:#skewness and kurtosis from semTools with standard error
1509755696639:print(skew(object=variable))
1509755696640:print(kurtosis(object=variable))
1509755696640:df <- as.data.frame(x=variable)
1509755696640:viz <- ggplot(data=df, mapping=aes(x=variable))
1509755696643:viz <- viz + labs(x=label)
1509755696643:viz <- viz + geom_histogram(binwidth=2, colour='black',
1509755696644:aes(y=..density.., fill=..count..))
1509755696644:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509755696645:viz <- viz + stat_function(fun=dnorm,
1509755696645:color="red",
1509755696647:args=list(mean=mean(variable, na.rm=TRUE),
1509755696647:sd=sd(variable, na.rm=TRUE)))
1509755696649:qqnorm(variable)
1509755696649:qqline(variable, col=2)
1509755696650:print(viz)
1509755696651:}
1509755707886:InspectScaleVariable(age)
1509755721162:InspectScaleVariable(age, 'Age')
1509755840653:InspectScaleVariable(salary, 'Salary')
1509755974809:variable <- salary
1509755980179:viz <- ggplot(data=df, mapping=aes(x=variable))
1509755984987:viz <- viz + labs(x=label)
1509755984989:viz <- viz + geom_histogram(binwidth=2, colour='black',
1509755984989:aes(y=..density.., fill=..count..))
1509755993389:label <- "Salary"
1509755998964:viz <- ggplot(data=df, mapping=aes(x=variable))
1509755998969:viz <- viz + labs(x=label)
1509755998971:viz <- viz + geom_histogram(binwidth=2, colour='black',
1509755998972:aes(y=..density.., fill=..count..))
1509756003277:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509756007025:viz <- viz + stat_function(fun=dnorm,
1509756007026:color="red",
1509756007027:args=list(mean=mean(variable, na.rm=TRUE),
1509756007027:sd=sd(variable, na.rm=TRUE)))
1509756012431:viz
1509756043613:sum(salary)
1509756050409:mean(salary)
1509756055729:sd(salary)
1509756065649:sd(salary, na.rm=T)
1509756078598:salary
1509756093970:?sd
1509756107124:sd(salary)
1509756113200:mean(salary)
1509756127798:qqnorm(variable)
1509756127995:qqline(variable, col=2)
1509756147641:hist(salary)
1509792921717:salaries <- Salaries
1509792921720:salaries <- subset(salaries, lgID %in% c('AL', 'NL') & yearID > 2000)
1509792921729:# salaries.final <- inner_join(players, salaries, by='playerID')
1509792921730:salaries.final <- mutate(salaries, age=yearID-birthYear-1L*(birthMonth >= 10))
1509792966413:players <- Master
1509792966414:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509792966415:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509792966416:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509792966416:'retroID', 'bbrefID', 'deathDate')
1509792966417:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509792973638:# File to prepare the dataset into the required format for the rest of the
1509792973638:# analysis.
1509792973639:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509792973640:#
1509792973640:# This analysis looks to answer whether MLB players earn the most when they are
1509792973640:# performing at their respective peaks.
1509792973641:#
1509792973641:# The challenges involved are identifying at what age range the peak of MLB
1509792973641:# players fall, identifying whether there is a difference in the peak age range
1509792973642:# of hitters and that of pitchers.
1509792973642:#
1509792973642:# The analysis then tries to understand the relationship of salary with time.
1509792973642:# The salaries over the time are compared to identify if there is
1509792973643:# statistical evidence for a difference in the mean salaries over the decades.
1509792973643:#
1509792973643:# The analysis tries to study how the mean salaries for hitters and pitchers
1509792973644:# compare and if there is any difference between the salaries of the two
1509792973644:# groups.
1509792973645:#
1509792973645:# The study considers players who have played their entire career after
1509792973646:# 1980. One of the statistic most commonly used to judge the quality of a
1509792973646:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509792973648:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509792973649:# who has at least one 1000 outs pitched over their entire career has been
1509792973651:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509792973652:# to gauge the quality of a pitcher.
1509792973653:require(Lahman)
1509792973654:require(dplyr)
1509792973656:DropColumns <- function (df, unwanted.columns) {
1509792973656:# Drop columns of a data frame by names.
1509792973657:# Args:
1509792973658:#   df: The data frame to be modified.
1509792973658:#   unwanted.columns: Names of the columns to be dropped.
1509792973659:# Returns:
1509792973660:#   The data frame with unwanted columns dropped.
1509792973660:df <- df[, !colnames(df) %in% unwanted.columns]
1509792973662:return(df)
1509792973664:}
1509792973666:# getting the data on players who made their debut after 1980
1509792973667:players <- Master
1509792973668:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509792973668:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509792973670:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509792973670:'retroID', 'bbrefID', 'deathDate')
1509792973671:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509792980084:salaries <- Salaries
1509792980085:salaries <- subset(salaries, lgID %in% c('AL', 'NL') & yearID > 2000)
1509792980089:# salaries.final <- inner_join(players, salaries, by='playerID')
1509792980090:salaries.final <- mutate(salaries, age=yearID-birthYear-1L*(birthMonth >= 10))
1509792992996:salaries <- Salaries
1509792992997:salaries <- subset(salaries, lgID %in% c('AL', 'NL') & yearID > 2000)
1509792993001:salaries.final <- inner_join(players, salaries, by='playerID')
1509792993023:salaries.final <- mutate(salaries.final, age=yearID-birthYear-1L*(birthMonth >= 10))
1509793081154:sum(salaries.final$lgID=='AL')
1509793083703:sum(salaries.final$lgID=='NL')
1509793213906:require(Lahman)
1509793213909:require(dplyr)
1509793213912:DropColumns <- function (df, unwanted.columns) {
1509793213912:# Drop columns of a data frame by names.
1509793213913:# Args:
1509793213914:#   df: The data frame to be modified.
1509793213915:#   unwanted.columns: Names of the columns to be dropped.
1509793213916:# Returns:
1509793213917:#   The data frame with unwanted columns dropped.
1509793213918:df <- df[, !colnames(df) %in% unwanted.columns]
1509793213919:return(df)
1509793213919:}
1509793213921:# getting the data on players who made their debut after 1980
1509793213921:players <- Master
1509793213923:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509793213925:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509793213926:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509793213928:'retroID', 'bbrefID', 'deathDate')
1509793213929:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509793213930:salaries <- Salaries
1509793213931:salaries <- subset(salaries, lgID %in% c('AL', 'NL') & yearID > 2000)
1509793213935:salaries <- inner_join(players, salaries, by='playerID')
1509793213944:salaries <- mutate(salaries, age=yearID-birthYear-1L*(birthMonth >= 10))
1509793390014:salaries <- Salaries %>%
1509793390015:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509793390016:inner_join(salaries, by='playerID') %>%
1509793390016:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509793428452:salaries <- Salaries %>%
1509793428454:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509793428455:inner_join(players, by='playerID') %>%
1509793428455:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509793435425:require(Lahman)
1509793435425:require(dplyr)
1509793435427:DropColumns <- function (df, unwanted.columns) {
1509793435427:# Drop columns of a data frame by names.
1509793435428:# Args:
1509793435428:#   df: The data frame to be modified.
1509793435429:#   unwanted.columns: Names of the columns to be dropped.
1509793435429:# Returns:
1509793435430:#   The data frame with unwanted columns dropped.
1509793435430:df <- df[, !colnames(df) %in% unwanted.columns]
1509793435430:return(df)
1509793435431:}
1509793435431:# getting the data on players who made their debut after 1980
1509793435432:players <- Master
1509793435433:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509793435433:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509793435435:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509793435437:'retroID', 'bbrefID', 'deathDate')
1509793435439:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509793435442:salaries <- Salaries %>%
1509793435442:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509793435443:inner_join(players, by='playerID') %>%
1509793435444:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509793479473:View(salaries)
1509793511929:library(pastecs) #For creating descriptive statistic summaries
1509793511931:library(ggplot2) #For creating histograms with more detail than plot
1509793511931:library(semTools) #For skewness and kurtosis
1509793511933:InspectScaleVariable <- function (variable, label) {
1509793511934:# Basic summary stats of the variable
1509793511935:stat.desc(x=variable, basic=FALSE)
1509793511935:#skewness and kurtosis from semTools with standard error
1509793511936:print(skew(object=variable))
1509793511936:print(kurtosis(object=variable))
1509793511937:df <- as.data.frame(x=variable)
1509793511937:viz <- ggplot(data=df, mapping=aes(x=variable))
1509793511937:viz <- viz + labs(x=label)
1509793511938:viz <- viz + geom_histogram(binwidth=2, colour='black',
1509793511938:aes(y=..density.., fill=..count..))
1509793511938:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509793511939:viz <- viz + stat_function(fun=dnorm,
1509793511939:color="red",
1509793511941:args=list(mean=mean(variable, na.rm=TRUE),
1509793511942:sd=sd(variable, na.rm=TRUE)))
1509793511944:qqnorm(variable)
1509793511945:qqline(variable, col=2)
1509793511947:print(viz)
1509793511948:}
1509793534230:InspectScaleVariable(salaries, 'Salary')
1509793558726:InspectScaleVariable(salaries$salary, 'Salary')
1509793584190:hist(salaries$salary)
1509793608817:qqplot(salaries$salary)
1509793626155:qqnorm(salaries$salary)
1509793639539:qqline(salaries$salary, col=1)
1509793643401:qqline(salaries$salary, col=2)
1509793842018:require(ggplot2)
1509793873261:qplot(lgID, salary, salaries, geom=boxplot)
1509793876487:qplot(lgID, salary, salaries, geom='boxplot')
1509793926317:qplot(lgID, salary, data=salaries, geom='boxplot')
1509795756208:al.salaries <- filter(salaries, lgID=='AL')
1509795767509:nl.salaries <- filter(salaries, lgID=='NL')
1509795828782:al.salaries <- al.salaries$salary
1509795843021:nl.salary <- nl.salaries$salary
1509795845825:al.salaries <- filter(salaries, lgID=='AL')
1509795852797:al.salary <- al.salaries$salary
1509795863875:mean(al.salaries)
1509795880066:mean(al.salary)
1509795883852:mean(nl.salary)
1509796190485:require(car)
1509796213236:require(reshape2)
1509796218729:?melt
1509796304113:x <- cbind(al.salary, nl.salary)
1509796325104:tail(x)
1509796335600:head(x)
1509796352681:cbind(c(1, 2, 3, 4), c(1, 2))
1509796370558:y <- cbind(c(1, 2, 3, 4), c(1, 2))
1509796375765:y <- cbind(c(1, 2, 3, 4), c(1, 2, 3))
1509796379614:y
1509796387074:?cbind
1509796461711:?levene.test
1509796466997:?leveneTest
1509796760613:x <- as.data.frame(al.salary, nl.salary)
1509796784763:View(x)
1509796804353:colour <- c('b', 'r', 'b')
1509796817177:value <- 1:5
1509796825520:data.frame(colour, value)
1509796857969:full_join(data.frame(colour), data.frame(value))
1509796882404:?data.frame
1509797217354:leveneTest(al.salary, nl.salary)
1509797424193:?t.test
1509797483537:t.test(nl.salary, al.salary)
1509797534767:t.test(c(1, 2, 3, 4), c(1, 2, 3, 4))
1509797557279:t.test(c(1, 2, 3, 4), c(11, 12, 13, 14))
1509797595635:x <- t.test(c(1, 2, 3, 4), c(1, 2, 3, 4))
1509797597453:x
1509797609870:str(x)
1509797663632:x <- t.test(nl.salary, al.salary)
1509797666317:str(x)
1509800580780:x <- stack(al.salary, nl.salary)
1509800598975:x <- stack(list=(g1=al.salary, g2=nl.salary))
1509800607835:stack(list=(g1=al.salary, g2=nl.salary))
1509800625409:?list
1509800645690:stack(list=(al.salary, nl.salary))
1509800653314:stack(list(al.salary, nl.salary))
1509800681078:g1 = rnorm( 50, mean=2, sd=2)        # here I generate data w/ different variances
1509800681080:g2 = rnorm(100, mean=3, sd=3)        #   & different sample sizes
1509800681081:my.data = stack(list(g1=g1, g2=g2))
1509800694054:stack(list(x=al.salary, y=nl.salary))
1509800709720:stack(list(g1=al.salary, g2=nl.salary))
1509800734734:x <- stack(list(al.salary=al.salary, nl.salary=nl.salary))
1509800738006:View(x)
1509800769007:tail(x)
1509800813297:leveneTest(values ~ ind, x)
1509812868662:hist(al.salary)
1509812890764:hist(al.salary, binwidth=10000)
1509812901669:?hist
1509812961584:y <- data.frame(al.salary)
1509812976580:y
1509812980436:View(y)
1509813001288:qplot(alsalary, data=y, binwidth=100000)
1509813012086:qplot(alsalary, data=y, binwidth=100000)
1509813022473:qplot(al.salary, data=y, binwidth=100000)
1509813029318:qplot(al.salary, data=y, binwidth=10000)
1509813047381:qplot(al.salary, data=y, binwidth=10000, geom='smooth')
1509813058095:qplot(y=al.salary, data=y, binwidth=10000, geom='smooth')
1509813071884:qplot(al.salary, data=y, binwidth=10000)
1509813094908:?sample
1509813133148:means <- c()
1509813197494:for (i in 1:1000) {
1509813197496:append(c, sample_n(y, 400))
1509813197496:}
1509813205335:length(c)
1509813215984:for (i in 1:1000) {
1509813215984:c <- append(c, sample_n(y, 400))
1509813215985:}
1509813218961:length(c)
1509813222548:hist(c)
1509813227100:c
1509813244736:for (i in 1:1000) {
1509813244738:c <- append(c, mean(sample_n(y, 400)))
1509813244739:}
1509813256440:c <- list()
1509813258383:for (i in 1:1000) {
1509813258384:c <- append(c, mean(sample_n(y, 400)))
1509813258385:}
1509813266982:length(c)
1509813276688:hist(c)
1509813278704:c
1509813305126:mean(sample_n(y, 3))
1509813335639:means <- c()
1509813338437:rm(c)
1509813342993:means
1509813352519:means <- c()
1509813404839:for (i in 1:1000) {}
1509813516504:means <- c()
1509813516506:for (i in 1:1000) {
1509813516506:sampu <- sample_n(y, 400)
1509813516507:append(means, mean(sampu$al.salary))
1509813516508:}
1509813524002:means
1509813533198:means <- c()
1509813533200:for (i in 1:1000) {
1509813533200:sampu <- sample_n(y, 400)
1509813533202:means <- append(means, mean(sampu$al.salary))
1509813533202:}
1509813536455:means
1509813541347:hist(means)
1509813755860:al.salaries <- filter(salaries, lgID=='AL')
1509813755872:al.salary <- al.salaries$salary
1509813755873:nl.salaries <- filter(salaries, lgID=='NL')
1509813755879:nl.salary <- nl.salaries$salary
1509813801999:salary.stack <- stack(list(nl.salary, al.salary))
1509813827339:g1 = rnorm( 50, mean=2, sd=2)        # here I generate data w/ different variances
1509813827340:g2 = rnorm(100, mean=3, sd=3)        #   & different sample sizes
1509813827340:my.data = stack(list(g1=g1, g2=g2))
1509813874939:salary.stack <- stack(list(nl.salary=nl.salary, al.salary=al.salary))
1509813915691:leveneTest(values ~ ind, salary.stack)
1509813949501:league.salary.levene.result <- leveneTest(values ~ ind, salary.stack)
1509813955617:str(league.salary.levene.result)
1509813969672:league.salary.levene.result
1509814142165:?leveneTest
1509814191326:?t.test
1509814226426:t.test(al.salary, nl.salary)
1509814284523:league.salary.t <- t.test(al.salary, nl.salary)
1509814290129:league.salary.t
1509814299448:str(league.salary.t)
1509814303123:str(league.salary.t)
1509814306476:league.salary.t
1509814717533:qplot(al.salary, nl.salary)
1509814746682:sample_n(al.salary, 100)
1509814771919:qplot(al.salary, nl.salary[1:6315])
1509814801854:al.salary <- sort(al.salary)
1509814809338:nl.salary <- sort(nl.salary)
1509814811529:qplot(al.salary, nl.salary[1:6315])
1509814843418:salary.stack <- stack(list(nl.salary=nl.salary, al.salary=al.salary))
1509814857202:t.test(al.salary, nl.salary)
1509815129005:league.salary.levene.result
1509815149896:leveneTest(values ~ ind, salary.stack)
1509815212202:?t.test
1509828067499:library(semTools) #For skewness and kurtosis
1509828091492:skew(al.salary)
1509828125969:kurtosis(nl.salary)
1509828129316:kurtosis(al.salary)
1509828136330:skew(nl.salary)
1509828153087:hist(al.salary)
1509829361908:skew(nl.salary)
1509829390921:str(skew(nl.salary))
1509829396138:?skew
1509829525346:require(moments)
1509829532299:skewness(nl.salary)
1509829538791:?skewness
1509829598036:?skew
1509829635514:skew(1:5)
1509829644223:hist(1:5)
1509829661392:x <- rnorm(100)
1509829663829:hist(x)
1509829668166:x <- rnorm(10000)
1509829669202:hist(x)
1509829674103:skew(x)
1509829710215:skew(runif(1000))
1509829720281:x <- runif(1000)
1509829722214:hist(x)
1509829728266:skew(x)
1509829744011:qqnorm(x)
1509829899243:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1509829924064:require(foreign)
1509829939237:survey <- read.table("survey.dat")
1509829943400:colnames(survey) <- tolower(colnames(survey))
1509829968377:skew(survey$tpcoiss)
1509829968385:kurtosis(survey$tpcoiss)
1509829975694:stat.desc(survey$tpcoiss, basic=F)
1509829980658:skew(survey$tpcoiss)
1509829991909:skew(survey$tpcoiss)
1509830065326:kurtosis(survey$tpcoiss)
1509830081772:kurtosis(survey$tpcoiss, na.rm = T)
1509830158786:detach("package:moments", unload=TRUE)
1509830160895:kurtosis(survey$tpcoiss, na.rm = T)
1509830165052:kurtosis(survey$tpcoiss)
1509837475805:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 2 - Sep 18 to Sep 22")
1509837534887:require(foreign)
1509837555272:reg.file <- read.spss('regression.por')
1509837575575:df <- as.data.frame(reg.file)
1509837632529:View(df)
1509837741458:colnames(df) <- tolower(colnames(df))
1509837744715:df$normexam
1509837787693:summary(df$normexam)
1509837807531:summary(df$standlrt)
1509837834095:require(RcmdrMisc)
1509837851111:summary(df)
1509837867687:numSummary(df$normexam)
1509837881213:numSummary(df$standlrt)
1509838039396:require(plyr)
1509838063061:count(df$girl)
1509838099737:tab <- table(df$girl, df$schgend)
1509838102509:tab
1509838126194:tab
1509838135257:prop.table(tab)
1509838141395:addmargins(tab)
1509838193123:hist(df$normexam)
1509838240507:hist(df$normexam, prob=T)
1509838243929:hist(df$normexam)
1509838246887:hist(df$normexam, prob=T)
1509838266495:lines(density(df$normexam))
1509838274944:density(df$norm)
1509838280578:lines(density(df$normexam))
1509838368668:curve(dnorm(x, m, s))
1509838374844:m <- mean(df$normexam)
1509838374845:s <- sd(df$normexam)
1509838377043:curve(dnorm(x, m, s))
1509838391173:curve(dnorm(x, m, s), col="red", lwd=2, add=TRUE)
1509838484207:require(gmodels)
1509838509220:CrossTable(df$girl, df$schgend)
1509838546141:rab
1509838547885:tab
1509838564993:rownames(tab) <- c('Boys', 'Girls')
1509838566804:tab
1509838623556:barplot(
1509838623558:tab,
1509838623560:main="Distribution of students in mixed and non-mixed schools",
1509838623561:xlab="Type of School",
1509838623562:col=c('blue', 'red'),
1509838623562:legend=rownames(tab),
1509838623564:beside=TRUE
1509838623565:)
1509838637183:barplot(
1509838637184:tab,
1509838637185:main="Distribution of students in mixed and non-mixed schools",
1509838637185:xlab="Type of School",
1509838637185:col=c('blue', 'red'),
1509838637186:legend=rownames(tab)
1509838637186:)
1509838645017:barplot(
1509838645018:tab,
1509838645019:main="Distribution of students in mixed and non-mixed schools",
1509838645019:xlab="Type of School",
1509838645020:col=c('blue', 'red'),
1509838645021:legend=rownames(tab),
1509838645022:beside=TRUE
1509838645023:)
1509838691512:with(
1509838691513:df,
1509838691514:pie(
1509838691514:table(girl),
1509838691515:labels=rownames(tab),
1509838691515:xlab="",
1509838691515:ylab="",
1509838691516:main="Gender distribution",
1509838691516:col=rainbow_hcl(3)
1509838691517:)
1509838691517:)
1509838739645:regrdata <- read.spss('regression.por')
1509838739669:class.data <- as.data.frame(regrdata)
1509838739672:colnames(class.data) <- tolower(colnames(class.data))
1509838739673:norm.exam.summary <- numSummary(class.data$normexam)
1509838739677:lrt.summary <- numSummary(class.data$standlrt)
1509838739682:hist(class.data$normexam)
1509838739738:require(plyr)
1509838739738:count(class.data$girl)
1509838739782:count(class.data$schgend)
1509838739786:f.table <- table(class.data$girl, class.data$schgend)
1509838739790:require(gmodels)
1509838739791:cross.table <- CrossTable(class.data$girl, class.data$schgend)
1509838740374:rownames(f.table) <- c('Boys', 'Girls')
1509838740376:barplot(
1509838740377:f.table,
1509838740378:main="Distribution of students in mixed and non-mixed schools",
1509838740378:xlab="Type of School",
1509838740379:col=c('blue', 'red'),
1509838740379:legend=rownames(f.table),
1509838740379:beside=TRUE
1509838740380:)
1509838740435:with(
1509838740436:Dataset,
1509838740437:pie(
1509838740437:table(girl),
1509838740439:labels=rownames(f.table),
1509838740439:xlab="",
1509838740439:ylab="",
1509838740440:main="Gender distribution",
1509838740440:col=rainbow_hcl(3)
1509838740440:)
1509838740441:)
1509838758002:with(
1509838758006:class.data,
1509838758006:pie(
1509838758008:table(girl),
1509838758008:labels=rownames(f.table),
1509838758010:xlab="",
1509838758010:ylab="",
1509838758011:main="Gender distribution",
1509838758012:col=rainbow_hcl(3)
1509838758012:)
1509838758013:)
1509838772579:with(
1509838772580:class.data,
1509838772580:pie(
1509838772581:table(girl),
1509838772581:labels=rownames(f.table),
1509838772582:xlab="",
1509838772582:ylab="",
1509838772582:main="Gender distribution"
1509838772583:)
1509838772583:)
1509838781840:with(
1509838781843:df,
1509838781846:pie(
1509838781847:table(girl),
1509838781847:labels=rownames(tab),
1509838781848:xlab="",
1509838781849:ylab="",
1509838781850:main="Gender distribution"
1509838781851:)
1509838781852:)
1509843324934:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1509843536104:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Week 3 - Sep 25 to Sep 29")
1509843549719:drinkset<- read.table("Field-BDI-Non-parametric.dat")
1509843549726:#Get your descriptive statistcs
1509843549727:describeBy(drinkset$bdisun,group=drinkset$drink)
1509843583650:library(pastecs) #For creating descriptive statistic summaries
1509843583652:library(ggplot2) #For creating histograms with more detail than plot
1509843583654:library(psych) # Some useful descriptive functions
1509843583835:library(semTools) #For skewness and kurtosis
1509843583836:library(car) # For Levene's test for homogeneity of variance
1509843625411:drinkset<- read.table("Field-BDI-Non-parametric.dat")
1509843625419:#Get your descriptive statistcs
1509843625420:describeBy(drinkset$bdisun,group=drinkset$drink)
1509843625483:#Create data subsets for each drink
1509843625487:vodkadata <- subset(drinkset, drink=1)
1509843625504:beerdata <- subset(drinkset, drink=2)
1509843649806:#Create plots of these
1509843649807:gs <- ggplot(vodkadata, aes(x=vodkadata$bdisun))
1509843649833:gs <- gs + labs(x="Vodka")
1509843649858:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1509843649897:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509843649932:gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(vodkadata$bdisun, na.rm=TRUE), sd=sd(vodkadata$bdisun, na.rm=TRUE)))
1509843649982:gs
1509843659849:gs
1509843671273:gs <- ggplot(vodkadata, aes(x=vodkadata$bdisun))
1509843673752:gs
1509843681395:gs <- gs + labs(x="Vodka")
1509843684959:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1509843688432:gs
1509843696096:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509843698254:gs
1509843706892:gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(vodkadata$bdisun, na.rm=TRUE), sd=sd(vodkadata$bdisun, na.rm=TRUE)))
1509843708774:gs
1509843730015:gs <- ggplot(beerdata, aes(x=beerdata$bdisun))
1509843730040:gs <- gs + labs(x="Beer")
1509843730064:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1509843730091:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509843734959:gs <- gs + stat_function(fun=dnorm, color="red",args=list(mean=mean(beerdata$bdisun, na.rm=TRUE), sd=sd(beerdata$bdisun, na.rm=TRUE)))
1509843739054:gs
1509843791825:wilcox.test(bdisun~drink, data=drinkset)
1509843806129:wilcox.test(bdiwed~drink, data=drinkset)
1509877663232:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1")
1509877963738:# File to prepare the dataset into the required format for the rest of the
1509877963738:# analysis.
1509877963740:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509877963740:#
1509877963740:# This analysis looks to answer whether MLB players earn the most when they are
1509877963741:# performing at their respective peaks.
1509877963741:#
1509877963741:# The challenges involved are identifying at what age range the peak of MLB
1509877963742:# players fall, identifying whether there is a difference in the peak age range
1509877963742:# of hitters and that of pitchers.
1509877963742:#
1509877963743:# The analysis then tries to understand the relationship of salary with time.
1509877963743:# The salaries over the time are compared to identify if there is
1509877963743:# statistical evidence for a difference in the mean salaries over the decades.
1509877963744:#
1509877963745:# The analysis tries to study how the mean salaries for hitters and pitchers
1509877963747:# compare and if there is any difference between the salaries of the two
1509877963748:# groups.
1509877963749:#
1509877963750:# The study considers players who have played their entire career after
1509877963751:# 1980. One of the statistic most commonly used to judge the quality of a
1509877963752:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509877963752:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509877963754:# who has at least one 1000 outs pitched over their entire career has been
1509877963754:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509877963755:# to gauge the quality of a pitcher.
1509877963756:require(Lahman)
1509877963771:require(dplyr)
1509877964080:DropColumns <- function (df, unwanted.columns) {
1509877964081:# Drop columns of a data frame by names.
1509877964082:# Args:
1509877964082:#   df: The data frame to be modified.
1509877964082:#   unwanted.columns: Names of the columns to be dropped.
1509877964083:# Returns:
1509877964083:#   The data frame with unwanted columns dropped.
1509877964083:df <- df[, !colnames(df) %in% unwanted.columns]
1509877964084:return(df)
1509877964084:}
1509877964085:# getting the data on players who made their debut after 1980
1509877964085:players <- Master
1509877964245:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509877964245:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509877964246:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509877964246:'retroID', 'bbrefID', 'deathDate')
1509877964247:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509877964248:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509877964266:# getting the data on Hitters
1509877964267:# a) 250+ PA per season over the career
1509877964268:# b) seasons after 1980
1509877964268:batting <- Batting
1509877964523:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509877964523:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509877964524:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509877964525:'OPS')
1509877964525:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509877964540:batting.stats <- battingStats(cbind=F)
1509877964921:batting <- inner_join(batting, batting.stats,
1509877964921:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509877965056:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509877965059:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509877965120:batting.summary <- subset(batting.summary, PA > 250)
1509877965121:hitters <- inner_join(players, batting.summary, by='playerID')
1509877965133:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509877965134:hitters <- inner_join(hitters, batting, by='playerID')
1509877965144:# getting the data on Pitchers
1509877965144:# a) 1000+ outs pitched over the career
1509877965146:# b) seasons after 1980
1509877965147:pitching <- Pitching
1509877965205:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509877965206:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509877965207:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509877965207:'GIDP')
1509877965208:pitching <- DropColumns(df=pitching,
1509877965208:unwanted.columns=unwanted.pitching.columns)
1509877965209:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509877965213:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509877965237:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509877965238:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509877965241:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509877965241:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509877965252:# Limiting the players considered to only those who feature in the top pitchers
1509877965253:# or top hitters.
1509877965254:playerIds <- sort(unique(append(hitters$playerID,
1509877965255:pitchers$playerID)))
1509877965257:players <- filter(players, playerID %in% playerIds)
1509877965268:salaries <- Salaries %>%
1509877965268:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509877965270:inner_join(players, by='playerID') %>%
1509877965270:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509878103028:require(car)
1509878135097:View(batting)
1509878353578:leveneTest(salary ~ lgID, data=salaries)
1509878387049:require(ggplot2)
1509878413952:qplot(lgID, salary, data=salaries, geom='boxplot')
1509878474727:t.test(salary ~ lgID, data=salaries)
1509878586252:knitr::opts_chunk$set(echo = TRUE)
1509878586379:library(semTools)
1509878593967:library(psych)
1509878644935:?describeBy
1509878684516:describeBy(salaries, group=salaries$lgID)
1509879547675:warnings()
1509879574925:describeBy(salaries, group=salaries$lgID)
1509879638072:nrow(salaries)
1509879653751:sum(salaries$lgID=='NL')
1509879656419:sum(salaries$lgID=='AL')
1509879832293:View(salaries)
1509879951066:colnames(salaries)
1509879963667:noquote(colnames(salaries))
1509880050688:View(players)
1509880191831:# File to prepare the dataset into the required format for the rest of the
1509880191832:# analysis.
1509880191833:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509880191834:#
1509880191835:# This analysis looks to answer whether MLB players earn the most when they are
1509880191835:# performing at their respective peaks.
1509880191836:#
1509880191836:# The challenges involved are identifying at what age range the peak of MLB
1509880191838:# players fall, identifying whether there is a difference in the peak age range
1509880191838:# of hitters and that of pitchers.
1509880191838:#
1509880191839:# The analysis then tries to understand the relationship of salary with time.
1509880191839:# The salaries over the time are compared to identify if there is
1509880191839:# statistical evidence for a difference in the mean salaries over the decades.
1509880191840:#
1509880191840:# The analysis tries to study how the mean salaries for hitters and pitchers
1509880191840:# compare and if there is any difference between the salaries of the two
1509880191841:# groups.
1509880191841:#
1509880191841:# The study considers players who have played their entire career after
1509880191842:# 1980. One of the statistic most commonly used to judge the quality of a
1509880191844:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509880191845:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509880191845:# who has at least one 1000 outs pitched over their entire career has been
1509880191846:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509880191846:# to gauge the quality of a pitcher.
1509880191848:require(Lahman)
1509880191849:require(dplyr)
1509880191850:require(car)
1509880191851:DropColumns <- function (df, unwanted.columns) {
1509880191852:# Drop columns of a data frame by names.
1509880191853:# Args:
1509880191854:#   df: The data frame to be modified.
1509880191855:#   unwanted.columns: Names of the columns to be dropped.
1509880191856:# Returns:
1509880191856:#   The data frame with unwanted columns dropped.
1509880191858:df <- df[, !colnames(df) %in% unwanted.columns]
1509880191858:return(df)
1509880191858:}
1509880191859:# getting the data on players who made their debut after 1980
1509880191860:players <- Master
1509880191861:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509880191862:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509880191863:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509880191863:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509880191865:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509880191865:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509880191871:# getting the data on Hitters
1509880191873:# a) 250+ PA per season over the career
1509880191874:# b) seasons after 1980
1509880191874:batting <- Batting
1509880191875:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509880191876:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509880191876:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509880191877:'OPS')
1509880191877:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509880191910:batting.stats <- battingStats(cbind=F)
1509880192487:batting <- inner_join(batting, batting.stats,
1509880192487:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509880192604:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509880192609:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509880192666:batting.summary <- subset(batting.summary, PA > 250)
1509880192667:hitters <- inner_join(players, batting.summary, by='playerID')
1509880192670:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509880192670:hitters <- inner_join(hitters, batting, by='playerID')
1509880192681:# getting the data on Pitchers
1509880192682:# a) 1000+ outs pitched over the career
1509880192683:# b) seasons after 1980
1509880192683:pitching <- Pitching
1509880192685:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509880192685:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509880192687:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509880192687:'GIDP')
1509880192687:pitching <- DropColumns(df=pitching,
1509880192688:unwanted.columns=unwanted.pitching.columns)
1509880192689:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509880192694:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509880192721:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509880192723:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509880192726:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509880192727:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509880192736:# Limiting the players considered to only those who feature in the top pitchers
1509880192736:# or top hitters.
1509880192737:playerIds <- sort(unique(append(hitters$playerID,
1509880192738:pitchers$playerID)))
1509880192739:players <- filter(players, playerID %in% playerIds)
1509880192745:salaries <- Salaries %>%
1509880192746:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509880192747:inner_join(players, by='playerID') %>%
1509880192748:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509880218240:# File to prepare the dataset into the required format for the rest of the
1509880218241:# analysis.
1509880218242:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509880218243:#
1509880218244:# This analysis looks to answer whether MLB players earn the most when they are
1509880218245:# performing at their respective peaks.
1509880218246:#
1509880218247:# The challenges involved are identifying at what age range the peak of MLB
1509880218248:# players fall, identifying whether there is a difference in the peak age range
1509880218248:# of hitters and that of pitchers.
1509880218248:#
1509880218249:# The analysis then tries to understand the relationship of salary with time.
1509880218249:# The salaries over the time are compared to identify if there is
1509880218249:# statistical evidence for a difference in the mean salaries over the decades.
1509880218250:#
1509880218250:# The analysis tries to study how the mean salaries for hitters and pitchers
1509880218251:# compare and if there is any difference between the salaries of the two
1509880218251:# groups.
1509880218252:#
1509880218252:# The study considers players who have played their entire career after
1509880218253:# 1980. One of the statistic most commonly used to judge the quality of a
1509880218253:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509880218254:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509880218254:# who has at least one 1000 outs pitched over their entire career has been
1509880218255:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509880218255:# to gauge the quality of a pitcher.
1509880218256:require(Lahman)
1509880218256:require(dplyr)
1509880218258:require(car)
1509880218260:DropColumns <- function (df, unwanted.columns) {
1509880218261:# Drop columns of a data frame by names.
1509880218262:# Args:
1509880218262:#   df: The data frame to be modified.
1509880218263:#   unwanted.columns: Names of the columns to be dropped.
1509880218264:# Returns:
1509880218265:#   The data frame with unwanted columns dropped.
1509880218266:df <- df[, !colnames(df) %in% unwanted.columns]
1509880218266:return(df)
1509880218267:}
1509880218267:# getting the data on players who made their debut after 1980
1509880218268:players <- Master
1509880218269:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509880218270:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509880218271:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509880218271:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509880218272:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509880218273:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509880218278:# getting the data on Hitters
1509880218279:# a) 250+ PA per season over the career
1509880218280:# b) seasons after 1980
1509880218281:batting <- Batting
1509880218283:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509880218283:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509880218284:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509880218285:'OPS')
1509880218285:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509880218321:batting.stats <- battingStats(cbind=F)
1509880218684:batting <- inner_join(batting, batting.stats,
1509880218684:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509880218799:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509880218803:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509880218861:batting.summary <- subset(batting.summary, PA > 250)
1509880218862:hitters <- inner_join(players, batting.summary, by='playerID')
1509880218865:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509880218866:hitters <- inner_join(hitters, batting, by='playerID')
1509880218876:# getting the data on Pitchers
1509880218876:# a) 1000+ outs pitched over the career
1509880218878:# b) seasons after 1980
1509880218879:pitching <- Pitching
1509880218880:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509880218880:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509880218881:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509880218882:'GIDP')
1509880218882:pitching <- DropColumns(df=pitching,
1509880218883:unwanted.columns=unwanted.pitching.columns)
1509880218883:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509880218897:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509880218921:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509880218922:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509880218925:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509880218926:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509880218936:# Limiting the players considered to only those who feature in the top pitchers
1509880218936:# or top hitters.
1509880218937:playerIds <- sort(unique(append(hitters$playerID,
1509880218938:pitchers$playerID)))
1509880218940:players <- filter(players, playerID %in% playerIds)
1509880218947:salaries <- Salaries %>%
1509880218948:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509880218949:inner_join(players, by='playerID') %>%
1509880218950:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509880244470:colnames(Salaries)
1509880268792:?Salaries
1509880289010:# File to prepare the dataset into the required format for the rest of the
1509880289010:# analysis.
1509880289011:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509880289012:#
1509880289012:# This analysis looks to answer whether MLB players earn the most when they are
1509880289012:# performing at their respective peaks.
1509880289013:#
1509880289013:# The challenges involved are identifying at what age range the peak of MLB
1509880289013:# players fall, identifying whether there is a difference in the peak age range
1509880289015:# of hitters and that of pitchers.
1509880289016:#
1509880289017:# The analysis then tries to understand the relationship of salary with time.
1509880289018:# The salaries over the time are compared to identify if there is
1509880289019:# statistical evidence for a difference in the mean salaries over the decades.
1509880289020:#
1509880289020:# The analysis tries to study how the mean salaries for hitters and pitchers
1509880289021:# compare and if there is any difference between the salaries of the two
1509880289021:# groups.
1509880289023:#
1509880289023:# The study considers players who have played their entire career after
1509880289024:# 1980. One of the statistic most commonly used to judge the quality of a
1509880289024:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509880289024:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509880289026:# who has at least one 1000 outs pitched over their entire career has been
1509880289026:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509880289027:# to gauge the quality of a pitcher.
1509880289027:require(car)
1509880289028:require(Lahman)
1509880289029:require(dplyr)
1509880289031:DropColumns <- function (df, unwanted.columns) {
1509880289032:# Drop columns of a data frame by names.
1509880289034:# Args:
1509880289035:#   df: The data frame to be modified.
1509880289035:#   unwanted.columns: Names of the columns to be dropped.
1509880289036:# Returns:
1509880289037:#   The data frame with unwanted columns dropped.
1509880289038:df <- df[, !colnames(df) %in% unwanted.columns]
1509880289039:return(df)
1509880289040:}
1509880289041:# getting the data on players who made their debut after 1980
1509880289042:players <- Master
1509880289043:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509880289043:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509880289046:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509880289046:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509880289047:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509880289047:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509880289054:# getting the data on Hitters
1509880289055:# a) 250+ PA per season over the career
1509880289056:# b) seasons after 1980
1509880289057:batting <- Batting
1509880289057:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509880289058:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509880289059:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509880289059:'OPS')
1509880289061:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509880289079:batting.stats <- battingStats(cbind=F)
1509880289468:batting <- inner_join(batting, batting.stats,
1509880289468:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509880289576:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509880289580:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509880289641:batting.summary <- subset(batting.summary, PA > 250)
1509880289642:hitters <- inner_join(players, batting.summary, by='playerID')
1509880289645:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509880289645:hitters <- inner_join(hitters, batting, by='playerID')
1509880289656:# getting the data on Pitchers
1509880289656:# a) 1000+ outs pitched over the career
1509880289657:# b) seasons after 1980
1509880289657:pitching <- Pitching
1509880289658:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509880289659:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509880289659:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509880289659:'GIDP')
1509880289660:pitching <- DropColumns(df=pitching,
1509880289661:unwanted.columns=unwanted.pitching.columns)
1509880289662:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509880289670:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509880289696:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509880289697:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509880289703:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509880289704:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509880289712:# Limiting the players considered to only those who feature in the top pitchers
1509880289713:# or top hitters.
1509880289714:playerIds <- sort(unique(append(hitters$playerID,
1509880289714:pitchers$playerID)))
1509880289718:players <- filter(players, playerID %in% playerIds)
1509880289724:salaries <- Salaries %>%
1509880289724:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509880289726:inner_join(players, by='playerID') %>%
1509880289726:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509880297186:detach("package:car", unload=TRUE)
1509880304603:Salaries
1509880310829:require(Lahman)
1509880315341:Salaries
1509880330310:DropColumns <- function (df, unwanted.columns) {
1509880330310:# Drop columns of a data frame by names.
1509880330311:# Args:
1509880330312:#   df: The data frame to be modified.
1509880330312:#   unwanted.columns: Names of the columns to be dropped.
1509880330312:# Returns:
1509880330313:#   The data frame with unwanted columns dropped.
1509880330313:df <- df[, !colnames(df) %in% unwanted.columns]
1509880330313:return(df)
1509880330313:}
1509880330314:# getting the data on players who made their debut after 1980
1509880330315:players <- Master
1509880330316:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509880330316:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509880330317:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509880330317:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509880330318:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509880330318:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509880330325:# getting the data on Hitters
1509880330326:# a) 250+ PA per season over the career
1509880330327:# b) seasons after 1980
1509880330328:batting <- Batting
1509880330329:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509880330330:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509880330331:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509880330331:'OPS')
1509880330332:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509880330350:batting.stats <- battingStats(cbind=F)
1509880330739:batting <- inner_join(batting, batting.stats,
1509880330739:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509880330860:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509880330864:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509880330917:batting.summary <- subset(batting.summary, PA > 250)
1509880330918:hitters <- inner_join(players, batting.summary, by='playerID')
1509880330921:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509880330922:hitters <- inner_join(hitters, batting, by='playerID')
1509880330932:# getting the data on Pitchers
1509880330932:# a) 1000+ outs pitched over the career
1509880330933:# b) seasons after 1980
1509880330934:pitching <- Pitching
1509880330936:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509880330936:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509880330938:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509880330938:'GIDP')
1509880330939:pitching <- DropColumns(df=pitching,
1509880330939:unwanted.columns=unwanted.pitching.columns)
1509880330940:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509880330947:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509880330971:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509880330972:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509880330979:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509880330980:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509880330987:# Limiting the players considered to only those who feature in the top pitchers
1509880330987:# or top hitters.
1509880330988:playerIds <- sort(unique(append(hitters$playerID,
1509880330989:pitchers$playerID)))
1509880330990:players <- filter(players, playerID %in% playerIds)
1509880331000:salaries <- Salaries %>%
1509880331001:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509880331002:inner_join(players, by='playerID') %>%
1509880331002:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509880476434:?Master
1509880654894:?Salary
1509880659434:?Salaries
1509880690423:str(salaries)
1509881072193:library(pastecs) #For creating descriptive statistic summaries
1509881072257:library(ggplot2) #For creating histograms with more detail than plot
1509881072258:library(semTools) #For skewness and kurtosis
1509881072260:InspectScaleVariable <- function (variable, label) {
1509881072261:# Basic summary stats of the variable
1509881072263:stat.desc(x=variable, basic=FALSE)
1509881072265:#skewness and kurtosis from semTools with standard error
1509881072266:print(skew(object=variable))
1509881072266:print(kurtosis(object=variable))
1509881072267:df <- as.data.frame(x=variable)
1509881072268:viz <- ggplot(data=df, mapping=aes(x=variable))
1509881072269:viz <- viz + labs(x=label)
1509881072270:viz <- viz + geom_histogram(binwidth=2, colour='black',
1509881072271:aes(y=..density.., fill=..count..))
1509881072272:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509881072273:viz <- viz + stat_function(fun=dnorm,
1509881072273:color="red",
1509881072274:args=list(mean=mean(variable, na.rm=TRUE),
1509881072276:sd=sd(variable, na.rm=TRUE)))
1509881072278:qqnorm(variable)
1509881072279:qqline(variable, col=2)
1509881072280:print(viz)
1509881072281:}
1509881105858:InspectScaleVariable(salaries$salary, 'Salary')
1509881123747:detach("package:psych", unload=TRUE)
1509881126247:InspectScaleVariable(salaries$salary, 'Salary')
1509881153047:hist(salaries$salary)
1509881170426:variable <- salaries$salary
1509881176399:df <- as.data.frame(x=variable)
1509881184816:viz <- ggplot(data=df, mapping=aes(x=variable))
1509881193337:viz
1509881201532:viz <- viz + labs(x=label)
1509881201533:viz <- viz + geom_histogram(binwidth=2, colour='black',
1509881201534:aes(y=..density.., fill=..count..))
1509881201540:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509881210288:label <- 'Salary'
1509881212498:viz <- viz + labs(x=label)
1509881212500:viz <- viz + geom_histogram(binwidth=2, colour='black',
1509881212500:aes(y=..density.., fill=..count..))
1509881212503:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509881221185:viz
1509882434380:qplot(salaries$salary)
1509882794729:gs <- ggplot(al.salaries, aes(x=al.salaries$salary))
1509882794733:gs <- gs + labs(x="Salary")
1509882794734:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1509882794735:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509882794736:gs <- gs + stat_function(fun=dnorm,
1509882794737:color="red",
1509882794737:args=list(mean=mean(al.salaries$salary, na.rm=TRUE),
1509882794738:sd=sd(al.salaries$salary, na.rm=TRUE)))
1509882794739:gs
1509882805748:describeBy(salaries$salary, group=salaries$lgID)
1509882805749:#Create data subsets for each league
1509882805749:al.salaries <- filter(salaries, lgID=='AL')
1509882805754:nl.salaries <- filter(salaries, lgID=='NL')
1509882814235:al.salaries <- filter(salaries, lgID=='AL')
1509882814243:nl.salaries <- filter(salaries, lgID=='NL')
1509882819681:gs <- ggplot(al.salaries, aes(x=al.salaries$salary))
1509882819682:gs <- gs + labs(x="Salary")
1509882819684:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1509882819686:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509882819688:gs <- gs + stat_function(fun=dnorm,
1509882819689:color="red",
1509882819690:args=list(mean=mean(al.salaries$salary, na.rm=TRUE),
1509882819692:sd=sd(al.salaries$salary, na.rm=TRUE)))
1509882827851:gs
1509882858875:gs <- ggplot(al.salaries, aes(x=al.salaries$salary))
1509882864100:gs <- gs + labs(x="Salary")
1509882868326:gs <- gs + geom_histogram(binwidth=2, colour="black", aes(y=..density.., fill=..count..))
1509882872805:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509882875393:gs
1509882902962:gs <- ggplot(al.salaries, aes(x=al.salaries$salary))
1509882902965:gs <- gs + labs(x="Salary")
1509882913383:gs <- gs + geom_histogram(binwidth=100000,
1509882913386:colour="black",
1509882913386:aes(y=..density.., fill=..count..))
1509882917158:gs
1509882943022:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509882945067:gs
1509882951972:gs <- gs + stat_function(fun=dnorm,
1509882951973:color="red",
1509882951973:args=list(mean=mean(al.salaries$salary, na.rm=TRUE),
1509882951974:sd=sd(al.salaries$salary, na.rm=TRUE)))
1509882954743:gs
1509882972143:gs <- ggplot(al.salaries, aes(x=al.salaries$salary))
1509882972146:gs <- gs + labs(x="Salary")
1509882972147:gs <- gs + geom_histogram(binwidth=1000000,
1509882972148:colour="black",
1509882972148:aes(y=..density.., fill=..count..))
1509882972150:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509882972151:gs <- gs + stat_function(fun=dnorm,
1509882972152:color="red",
1509882972152:args=list(mean=mean(al.salaries$salary, na.rm=TRUE),
1509882972152:sd=sd(al.salaries$salary, na.rm=TRUE)))
1509882972155:gs
1509883034085:gs <- ggplot(al.salaries, aes(x=nl.salaries$salary))
1509883034087:gs <- gs + labs(x="Salary")
1509883034088:gs <- gs + geom_histogram(binwidth=1000000,
1509883034088:colour="black",
1509883034089:aes(y=..density.., fill=..count..))
1509883034092:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509883034093:gs <- gs + stat_function(fun=dnorm,
1509883034093:color="red",
1509883034096:args=list(mean=mean(nl.salaries$salary, na.rm=TRUE),
1509883034097:sd=sd(nl.salaries$salary, na.rm=TRUE)))
1509883034101:gs
1509883052676:gs <- ggplot(nl.salaries, aes(x=nl.salaries$salary))
1509883052678:gs <- gs + labs(x="Salary")
1509883052682:gs <- gs + geom_histogram(binwidth=1000000,
1509883052682:colour="black",
1509883052683:aes(y=..density.., fill=..count..))
1509883052686:gs <- gs + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509883052688:gs <- gs + stat_function(fun=dnorm,
1509883052688:color="red",
1509883052689:args=list(mean=mean(nl.salaries$salary, na.rm=TRUE),
1509883052690:sd=sd(nl.salaries$salary, na.rm=TRUE)))
1509883052694:gs
1509883200253:# File to prepare the dataset into the required format for the rest of the
1509883200254:# analysis.
1509883200255:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509883200255:#
1509883200256:# This analysis looks to answer whether MLB players earn the most when they are
1509883200256:# performing at their respective peaks.
1509883200256:#
1509883200257:# The challenges involved are identifying at what age range the peak of MLB
1509883200257:# players fall, identifying whether there is a difference in the peak age range
1509883200257:# of hitters and that of pitchers.
1509883200258:#
1509883200258:# The analysis then tries to understand the relationship of salary with time.
1509883200258:# The salaries over the time are compared to identify if there is
1509883200259:# statistical evidence for a difference in the mean salaries over the decades.
1509883200259:#
1509883200259:# The analysis tries to study how the mean salaries for hitters and pitchers
1509883200260:# compare and if there is any difference between the salaries of the two
1509883200260:# groups.
1509883200260:#
1509883200261:# The study considers players who have played their entire career after
1509883200261:# 1980. One of the statistic most commonly used to judge the quality of a
1509883200261:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509883200262:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509883200263:# who has at least one 1000 outs pitched over their entire career has been
1509883200266:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509883200267:# to gauge the quality of a pitcher.
1509883200268:require(Lahman)
1509883200269:require(dplyr)
1509883200270:DropColumns <- function (df, unwanted.columns) {
1509883200271:# Drop columns of a data frame by names.
1509883200272:# Args:
1509883200272:#   df: The data frame to be modified.
1509883200273:#   unwanted.columns: Names of the columns to be dropped.
1509883200273:# Returns:
1509883200274:#   The data frame with unwanted columns dropped.
1509883200274:df <- df[, !colnames(df) %in% unwanted.columns]
1509883200275:return(df)
1509883200275:}
1509883200276:# getting the data on players who made their debut after 1980
1509883200277:players <- Master
1509883200278:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509883200279:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509883200281:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509883200283:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509883200285:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509883200286:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509883200293:# getting the data on Hitters
1509883200294:# a) 250+ PA per season over the career
1509883200294:# b) seasons after 1980
1509883200295:batting <- Batting
1509883200295:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509883200296:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509883200297:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509883200298:'OPS')
1509883200299:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509883200324:batting.stats <- battingStats(cbind=F)
1509883200496:batting <- inner_join(batting, batting.stats,
1509883200497:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509883200609:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509883200613:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509883200689:batting.summary <- subset(batting.summary, PA > 250)
1509883200690:hitters <- inner_join(players, batting.summary, by='playerID')
1509883200694:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509883200694:hitters <- inner_join(hitters, batting, by='playerID')
1509883200707:# getting the data on Pitchers
1509883200707:# a) 1000+ outs pitched over the career
1509883200708:# b) seasons after 1980
1509883200709:pitching <- Pitching
1509883200710:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509883200711:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509883200712:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509883200712:'GIDP')
1509883200715:pitching <- DropColumns(df=pitching,
1509883200716:unwanted.columns=unwanted.pitching.columns)
1509883200717:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509883200724:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509883200753:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509883200755:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509883200759:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509883200759:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509883200772:# Limiting the players considered to only those who feature in the top pitchers
1509883200772:# or top hitters.
1509883200774:playerIds <- sort(unique(append(hitters$playerID,
1509883200774:pitchers$playerID)))
1509883200777:players <- filter(players, playerID %in% playerIds)
1509883200787:salaries <- Salaries %>%
1509883200787:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509883200788:inner_join(players, by='playerID') %>%
1509883200789:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509883235947:write.csv(salaries, 'lahman_salaries.csv')
1509883306203:require(readr)
1509883306242:salaries <- read_csv('lahman_salaries.csv')
1509883310482:View(salaries)
1509883332009:require(readr)
1509883346408:write_csv(salaries, 'lahman_salaries.csv')
1509883355195:require(readr)
1509883355196:salaries <- read_csv('lahman_salaries.csv')
1509883395100:players <- Master
1509883395101:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509883395102:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509883395102:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509883395102:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509883395103:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509883395104:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509883395116:# getting the data on Hitters
1509883395117:# a) 250+ PA per season over the career
1509883395118:# b) seasons after 1980
1509883395118:batting <- Batting
1509883395119:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509883395119:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509883395120:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509883395121:'OPS')
1509883395122:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509883395138:batting.stats <- battingStats(cbind=F)
1509883395319:batting <- inner_join(batting, batting.stats,
1509883395319:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509883395425:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509883395425:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509883395486:batting.summary <- subset(batting.summary, PA > 250)
1509883395487:hitters <- inner_join(players, batting.summary, by='playerID')
1509883395491:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509883395492:hitters <- inner_join(hitters, batting, by='playerID')
1509883395506:# getting the data on Pitchers
1509883395506:# a) 1000+ outs pitched over the career
1509883395507:# b) seasons after 1980
1509883395508:pitching <- Pitching
1509883395510:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509883395511:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509883395512:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509883395513:'GIDP')
1509883395514:pitching <- DropColumns(df=pitching,
1509883395514:unwanted.columns=unwanted.pitching.columns)
1509883395517:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509883395527:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509883395555:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509883395556:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509883395562:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509883395563:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509883395571:# Limiting the players considered to only those who feature in the top pitchers
1509883395572:# or top hitters.
1509883395573:playerIds <- sort(unique(append(hitters$playerID,
1509883395573:pitchers$playerID)))
1509883395576:players <- filter(players, playerID %in% playerIds)
1509883395585:salaries <- Salaries %>%
1509883395585:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509883395586:inner_join(players, by='playerID') %>%
1509883395587:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509883395607:write_csv(salaries, 'lahman_salaries.csv')
1509883395680:describeBy(salaries$salary, group=salaries$lgID)
1509883415406:players <- Master
1509883415407:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509883415408:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509883415409:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509883415409:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509883415410:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509883415410:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509883415419:# getting the data on Hitters
1509883415420:# a) 250+ PA per season over the career
1509883415421:# b) seasons after 1980
1509883415421:batting <- Batting
1509883415422:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509883415423:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509883415424:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509883415425:'OPS')
1509883415427:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509883415442:batting.stats <- battingStats(cbind=F)
1509883415613:batting <- inner_join(batting, batting.stats,
1509883415614:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509883415726:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509883415727:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509883415789:batting.summary <- subset(batting.summary, PA > 250)
1509883415790:hitters <- inner_join(players, batting.summary, by='playerID')
1509883415793:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509883415794:hitters <- inner_join(hitters, batting, by='playerID')
1509883415806:# getting the data on Pitchers
1509883415807:# a) 1000+ outs pitched over the career
1509883415808:# b) seasons after 1980
1509883415808:pitching <- Pitching
1509883415811:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509883415811:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509883415813:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509883415813:'GIDP')
1509883415814:pitching <- DropColumns(df=pitching,
1509883415814:unwanted.columns=unwanted.pitching.columns)
1509883415815:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509883415827:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509883415858:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509883415859:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509883415863:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509883415864:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509883415878:# Limiting the players considered to only those who feature in the top pitchers
1509883415878:# or top hitters.
1509883415879:playerIds <- sort(unique(append(hitters$playerID,
1509883415880:pitchers$playerID)))
1509883415881:players <- filter(players, playerID %in% playerIds)
1509883415892:salaries <- Salaries %>%
1509883415892:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509883415894:inner_join(players, by='playerID') %>%
1509883415894:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509883415918:write_csv(salaries, 'lahman_salaries.csv')
1509883431598:DropColumns <- function (df, unwanted.columns) {
1509883431599:# Drop columns of a data frame by names.
1509883431600:# Args:
1509883431600:#   df: The data frame to be modified.
1509883431600:#   unwanted.columns: Names of the columns to be dropped.
1509883431601:# Returns:
1509883431601:#   The data frame with unwanted columns dropped.
1509883431601:df <- df[, !colnames(df) %in% unwanted.columns]
1509883431602:return(df)
1509883431602:}
1509883431603:# getting the data on players who made their debut after 1980
1509883431603:players <- Master
1509883431605:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509883431605:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509883431608:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509883431610:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509883431612:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509883431613:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509883431619:# getting the data on Hitters
1509883431620:# a) 250+ PA per season over the career
1509883431621:# b) seasons after 1980
1509883431621:batting <- Batting
1509883431625:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509883431626:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509883431627:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509883431628:'OPS')
1509883431629:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509883431645:batting.stats <- battingStats(cbind=F)
1509883431821:batting <- inner_join(batting, batting.stats,
1509883431822:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509883431934:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509883431938:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509883432004:batting.summary <- subset(batting.summary, PA > 250)
1509883432005:hitters <- inner_join(players, batting.summary, by='playerID')
1509883432008:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509883432009:hitters <- inner_join(hitters, batting, by='playerID')
1509883432021:# getting the data on Pitchers
1509883432022:# a) 1000+ outs pitched over the career
1509883432023:# b) seasons after 1980
1509883432024:pitching <- Pitching
1509883432025:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509883432025:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509883432027:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509883432027:'GIDP')
1509883432028:pitching <- DropColumns(df=pitching,
1509883432028:unwanted.columns=unwanted.pitching.columns)
1509883432029:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509883432034:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509883432062:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509883432064:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509883432068:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509883432069:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509883432081:# Limiting the players considered to only those who feature in the top pitchers
1509883432081:# or top hitters.
1509883432083:playerIds <- sort(unique(append(hitters$playerID,
1509883432083:pitchers$playerID)))
1509883432085:players <- filter(players, playerID %in% playerIds)
1509883432095:salaries <- Salaries %>%
1509883432095:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509883432096:inner_join(players, by='playerID') %>%
1509883432097:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509883432116:write_csv(salaries, 'lahman_salaries.csv')
1509883436811:salaries <- read_csv('lahman_salaries.csv')
1509883442285:require(readr)
1509883442286:salaries <- read_csv('lahman_salaries.csv')
1509884141350:library(pastecs) #For creating descriptive statistic summaries
1509884141352:library(ggplot2) #For creating histograms with more detail than plot
1509884141353:library(semTools) #For skewness and kurtosis
1509884141354:InspectScaleVariable <- function (variable, label, binwidth) {
1509884141355:# Basic summary stats of the variable
1509884141356:stat.desc(x=variable, basic=FALSE)
1509884141356:#skewness and kurtosis from semTools with standard error
1509884141357:print(skew(object=variable))
1509884141358:print(kurtosis(object=variable))
1509884141359:df <- as.data.frame(x=variable)
1509884141359:viz <- ggplot(data=df, mapping=aes(x=variable))
1509884141359:viz <- viz + labs(x=label)
1509884141360:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509884141360:aes(y=..density.., fill=..count..))
1509884141361:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509884141362:viz <- viz + stat_function(fun=dnorm,
1509884141364:color="red",
1509884141365:args=list(mean=mean(variable, na.rm=TRUE),
1509884141366:sd=sd(variable, na.rm=TRUE)))
1509884141367:qqnorm(variable)
1509884141368:qqline(variable, col=2)
1509884141369:print(viz)
1509884141370:}
1509884160252:InspectScaleVariable(salaries)
1509884175984:InspectScaleVariable(salaries, 'Salary', 1000000)
1509884204596:skew
1509884220381:InspectScaleVariable(salaries$salary, 'Salary', 1000000)
1509884304584:InspectScaleVariable <- function (variable, label, binwidth) {
1509884304584:# Basic summary stats of the variable
1509884304585:stat.desc(x=variable, basic=FALSE)
1509884304586:#skewness and kurtosis from semTools with standard error
1509884304586:print(skew(object=variable))
1509884304587:print(kurtosis(object=variable))
1509884304587:df <- as.data.frame(x=variable)
1509884304588:viz <- ggplot(data=df, mapping=aes(x=variable))
1509884304589:viz <- viz + labs(x=label, y="Frequency")
1509884304589:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509884304590:aes(y=..density.., fill=..count..))
1509884304590:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509884304591:viz <- viz + stat_function(fun=dnorm,
1509884304591:color="red",
1509884304591:args=list(mean=mean(variable, na.rm=TRUE),
1509884304592:sd=sd(variable, na.rm=TRUE)))
1509884304592:qqnorm(variable)
1509884304592:qqline(variable, col=2)
1509884304593:print(viz)
1509884304593:}
1509884309788:require(readr)
1509884309789:salaries <- read_csv('lahman_salaries.csv')
1509884309820:InspectScaleVariable(salaries$salary, 'Salary', 1000000)
1509884575591:axis(2,at=marks,labels=marks)
1509884613715:library(sfsmisc)
1509884631515:install.packages('sfsmisc')
1509884639014:library(sfsmisc)
1509884678402:options(scipen=5)
1509884681667:InspectScaleVariable(salaries$salary, 'Salary', 1000000)
1509884760195:InspectScaleVariable <- function (variable, label, binwidth) {
1509884760196:# Basic summary stats of the variable
1509884760197:stat.desc(x=variable, basic=FALSE)
1509884760198:#skewness and kurtosis from semTools with standard error
1509884760198:print(skew(object=variable))
1509884760199:print(kurtosis(object=variable))
1509884760200:df <- as.data.frame(x=variable)
1509884760200:viz <- ggplot(data=df, mapping=aes(x=variable))
1509884760201:viz <- viz + labs(x=label, y="Frequency")
1509884760202:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509884760202:aes(y=..density.., fill=..count..))
1509884760202:# viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509884760203:viz <- viz + stat_function(fun=dnorm,
1509884760203:color="red",
1509884760204:args=list(mean=mean(variable, na.rm=TRUE),
1509884760204:sd=sd(variable, na.rm=TRUE)))
1509884760204:qqnorm(variable)
1509884760205:qqline(variable, col=2)
1509884760205:print(viz)
1509884760206:}
1509884763506:InspectScaleVariable(salaries$salary, 'Salary', 1000000)
1509884855746:InspectScaleVariable <- function (variable, label, binwidth) {
1509884855747:# Basic summary stats of the variable
1509884855748:stat.desc(x=variable, basic=FALSE)
1509884855749:#skewness and kurtosis from semTools with standard error
1509884855750:print(skew(object=variable))
1509884855751:print(kurtosis(object=variable))
1509884855753:df <- as.data.frame(x=variable)
1509884855754:viz <- ggplot(data=df, mapping=aes(x=variable))
1509884855755:viz <- viz + labs(x=label, y="Frequency")
1509884855755:# viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509884855757:#                             aes(y=..density.., fill=..count..))
1509884855757:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509884855758:# viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509884855759:viz <- viz + stat_function(fun=dnorm,
1509884855760:color="red",
1509884855760:args=list(mean=mean(variable, na.rm=TRUE),
1509884855762:sd=sd(variable, na.rm=TRUE)))
1509884855762:qqnorm(variable)
1509884855763:qqline(variable, col=2)
1509884855764:print(viz)
1509884855765:}
1509884860708:InspectScaleVariable(salaries$salary, 'Salary', 1000000)
1509884905303:variable <- salaries$salary
1509884911241:label <- "Salary"
1509884920964:binwidth <- 1000000
1509884929987:df <- as.data.frame(x=variable)
1509884937584:viz <- ggplot(data=df, mapping=aes(x=variable))
1509884940244:viz <- viz + labs(x=label, y="Frequency")
1509884952067:viz
1509884959599:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509884962455:viz
1509884977613:viz <- viz + stat_function(fun=dnorm,
1509884977614:color="red",
1509884977615:args=list(mean=mean(variable, na.rm=TRUE),
1509884977615:sd=sd(variable, na.rm=TRUE)))
1509884979744:viz
1509884986657:df <- as.data.frame(x=variable)
1509884986660:viz <- ggplot(data=df, mapping=aes(x=variable))
1509884986662:viz <- viz + labs(x=label, y="Frequency")
1509885004812:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509885004812:aes(y=..density.., fill=..count..))
1509885016437:viz <- viz + stat_function(fun=dnorm,
1509885016440:color="red",
1509885016441:args=list(mean=mean(variable, na.rm=TRUE),
1509885016442:sd=sd(variable, na.rm=TRUE)))
1509885019100:viz
1509886728673:viz <- ggplot(data=df, mapping=aes(x=variable))
1509886734738:viz <- viz + labs(x=label, y="Frequency")
1509886741311:viz
1509886747653:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509886749343:viz
1509886758995:viz <- viz + stat_function(fun=dnorm,
1509886758995:color="red",
1509886758996:args=list(mean=mean(variable, na.rm=TRUE),
1509886758996:sd=sd(variable, na.rm=TRUE)))
1509886761012:viz
1509886783569:viz <- ggplot(data=df, mapping=aes(x=variable))
1509886783574:viz <- viz + labs(x=label, y="Frequency")
1509886793631:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509886793632:aes(y=..density..))
1509886800045:viz
1509886850184:?geom_histogram
1509886870616:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509886870617:aes(y=..density.., fill=..count..))
1509886876038:viz <- viz + stat_function(fun=dnorm,
1509886876040:color="red",
1509886876041:args=list(mean=mean(variable, na.rm=TRUE),
1509886876042:sd=sd(variable, na.rm=TRUE)))
1509886878001:viz
1509886903231:?aes
1509887116369:?stat_function
1509887178156:viz <- ggplot(data=df, mapping=aes(x=variable))
1509887178157:viz <- viz + labs(x=label, y="Frequency")
1509887179977:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509887183074:viz <- viz + stat_function(fun=dnorm,
1509887183075:color="red",
1509887183075:args=list(mean=mean(variable, na.rm=TRUE),
1509887183076:sd=sd(variable, na.rm=TRUE)),
1509887183076:inherit.aes = F)
1509887185869:viz
1509887207044:viz <- viz + stat_function(fun=dnorm,
1509887207045:color="red",
1509887207046:args=list(mean=mean(variable, na.rm=TRUE),
1509887207046:sd=sd(variable, na.rm=TRUE)),
1509887207046:aes(y=..density.., fill=..count..))
1509887219968:viz <- viz + stat_function(fun=dnorm,
1509887219969:color="red",
1509887219969:args=list(mean=mean(variable, na.rm=TRUE),
1509887219969:sd=sd(variable, na.rm=TRUE)),
1509887219970:aes(y=..density..))
1509887221859:viz
1509887249727:dnorm
1509887256006:?dnorm
1509887352490:dnorm(mean=mean(variable, na.rm=TRUE),
1509887352491:sd=sd(variable, na.rm=TRUE))
1509887364033:dnorm(x=1:5, mean=mean(variable, na.rm=TRUE),
1509887364034:sd=sd(variable, na.rm=TRUE))
1509887483529:viz <- ggplot(data=df, mapping=aes(x=variable))
1509887483530:viz <- viz + labs(x=label, y="Frequency")
1509887485801:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509887494757:viz <- viz + stat_function(fun=pnorm,
1509887494757:color="red",
1509887494758:args=list(mean=mean(variable, na.rm=TRUE),
1509887494759:sd=sd(variable, na.rm=TRUE)))
1509887497426:viz
1509888275051:viz <- ggplot(data=df, mapping=aes(x=variable))
1509888275056:viz <- viz + labs(x=label, y="Frequency")
1509888297816:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509888344736:viz <- viz + stat_function(fun=pnorm,
1509888344738:color="red",
1509888344738:args=list(x=variable, mean=mean(variable, na.rm=TRUE),
1509888344739:sd=sd(variable, na.rm=TRUE)))
1509888347421:viz
1509888386430:viz <- ggplot(data=df, mapping=aes(x=variable))
1509888386431:viz <- viz + labs(x=label, y="Frequency")
1509888388409:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509888393173:viz <- viz + stat_function(fun=dnorm,
1509888393173:color="red",
1509888393174:args=list(x=variable, mean=mean(variable, na.rm=TRUE),
1509888393174:sd=sd(variable, na.rm=TRUE)))
1509888400135:viz
1509888444190:df <- as.data.frame(x=variable)
1509888444191:viz <- ggplot(data=df, mapping=aes(x=variable))
1509888444192:viz <- viz + labs(x=label, y="Frequency")
1509888444195:#viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509888444196:#                           aes(y=..density.., fill=..count..))
1509888444197:viz <- viz + geom_histogram(binwidth=binwidth, colour='black')
1509888444199:# viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509888444200:viz <- viz + stat_function(fun=dnorm,
1509888444201:color="red",
1509888444202:args=list(x=df, mean=mean(variable, na.rm=TRUE),
1509888444203:sd=sd(variable, na.rm=TRUE)))
1509888447700:viz
1509888476752:InspectScaleVariable <- function (variable, label, binwidth) {
1509888476753:# Basic summary stats of the variable
1509888476754:stat.desc(x=variable, basic=FALSE)
1509888476756:#skewness and kurtosis from semTools with standard error
1509888476757:print(skew(object=variable))
1509888476758:print(kurtosis(object=variable))
1509888476759:df <- as.data.frame(x=variable)
1509888476760:viz <- ggplot(data=df, mapping=aes(x=variable))
1509888476761:viz <- viz + labs(x=label, y="Frequency")
1509888476762:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509888476763:aes(y=..density.., fill=..count..))
1509888476764:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509888476765:viz <- viz + stat_function(fun=dnorm,
1509888476766:color="red",
1509888476767:args=list(mean=mean(variable, na.rm=TRUE),
1509888476768:sd=sd(variable, na.rm=TRUE)))
1509888476768:qqnorm(variable)
1509888476769:qqline(variable, col=2)
1509888476769:print(viz)
1509888476770:}
1509888482066:InspectScaleVariable(salaries$salary, 'Salary', 1000000)
1509894636110:InspectScaleVariable(salaries$salary, 'Salary', 1000000)
1509894739803:require(psych)
1509894758763:describeBy(salaries$salary, group=salaries$lgID)
1509894912608:str(describeBy(salaries$salary, group=salaries$lgID))
1509894942662:describeBy(salaries$salary, group=salaries$lgID)
1509895790424:al.salaries <- subset(salaries, lgID=='AL')
1509895790428:nl.salaries <- subset(salaries, lgID=='NL')
1509895841790:al.salaries <- subset(salaries, lgID=='AL')
1509895841792:nl.salaries <- subset(salaries, lgID=='NL')
1509895844952:InspectScaleVariable(al.salaries$salary, 'Salary - American League', 1000000)
1509895844954:InspectScaleVariable(nl.salaries$salary, 'Salary - National League', 1000000)
1509895862679:skew
1509895902339:?skew
1509895912840:semTools::skew
1509895934935:InspectScaleVariable <- function (variable, label, binwidth) {
1509895934936:# Basic summary stats of the variable
1509895934937:stat.desc(x=variable, basic=FALSE)
1509895934937:#skewness and kurtosis from semTools with standard error
1509895934937:print(semTools::skew(object=variable))
1509895934938:print(semTools::kurtosis(object=variable))
1509895934939:df <- as.data.frame(x=variable)
1509895934939:viz <- ggplot(data=df, mapping=aes(x=variable))
1509895934941:viz <- viz + labs(x=label, y="Frequency")
1509895934942:viz <- viz + geom_histogram(binwidth=binwidth, colour='black',
1509895934943:aes(y=..density.., fill=..count..))
1509895934944:viz <- viz + scale_fill_gradient("Count", low="#DCDCDC", high="#7C7C7C")
1509895934945:viz <- viz + stat_function(fun=dnorm,
1509895934946:color="red",
1509895934947:args=list(mean=mean(variable, na.rm=TRUE),
1509895934948:sd=sd(variable, na.rm=TRUE)))
1509895934949:qqnorm(variable)
1509895934949:qqline(variable, col=2)
1509895934950:print(viz)
1509895934951:}
1509895949203:InspectScaleVariable(al.salaries$salary, 'Salary - American League', 1000000)
1509895949723:InspectScaleVariable(nl.salaries$salary, 'Salary - National League', 1000000)
1509896694832:wilcox.test(salary ~ lgID, data=salaries)
1509898539823:str(wilcox.test(salary ~ lgID, data=salaries))
1509898548683:wilcox.test(salary ~ lgID, data=salaries)
1509900701274:GroupA <- c(2,4,3,1,2,3,3,2,3,1)
1509900701277:GroupB <- c(3,5,4,2,4,3,5,5,3,2)
1509900706221:wilcox.test(GroupA, GroupB)
1509900713883:wilcox.test(GroupB, GroupA)
1509900733979:str(wilcox.test(salary ~ lgID, data=salaries))
1509912091351:# File to prepare the dataset into the required format for the rest of the
1509912091354:# analysis.
1509912091354:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509912091355:#
1509912091356:# This analysis looks to answer whether MLB players earn the most when they are
1509912091357:# performing at their respective peaks.
1509912091358:#
1509912091359:# The challenges involved are identifying at what age range the peak of MLB
1509912091360:# players fall, identifying whether there is a difference in the peak age range
1509912091360:# of hitters and that of pitchers.
1509912091360:#
1509912091361:# The analysis then tries to understand the relationship of salary with time.
1509912091361:# The salaries over the time are compared to identify if there is
1509912091362:# statistical evidence for a difference in the mean salaries over the decades.
1509912091363:#
1509912091365:# The analysis tries to study how the mean salaries for hitters and pitchers
1509912091367:# compare and if there is any difference between the salaries of the two
1509912091370:# groups.
1509912091371:#
1509912091372:# The study considers players who have played their entire career after
1509912091373:# 1980. One of the statistic most commonly used to judge the quality of a
1509912091374:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509912091374:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509912091375:# who has at least one 1000 outs pitched over their entire career has been
1509912091375:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509912091376:# to gauge the quality of a pitcher.
1509912091376:require(Lahman)
1509912091378:require(dplyr)
1509912091379:require(readr)
1509912091380:DropColumns <- function (df, unwanted.columns) {
1509912091381:# Drop columns of a data frame by names.
1509912091382:# Args:
1509912091383:#   df: The data frame to be modified.
1509912091384:#   unwanted.columns: Names of the columns to be dropped.
1509912091384:# Returns:
1509912091385:#   The data frame with unwanted columns dropped.
1509912091386:df <- df[, !colnames(df) %in% unwanted.columns]
1509912091388:return(df)
1509912091389:}
1509912091392:# getting the data on players who made their debut after 1980
1509912091392:players <- Master
1509912091394:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509912091395:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509912091396:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509912091399:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509912091402:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509912091405:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509912091427:# getting the data on Hitters
1509912091428:# a) 250+ PA per season over the career
1509912091429:# b) seasons after 1980
1509912091430:batting <- Batting
1509912091432:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509912091433:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509912091433:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509912091434:'OPS')
1509912091437:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509912091463:batting.stats <- battingStats(cbind=F)
1509912091669:batting <- inner_join(batting, batting.stats,
1509912091669:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509912091808:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509912091823:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509912091981:batting.summary <- subset(batting.summary, PA > 250)
1509912091983:hitters <- inner_join(players, batting.summary, by='playerID')
1509912091988:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509912091988:hitters <- inner_join(hitters, batting, by='playerID')
1509912092003:# getting the data on Pitchers
1509912092003:# a) 1000+ outs pitched over the career
1509912092004:# b) seasons after 1980
1509912092005:pitching <- Pitching
1509912092005:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509912092006:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509912092006:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509912092007:'GIDP')
1509912092007:pitching <- DropColumns(df=pitching,
1509912092008:unwanted.columns=unwanted.pitching.columns)
1509912092009:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509912092018:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509912092054:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509912092055:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509912092061:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509912092062:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509912143480:colnames(hitters)
1509912154405:colnames(pitchers)
1509912210760:inner_join(hitters, pitchers, by='playerID')
1509913825559:?cor.test
1509913841571:x = 1:5
1509913844959:y = 10:1
1509913850190:x = 1:10
1509913863970:cor.test(x, y, method='spearman')
1509913904108:x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
1509913907109:cor.test(x, y, method='spearman')
1509913925900:x = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 2)
1509913927693:cor.test(x, y, method='spearman')
1509913948192:x
1509913949281:y
1509913951758:cor.test(x, y, method='spearman')
1509915209660:colnames(hitters)
1509915213880:colnames(pitchers)
1509915332017:colnames(pitchers)[length(colnames(pitchers))]
1509915348801:colnames(pitchers)[length(colnames(pitchers))] = 'keyStat'
1509915354631:colnames(pitchers)
1509915376460:colnames(hitters)[length(colnames(hitters))] = 'keyStat'
1509915411063:hitters <- DropColumns(hitters, c('PA'))
1509915423963:pitchers <- DropColumns(pitchers, c('IPouts'))
1509915444543:hitters$type <- 'hitter'
1509915456404:pitchers$type <- 'pitcher'
1509915463321:head(hitters)
1509915470283:head(pitchers)
1509915556397:colnames(pitchers) == colnames(hitters)
1509915573253:c(1, 2, 3) == c(1, 3, 2)
1509915577441:c(1, 2, 3) == c(1, 2, 3)
1509915595930:final <- rbind(hitters, pitchers)
1509915693704:colnames(final)
1509915721869:final$statYear <- final$yearID
1509915743137:final$statYear <- final$statYear + 1
1509915746935:View(final)
1509915764369:final$statYear <- final$yearID
1509915800437:final$yearID <- final$yearID + 1
1509915837024:playerIds <- sort(unique(append(hitters$playerID,
1509915837026:pitchers$playerID)))
1509915837029:players <- filter(players, playerID %in% playerIds)
1509915837041:salaries <- Salaries %>%
1509915837043:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509915837044:inner_join(players, by='playerID') %>%
1509915837044:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509915852011:player.salaries <- inner_join(final, salaries, by='yearID')
1509915855653:View(player.salaries)
1509915870053:rm(player.salaries)
1509915923674:colnames(final)
1509915926685:colnames(salaries)
1509916046084:View(salaries)
1509916126987:player.salaries <- inner_join(final, salaries, by=c('yearID', 'playerID')
1509916131961:)
1509916138539:View(player.salaries)
1509916286261:salaries <- DropColumns(salaries, c('birthYear', 'birthMonth', 'bats',
1509916286262:'throws', 'debut', 'birthDate'))
1509916335509:final <- DropColumns(final, c('birthYear', 'birthMonth', 'bats',
1509916335510:'throws', 'debut', 'birthDate', 'age'))
1509916338462:player.salaries <- inner_join(final, salaries, by=c('yearID', 'playerID'))
1509916340521:View(player.salaries)
1509916379531:player.salaries <- inner_join(final, salaries, by=c('yearID', 'playerID', 'nameFirst', 'nameLast'))
1509916384098:View(player.salaries)
1509968128775:# Script to prepare the dataset into the required format for the rest of the
1509968128777:# analysis and hypotheses testing.
1509968128778:#
1509968128783:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509968128784:#
1509968128785:# This analysis attempts to analyse the salaries earned by MLB players after
1509968128786:# the year of 2000. (It is in the year 2000 that the two leagues American
1509968128787:# League and National League the leagues merged into a single organization)
1509968128788:#
1509968128789:# The analysis examines
1509968128789:# a) whether there is a statistically significant difference
1509968128791:# between the salaries in American League and those in National League.
1509968128793:# b) how the mean salaries for hitters and pitchers compare and if there is any
1509968128793:# difference between the salaries of the two groups.
1509968128794:# c) whether new salaries offered by teams to hitters are affected by their
1509968128795:# performance in the year prior to the offering of the contract.
1509968128798:# d) whether new salaries offered by teams to pitchers are affected by their
1509968128800:# performance in the year prior to the offering of the contract.
1509968128802:#
1509968128803:# The study considers players who have signed at least a contract after 2000.
1509968128803:#
1509968128804:# One of the statistic most commonly used to judge the quality of a
1509968128804:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509968128805:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509968128805:# who has at least one 1000 outs pitched over their entire career has been
1509968128806:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509968128806:# to gauge the quality of a pitcher.
1509968128807:require(Lahman)
1509968128812:require(dplyr)
1509968128814:require(readr)
1509968128816:DropColumns <- function (df, unwanted.columns) {
1509968128817:# Drop columns of a data frame by names.
1509968128817:# Args:
1509968128818:#   df: The data frame to be modified.
1509968128819:#   unwanted.columns: Names of the columns to be dropped.
1509968128820:# Returns:
1509968128821:#   The data frame with unwanted columns dropped.
1509968128821:df <- df[, !colnames(df) %in% unwanted.columns]
1509968128823:return(df)
1509968128824:}
1509968128838:# getting the data on players who made their debut after 1980
1509968128839:players <- Master
1509968128841:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509968128842:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509968128845:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509968128850:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509968128858:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509968128860:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509968128923:# getting the data on Hitters
1509968128924:# a) 250+ PA per season over the career
1509968128925:# b) seasons after 1980
1509968128925:batting <- Batting
1509968128928:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509968128931:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509968128932:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509968128933:'OPS')
1509968128941:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509968128996:batting.stats <- battingStats(cbind=F)
1509968129294:batting <- inner_join(batting, batting.stats,
1509968129295:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509968129486:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509968129507:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509968129776:batting.summary <- subset(batting.summary, PA > 250)
1509968129777:hitters <- inner_join(players, batting.summary, by='playerID')
1509968129785:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509968129786:hitters <- inner_join(hitters, batting, by='playerID')
1509968129812:# getting the data on Pitchers
1509968129812:# a) 1000+ outs pitched over the career
1509968129813:# b) seasons after 1980
1509968129815:pitching <- Pitching
1509968129816:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509968129818:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509968129819:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509968129820:'GIDP')
1509968129822:pitching <- DropColumns(df=pitching,
1509968129822:unwanted.columns=unwanted.pitching.columns)
1509968129824:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509968129837:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509968129892:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509968129893:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509968129899:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509968129901:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509968129917:# Limiting the players considered to only those who feature in the top pitchers
1509968129917:# or top hitters.
1509968129918:playerIds <- sort(unique(append(hitters$playerID,
1509968129919:pitchers$playerID)))
1509968129922:players <- filter(players, playerID %in% playerIds)
1509968129939:salaries <- Salaries %>%
1509968129940:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509968129940:inner_join(players, by='playerID') %>%
1509968129941:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509968129982:# Write out the salaries data frame.
1509968129984:# This can be used for testing the first hypothesis.
1509968129984:# write_csv(salaries, 'lahman_salaries.csv')
1509968129986:colnames(hitters)[length(colnames(hitters))] = 'keyStat'
1509968129987:hitters <- DropColumns(hitters, c('PA'))
1509968129987:hitters$type <- 'hitter'
1509968129991:colnames(pitchers)[length(colnames(pitchers))] = 'keyStat'
1509968129992:pitchers <- DropColumns(pitchers, c('IPouts'))
1509968129993:pitchers$type <- 'pitcher'
1509968129994:final <- rbind(hitters, pitchers)
1509968130008:final$statYear <- final$yearID
1509968130009:final$yearID <- final$yearID + 1
1509968130010:salaries <- DropColumns(salaries, c('birthYear', 'birthMonth', 'bats',
1509968130011:'throws', 'debut', 'birthDate'))
1509968130012:final <- DropColumns(final, c('birthYear', 'birthMonth', 'bats',
1509968130013:'throws', 'debut', 'birthDate', 'age'))
1509968130015:player.salaries <- inner_join(final, salaries, by=c('yearID', 'playerID',
1509968130016:'nameFirst', 'nameLast'))
1509968130038:# Write out the player.salaries data frame.
1509968130038:# This can be used for testing the last three hypotheses.
1509968130040:# write_csv(player.salaries, 'lahman_player_salaries.csv')
1509968165867:View(salaries)
1509968178450:View(player.salaries)
1509969049646:player.salaries <- read_csv('lahman_player_salaries.csv')
1509969072213:# Script to prepare the dataset into the required format for the rest of the
1509969072213:# analysis and hypotheses testing.
1509969072214:#
1509969072214:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509969072215:#
1509969072216:# This analysis attempts to analyse the salaries earned by MLB players after
1509969072217:# the year of 2000. (It is in the year 2000 that the two leagues American
1509969072218:# League and National League the leagues merged into a single organization)
1509969072219:#
1509969072220:# The analysis examines
1509969072221:# a) whether there is a statistically significant difference
1509969072221:# between the salaries in American League and those in National League.
1509969072222:# b) how the mean salaries for hitters and pitchers compare and if there is any
1509969072223:# difference between the salaries of the two groups.
1509969072223:# c) whether new salaries offered by teams to hitters are affected by their
1509969072224:# performance in the year prior to the offering of the contract.
1509969072225:# d) whether new salaries offered by teams to pitchers are affected by their
1509969072226:# performance in the year prior to the offering of the contract.
1509969072227:#
1509969072227:# The study considers players who have signed at least a contract after 2000.
1509969072229:#
1509969072229:# One of the statistic most commonly used to judge the quality of a
1509969072231:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509969072231:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509969072233:# who has at least one 1000 outs pitched over their entire career has been
1509969072235:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509969072236:# to gauge the quality of a pitcher.
1509969072237:require(Lahman)
1509969072238:require(dplyr)
1509969072239:require(readr)
1509969072240:DropColumns <- function (df, unwanted.columns) {
1509969072241:# Drop columns of a data frame by names.
1509969072241:# Args:
1509969072242:#   df: The data frame to be modified.
1509969072242:#   unwanted.columns: Names of the columns to be dropped.
1509969072243:# Returns:
1509969072244:#   The data frame with unwanted columns dropped.
1509969072245:df <- df[, !colnames(df) %in% unwanted.columns]
1509969072246:return(df)
1509969072247:}
1509969072248:# getting the data on players who made their debut after 1980
1509969072249:players <- Master
1509969072250:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509969072250:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509969072252:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509969072252:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509969072254:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509969072254:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509969072265:# getting the data on Hitters
1509969072266:# a) 250+ PA per season over the career
1509969072267:# b) seasons after 1980
1509969072269:batting <- Batting
1509969072272:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509969072273:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509969072273:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509969072274:'OPS')
1509969072276:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509969072302:batting.stats <- battingStats(cbind=F)
1509969072551:batting <- inner_join(batting, batting.stats,
1509969072552:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509969072681:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509969072691:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509969072800:batting.summary <- subset(batting.summary, PA > 250)
1509969072801:hitters <- inner_join(players, batting.summary, by='playerID')
1509969072804:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509969072806:hitters <- inner_join(hitters, batting, by='playerID')
1509969072821:# getting the data on Pitchers
1509969072821:# a) 1000+ outs pitched over the career
1509969072822:# b) seasons after 1980
1509969072823:pitching <- Pitching
1509969072825:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509969072825:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509969072826:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509969072827:'GIDP')
1509969072828:pitching <- DropColumns(df=pitching,
1509969072829:unwanted.columns=unwanted.pitching.columns)
1509969072830:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509969072840:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509969072876:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509969072877:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509969072886:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509969072887:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509969072896:# Limiting the players considered to only those who feature in the top pitchers
1509969072897:# or top hitters.
1509969072898:playerIds <- sort(unique(append(hitters$playerID,
1509969072898:pitchers$playerID)))
1509969072902:players <- filter(players, playerID %in% playerIds)
1509969072912:salaries <- Salaries %>%
1509969072913:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509969072914:inner_join(players, by='playerID') %>%
1509969072914:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509969072946:# Write out the salaries data frame.
1509969072946:# This can be used for testing the first hypothesis.
1509969072947:# write_csv(salaries, 'lahman_salaries.csv')
1509969072948:colnames(hitters)[length(colnames(hitters))] = 'keyStat'
1509969072948:hitters <- DropColumns(hitters, c('PA'))
1509969072950:hitters$type <- 'hitter'
1509969072950:colnames(pitchers)[length(colnames(pitchers))] = 'keyStat'
1509969072951:pitchers <- DropColumns(pitchers, c('IPouts'))
1509969072952:pitchers$type <- 'pitcher'
1509969072954:final <- rbind(hitters, pitchers)
1509969072965:final$statYear <- final$yearID
1509969072966:final$yearID <- final$yearID + 1
1509969072967:salaries <- DropColumns(salaries, c('birthYear', 'birthMonth', 'bats',
1509969072967:'throws', 'debut', 'birthDate'))
1509969072969:final <- DropColumns(final, c('birthYear', 'birthMonth', 'bats',
1509969072969:'throws', 'debut', 'birthDate', 'age'))
1509969072972:player.salaries <- inner_join(final, salaries, by=c('yearID', 'playerID',
1509969072972:'nameFirst', 'nameLast'))
1509969072983:# Write out the player.salaries data frame.
1509969072983:# This can be used for testing the last three hypotheses.
1509969072984:write_csv(player.salaries, 'lahman_player_salaries.csv')
1509969080753:player.salaries <- read_csv('lahman_player_salaries.csv')
1509969226144:source('stat_report.r')
1509969286411:colnames(player.salaries)
1509969308542:hitter.salaries <- subset(player.salaries, type=='hitter')
1509969327513:pitcher.salaries <- subset(player.salaries, type=='pitcher')
1509969376263:View(hitter.salaries)
1509969398887:qplot(salary, yearID)
1509969406519:qplot(salary, yearID, data=hitter.salaries)
1509969422768:qplot(yearID, salary, data=hitter.salaries)
1509969458362:qplot(yearID, salary, data=hitter.salaries, geom='smooth')
1509969580232:sum(hitter.salaries$yearID==2016)
1509969583049:sum(hitter.salaries$yearID==2017)
1509969585642:sum(hitter.salaries$yearID==2015)
1509969587953:sum(hitter.salaries$yearID==2014)
1509969590013:sum(hitter.salaries$yearID==2013)
1509969618678:qplot(yearID, keyStat, data=hitter.salaries, geom='smooth')
1509969631898:qplot(yearID, keyStat, data=hitter.salaries, geom='point')
1509969707680:InspectScaleVariable(hitter.salaries$salary)
1509969718025:InspectScaleVariable(hitter.salaries$salary, "Hitter salary", 1000000)
1509969760858:hitter.salaries.2016 <- subset(hitter.salaries, yearID==2016)
1509969786787:InspectScaleVariable(hitter.salaries.2016$salary)
1509969799035:InspectScaleVariable(hitter.salaries.2016$salary, "Hitter salaries for 2016", 1000000)
1509969843417:salaries.2016 <- subset(Salaries, yearID==2016)
1509969872083:InspectScaleVariable(salaries.2016$salary, "Hitter salaries for 2016", 1000000)
1509969953205:# Script to prepare the dataset into the required format for the rest of the
1509969953206:# analysis and hypotheses testing.
1509969953207:#
1509969953207:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509969953208:#
1509969953208:# This analysis attempts to analyse the salaries earned by MLB players after
1509969953209:# the year of 2000. (It is in the year 2000 that the two leagues American
1509969953210:# League and National League the leagues merged into a single organization)
1509969953211:#
1509969953212:# The analysis examines
1509969953213:# a) whether there is a statistically significant difference
1509969953213:# between the salaries in American League and those in National League.
1509969953215:# b) how the mean salaries for hitters and pitchers compare and if there is any
1509969953215:# difference between the salaries of the two groups.
1509969953216:# c) whether new salaries offered by teams to hitters are affected by their
1509969953217:# performance in the year prior to the offering of the contract.
1509969953218:# d) whether new salaries offered by teams to pitchers are affected by their
1509969953219:# performance in the year prior to the offering of the contract.
1509969953220:#
1509969953221:# The study considers players who have signed at least a contract after 2000.
1509969953222:#
1509969953222:# One of the statistic most commonly used to judge the quality of a
1509969953223:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509969953223:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509969953223:# who has at least one 1000 outs pitched over their entire career has been
1509969953224:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509969953226:# to gauge the quality of a pitcher.
1509969953229:require(Lahman)
1509969953230:require(dplyr)
1509969953231:require(readr)
1509969953232:DropColumns <- function (df, unwanted.columns) {
1509969953234:# Drop columns of a data frame by names.
1509969953234:# Args:
1509969953236:#   df: The data frame to be modified.
1509969953237:#   unwanted.columns: Names of the columns to be dropped.
1509969953237:# Returns:
1509969953238:#   The data frame with unwanted columns dropped.
1509969953239:df <- df[, !colnames(df) %in% unwanted.columns]
1509969953240:return(df)
1509969953241:}
1509969953242:# getting the data on players who made their debut after 1980
1509969953242:players <- Master
1509969953243:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509969953243:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509969953245:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509969953245:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509969953246:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509969953247:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509969953254:# getting the data on Hitters
1509969953255:# a) 250+ PA per season over the career
1509969953256:# b) seasons after 1980
1509969953256:batting <- Batting
1509969953258:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509969953259:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509969953261:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509969953263:'OPS')
1509969953265:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509969953282:batting.stats <- battingStats(cbind=F)
1509969953452:batting <- inner_join(batting, batting.stats,
1509969953452:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509969953568:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509969953571:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509969953631:batting.summary <- subset(batting.summary, PA > 250)
1509969953632:hitters <- inner_join(players, batting.summary, by='playerID')
1509969953635:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509969953635:hitters <- inner_join(hitters, batting, by='playerID')
1509969953648:# getting the data on Pitchers
1509969953648:# a) 1000+ outs pitched over the career
1509969953649:# b) seasons after 1980
1509969953650:pitching <- Pitching
1509969953650:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509969953651:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509969953652:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509969953652:'GIDP')
1509969953653:pitching <- DropColumns(df=pitching,
1509969953653:unwanted.columns=unwanted.pitching.columns)
1509969953655:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509969953663:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509969953691:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509969953692:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509969953700:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509969953701:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509969953716:# Limiting the players considered to only those who feature in the top pitchers
1509969953717:# or top hitters.
1509969953718:playerIds <- sort(unique(append(hitters$playerID,
1509969953719:pitchers$playerID)))
1509969953721:players <- filter(players, playerID %in% playerIds)
1509969953730:salaries <- Salaries %>%
1509969953730:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509969953731:inner_join(players, by='playerID') %>%
1509969953732:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509969953752:# Write out the salaries data frame.
1509969953753:# This can be used for testing the first hypothesis.
1509969953754:# write_csv(salaries, 'lahman_salaries.csv')
1509969953754:colnames(hitters)[length(colnames(hitters))] = 'keyStat'
1509969953757:hitters <- DropColumns(hitters, c('PA'))
1509969953758:hitters$type <- 'hitter'
1509969953759:colnames(pitchers)[length(colnames(pitchers))] = 'keyStat'
1509969953761:pitchers <- DropColumns(pitchers, c('IPouts'))
1509969953762:pitchers$type <- 'pitcher'
1509969953764:final <- rbind(hitters, pitchers)
1509969953770:final$statYear <- final$yearID
1509969953771:final$yearID <- final$yearID + 1
1509969953772:salaries <- DropColumns(salaries, c('birthYear', 'birthMonth', 'bats',
1509969953773:'throws', 'debut', 'birthDate'))
1509969953774:final <- DropColumns(final, c('birthYear', 'birthMonth', 'bats',
1509969953775:'throws', 'debut', 'birthDate', 'age'))
1509969953777:player.salaries <- inner_join(final, salaries, by=c('yearID', 'playerID',
1509969953778:'nameFirst', 'nameLast'))
1509969953788:# Write out the player.salaries data frame.
1509969953790:# This can be used for testing the last three hypotheses.
1509969953790:# write_csv(player.salaries, 'lahman_player_salaries.csv')
1509969962892:View(player.salaries)
1509970073121:RenameColumns <- function (df, old.names, new.names) {
1509970073123:# Renames column names of a data frame as needed.
1509970073124:# Args:
1509970073124:#   df: The data frame to be modified.
1509970073125:#   old.names: The column names to be altered.
1509970073126:#   new.names: The new column names.
1509970073126:# Returns:
1509970073127:#   The data frame with column names modified.
1509970073129:for (index in 1:length(old.names)) {
1509970073130:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1509970073131:}
1509970073131:return(df)
1509970073132:}
1509970296327:old.player.salaries.fields <- c('yearID', 'teamID.x', 'lgID.x', 'teamID.y',
1509970296331:'lgID.y')
1509970296331:new.player.salaries.fields <- c('salaryYear', 'statTeam', 'statLg',
1509970296332:'salaryTeam', 'salaryLg')
1509970296333:player.salaries <- RenameColumns(player.salaries,
1509970296334:old.player.salaries.fields,
1509970302013:View(player.salaries)
1509970324759:;
1509970329073:player.salaries <- RenameColumns(player.salaries,
1509970329076:old.player.salaries.fields,
1509970329076:new.player.salaries.fields)
1509973814130:qplot(yearID, keyStat, data=hitter.salaries, geom='point')
1509973825834:# Script to prepare the dataset into the required format for the rest of the
1509973825840:# analysis and hypotheses testing.
1509973825841:#
1509973825842:# The dataset is the Sean Lahman database bundled as an R package as 'Lahman'
1509973825843:#
1509973825844:# This analysis attempts to analyse the salaries earned by MLB players after
1509973825845:# the year of 2000. (It is in the year 2000 that the two leagues American
1509973825846:# League and National League the leagues merged into a single organization)
1509973825846:#
1509973825847:# The analysis examines
1509973825848:# a) whether there is a statistically significant difference
1509973825849:# between the salaries in American League and those in National League.
1509973825849:# b) how the mean salaries for hitters and pitchers compare and if there is any
1509973825850:# difference between the salaries of the two groups.
1509973825850:# c) whether new salaries offered by teams to hitters are affected by their
1509973825851:# performance in the year prior to the offering of the contract.
1509973825851:# d) whether new salaries offered by teams to pitchers are affected by their
1509973825851:# performance in the year prior to the offering of the contract.
1509973825852:#
1509973825852:# The study considers players who have signed at least a contract after 2000.
1509973825852:#
1509973825853:# One of the statistic most commonly used to judge the quality of a
1509973825853:# hitter is BABIP(Batting Average on Balls In Play). The study considers
1509973825853:# hitters with mean of 250 Plate Appearances or more per season. Any pitcher
1509973825854:# who has at least one 1000 outs pitched over their entire career has been
1509973825854:# included for the study. ERA(Earned Runs Average) will be the statistic used
1509973825855:# to gauge the quality of a pitcher.
1509973825858:require(Lahman)
1509973825860:require(dplyr)
1509973825861:require(readr)
1509973825863:DropColumns <- function (df, unwanted.columns) {
1509973825864:# Drop columns of a data frame by names.
1509973825865:# Args:
1509973825865:#   df: The data frame to be modified.
1509973825866:#   unwanted.columns: Names of the columns to be dropped.
1509973825867:# Returns:
1509973825868:#   The data frame with unwanted columns dropped.
1509973825869:df <- df[, !colnames(df) %in% unwanted.columns]
1509973825870:return(df)
1509973825870:}
1509973825871:RenameColumns <- function (df, old.names, new.names) {
1509973825872:# Renames column names of a data frame as needed.
1509973825873:# Args:
1509973825873:#   df: The data frame to be modified.
1509973825874:#   old.names: The column names to be altered.
1509973825874:#   new.names: The new column names.
1509973825875:# Returns:
1509973825875:#   The data frame with column names modified.
1509973825875:for (index in 1:length(old.names)) {
1509973825876:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1509973825876:}
1509973825878:return(df)
1509973825879:}
1509973825880:# getting the data on players who made their debut after 1980
1509973825881:players <- Master
1509973825881:unwanted.columns <- c('birthDay', 'birthCountry','birthState', 'deathYear',
1509973825882:'deathMonth', 'deathDay', 'deathCountry', 'deathState',
1509973825882:'birthCity', 'deathCity', 'nameGiven', 'finalGame',
1509973825883:'retroID', 'bbrefID', 'deathDate', 'weight', 'height')
1509973825883:players <- DropColumns(df=players, unwanted.columns=unwanted.columns)
1509973825884:players <- subset(players, as.integer(substr(debut, 1, 4)) > 2000)
1509973825895:# getting the data on Hitters
1509973825896:# a) 250+ PA per season over the career
1509973825897:# b) seasons after 1980
1509973825897:batting <- Batting
1509973825898:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1509973825900:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1509973825900:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1509973825901:'OPS')
1509973825902:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1509973825922:batting.stats <- battingStats(cbind=F)
1509973826267:batting <- inner_join(batting, batting.stats,
1509973826267:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1509973826391:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1509973826395:batting.summary <- aggregate(PA ~ playerID, batting, mean)
1509973826460:batting.summary <- subset(batting.summary, PA > 250)
1509973826461:hitters <- inner_join(players, batting.summary, by='playerID')
1509973826464:hitters <- DropColumns(df=hitters, unwanted.columns=c('PA'))
1509973826464:hitters <- inner_join(hitters, batting, by='playerID')
1509973826476:# getting the data on Pitchers
1509973826477:# a) 1000+ outs pitched over the career
1509973826478:# b) seasons after 1980
1509973826478:pitching <- Pitching
1509973826480:unwanted.pitching.columns <- c('W', 'L', 'G', 'GS', 'CG', 'SHO', 'SV', 'H',
1509973826480:'ER', 'HR', 'BB', 'SO', 'BAOpp', 'IBB', 'WP',
1509973826482:'HBP', 'BK', 'BFP', 'GF', 'R', 'SH', 'SF',
1509973826482:'GIDP')
1509973826483:pitching <- DropColumns(df=pitching,
1509973826483:unwanted.columns=unwanted.pitching.columns)
1509973826485:pitching <- subset(pitching, lgID %in% c('AL', 'NL') & yearID > 1999)
1509973826492:pitching.summary <- aggregate(IPouts ~ playerID, pitching, sum)
1509973826519:pitching.summary <- subset(pitching.summary, IPouts > 1000)
1509973826520:pitchers <- inner_join(players, pitching.summary, by='playerID')
1509973826526:pitchers <- DropColumns(df=pitchers, unwanted.columns=c('IPouts'))
1509973826527:pitchers <- inner_join(pitchers, pitching, by='playerID')
1509973826534:# Limiting the players considered to only those who feature in the top pitchers
1509973826535:# or top hitters.
1509973826536:playerIds <- sort(unique(append(hitters$playerID,
1509973826536:pitchers$playerID)))
1509973826537:players <- filter(players, playerID %in% playerIds)
1509973826544:salaries <- Salaries %>%
1509973826544:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1509973826545:inner_join(players, by='playerID') %>%
1509973826546:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1509973826561:# Write out the salaries data frame.
1509973826562:# This can be used for testing the first hypothesis.
1509973826563:write_csv(salaries, 'lahman_salaries.csv')
1509973826612:colnames(hitters)[length(colnames(hitters))] = 'keyStat'
1509973826612:hitters <- DropColumns(hitters, c('PA'))
1509973826614:hitters$type <- 'hitter'
1509973826614:colnames(pitchers)[length(colnames(pitchers))] = 'keyStat'
1509973826615:pitchers <- DropColumns(pitchers, c('IPouts'))
1509973826616:pitchers$type <- 'pitcher'
1509973826617:final <- rbind(hitters, pitchers)
1509973826622:final$statYear <- final$yearID
1509973826623:final$yearID <- final$yearID + 1
1509973826624:salaries <- DropColumns(salaries, c('birthYear', 'birthMonth', 'bats',
1509973826625:'throws', 'debut', 'birthDate'))
1509973826626:final <- DropColumns(final, c('birthYear', 'birthMonth', 'bats',
1509973826627:'throws', 'debut', 'birthDate', 'age'))
1509973826628:player.salaries <- inner_join(final, salaries, by=c('yearID', 'playerID',
1509973826629:'nameFirst', 'nameLast'))
1509973826639:old.player.salaries.fields <- c('yearID', 'teamID.x', 'lgID.x', 'teamID.y',
1509973826639:'lgID.y')
1509973826641:new.player.salaries.fields <- c('salaryYear', 'statTeam', 'statLg',
1509973826642:'salaryTeam', 'salaryLg')
1509973826643:player.salaries <- RenameColumns(player.salaries,
1509973826644:old.player.salaries.fields,
1509973826645:new.player.salaries.fields)
1509973826652:# Write out the player.salaries data frame.
1509973826653:# This can be used for testing the last three hypotheses.
1509973826654:write_csv(player.salaries, 'lahman_player_salaries.csv')
1509973866775:player.salaries <- read_csv('lahman_player_salaries.csv')
1509973866799:hitter.salaries <- subset(player.salaries, type=='hitter')
1509973866801:pitcher.salaries <- subset(player.salaries, type=='pitcher')
1509974459875:qplot(yearID, keyStat, data=hitter.salaries, geom='point')
1509974474960:qplot(salaryYear, keyStat, data=hitter.salaries, geom='point')
1509974507630:sum(hitter.salaries$salaryYear)
1509974512437:sum(hitter.salaries$keyStat)
1509974662455:View(subset(hitter.salaries, is.na(keyStat)))
1509974984311:require(psych)
1509975063000:describeBy(hitter.salaries$salary, group=hitter.salaries$salaryYear)
1509975322632:qplot(keyStat, salary, data=hitter.salaries, geom='point')
1509975365859:qplot(keyStat, salary, data=hitter.salaries, geom='point', colour=statYear)
1509975629434:qplot(keyStat, salary, data=hitter.salaries, geom='point') + facet_grid(. ~ statYear)
1509975644750:qplot(keyStat, salary, data=hitter.salaries, geom='point') + facet_wrap(. ~ statYear)
1509975652926:qplot(keyStat, salary, data=hitter.salaries, geom='point') + facet_wrap(~statYear)
1509975690106:qplot(keyStat, salary, data=pitcher.salaries, geom='point') + facet_wrap(~statYear)
1509976163539:colnames(Fielding)
1509977248945:salaries.2017 <- filter(Salaries, yearID==2016)
1509977258438:hist(salaries.2017$salary)
1509977310174:source('stat_report.r')
1509977338042:InspectScaleVariable(salaries.2017$salary, "Salaries for 2016", 1000000)
1509977386081:?skew
1509977411603:semTools::skew(salaries.2017$salary)
1509977416346:InspectScaleVariable(salaries.2017$salary, "Salaries for 2016", 1000000)
1509977421471:str(semTools::skew(salaries.2017$salary)
1509977424081:)
1509977450796:qqnorm(salaries.2017$salary)
1509977463728:qqline(salaries.2017, col=2)
1509977486040:qqline(salaries.2017$salary, col=2)
1509977505981:nrow(salaries.2017)
1509977624497:source('stat_report.r')
1509977624501:require(readr)
1509977624502:# Hypothesis 1
1509977624503:# salaries <- read_csv('lahman_salaries.csv')
1509977624503:# al.salaries <- subset(salaries, lgID=='AL')
1509977624505:# nl.salaries <- subset(salaries, lgID=='NL')
1509977624506:# InspectScaleVariable(al.salaries$salary, 'Salary - American League', 1000000)
1509977624508:# InspectScaleVariable(nl.salaries$salary, 'Salary - National League', 1000000)
1509977624509:# wilcox.test(salary ~ lgID, data=salaries)
1509977624510:player.salaries <- read_csv('lahman_player_salaries.csv')
1509977624536:hitter.salaries.2016 <- subset(player.salaries, type=='hitter',
1509977624536:salaryYear==2016)
1509977624540:pitcher.salaries.2016 <- subset(player.salaries, type=='pitcher',
1509977624542:salaryYear==2016)
1509977638455:View(pitcher.salaries.2016)
1509977640643:View(hitter.salaries.2016)
1509977641858:View(hitter.salaries.2016)
1509977642827:View(pitcher.salaries.2016)
1509977645518:View(player.salaries)
1509977648591:View(pitcher.salaries.2016)
1509977685018:hitter.salaries.2016 <- subset(player.salaries,
1509977685019:type=='hitter' & salaryYear==2016)
1509977685021:pitcher.salaries.2016 <- subset(player.salaries,
1509977685022:type=='pitcher' & salaryYear==2016)
1509977783019:InspectScaleVariable(hitter.salaries.2016$salary)
1509977857851:InspectScaleVariable(hitter.salaries.2016$salary, label='Hitter salaries for 2016', 1000000)
1509977896999:InspectScaleVariable(hitter.salaries.2016$keyStat, label='Hitter salaries for 2016', 1000000)
1509977908593:InspectScaleVariable(hitter.salaries.2016$keyStat, label='Hitter salaries for 2016', 2)
1509977915786:InspectScaleVariable(hitter.salaries.2016$keyStat, label='Hitter salaries for 2016', 0.1)
1509977927489:InspectScaleVariable(hitter.salaries.2016$keyStat, label='Hitter salaries for 2016', 0.01)
1509977964020:qqnorm(hitter.salaries.2016$keyStat)
1509977972561:qqline(hitter.salaries.2016$keyStat, col=2)
1509977983053:qqline(hitter.salaries.2016$salary, col=2)
1509977991104:qqnorm(hitter.salaries.2016$salary)
1509977994310:qqline(hitter.salaries.2016$salary, col=2)
1509978009200:qqnorm(pitcher.salaries.2016$keyStat)
1509978021057:qqline(pitcher.salaries.2016$salary, col=2)
1509978030447:qqline(pitcher.salaries.2016$keyStat, col=2)
1509983261434:View(Teams)
1509983269885:teams <- Teams
1509983289628:teams <- filter(Teams, yearID==2016)
1509983291070:teams
1509983295003:View(teams)
1509983308966:View(teams)
1509983322575:View(teams)
1509983398517:str(teams$ligID)
1509983401788:str(teams$lgID)
1509987687185:Head(Salaries)
1509987692148:head(Salaries)
1509987700707:View(Salaries)
1509991423153:summary(Salaries$yearID)
1509991437283:Salaries$yearID
1509991444955:unique(Salaries$yearID)
1509991485987:maxSal <- Salaries %>%
1509991485990:group_by(yearID) %>%
1509991485991:filter(salary == max(salary))
1509991488492:maxSal
1509991503247:tail(maxSal)
1509991526918:maxPlayers <- bind_rows(lapply(maxSal$playerID, playerInfo)) %>%
1509991526919:select(-playerID)
1509991535133:maxSal <- bind_cols(maxPlayers, maxSal)
1509991544018:maxSal
1509991633916:View(subset(Salaries, playerID=='rodrial01'))
1509991900273:qplot(keyStat, salary, data=hitter.salaries, geom='point') + facet_wrap(~statYear)
1509991948769:player.salaries <- read_csv('lahman_player_salaries.csv')
1509991948815:hitter.salaries.2016 <- subset(player.salaries,
1509991948815:type=='hitter' & salaryYear==2016)
1509991948818:pitcher.salaries.2016 <- subset(player.salaries,
1509991948818:type=='pitcher' & salaryYear==2016)
1509991959057:qplot(keyStat, salary, data=hitter.salaries, geom='point') + facet_wrap(~statYear)
1509991973194:qplot(keyStat, salary, data=hitter.salaries.2016, geom='point')
1509992004618:View(hitter.salaries.2016)
1509992021453:x <- filter(hitter.salaries.2016, statTeam != salaryTeam)
1509992027203:qplot(keyStat, salary, data=x, geom='point')
1509992043595:source('stat_report.r')
1509992050016:InspectScaleVariable(x$salary)
1509992059585:InspectScaleVariable(x$salary, 'Salary', 1000000)
1509992105491:cor.test(x$keyStat, x$salary, method='spearman')
1509992134750:cor.test(x$keyStat, x$salary, method='pearson')
1509992701846:salaries <- read_csv('lahman_salaries.csv')
1509992745052:x <- subset(player.salaries, type=='hitter')
1509992769050:range(x$keyStat)
1509992798929:player.salaries <- filter(player.salaries, !is.na(keyStat))
1509992805749:range(x$keyStat)
1509992810570:x <- subset(player.salaries, type=='hitter')
1509992812375:range(x$keyStat)
1509992852137:qplot(keyStat)
1509992862485:qplot(keyStat, data=x)
1509992913089:x[x$keyStat < 0.1]
1509992923796:x[x$keyStat < 0.1,]
1509993425248:View(subset(x, playerID=='barneda01'))
1509993449523:View(subset(x, playerID=='bartlja01'))
1509993480056:?playerInfo
1509993540916:colnames(Batting)
1509993546529:?Batting
1509993580501:View(subset(Batting, playerID=='bartlja01'))
1510003839612:View(subset(Batting, playerID=='bartlja01'))
1510003913569:x[x$keyStat > 0.8,]
1510003925793:View(subset(Batting, playerID=='murphda07'))
1510003969850:View(subset(battingStats, playerID=='murphda07'))
1510004039073:batting.stats <- battingStats(cbind=F)
1510004045852:View(subset(batting.stats, playerID=='murphda07'))
1510004167741:x[x$keyStat > 0.6,]
1510004185759:View(subset(batting.stats, playerID=='maybica01'))
1510004232425:x[x$keyStat < 0.2,]
1510004334917:View(subset(batting.stats, playerID=='bayja01'))
1510012905810:source('stat_report.r')
1510012905821:require(readr)
1510012908938:salaries <- read_csv('lahman_salaries.csv')
1510012909028:salaries.2012 <- subset(salaries, yearID==2012)
1510012909036:salaries.2016 <- subset(salaries, yearID==2016)
1510013186267:InspectScaleVariable(salaries.2012)
1510013197004:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000)
1510013321223:options(scipen=5)
1510013323007:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000)
1510013330603:options(scipen=6)
1510013331616:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000)
1510013469792:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000)
1510013532332:salaries <- subset(salaries, yearID%in%c(2012, 2016))
1510013597713:describeBy(salaries$salary, group=hitter.salaries$yearID)
1510013605537:describeBy(salaries$salary, group=salaries$yearID)
1510013615604:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000)
1510013693594:summary(salary)
1510013701370:summary(salaries.2012$salary)
1510013724740:sd(salaries.2012$salary)
1510013747413:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000)
1510013895967:sd(salaries.2016$salary)
1510013909358:summary(salaries.2016$salary)
1510013923242:InspectScaleVariable(salaries.2016$salary, 'Salary', 1000000)
1510014010795:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000)
1510014026485:InspectScaleVariable(salaries.2016$salary, 'Salary', 1000000)
1510014066039:InspectScaleVariable(salaries.2016$salary, '2016 Salary', 1000000)
1510014187647:InspectScaleVariable(salaries.2012$salary, '2012 Salary', 1000000)
1510014343753:qplot(salary, yearID, data=salaries, geom='boxplot')
1510014362289:qplot(yearID, salary, data=salaries, geom='boxplot')
1510014400066:qplot(yearID, salary, data=salaries, group=salary, geom='boxplot')
1510014416631:qplot(yearID, salary, data=salaries, group=yearID, geom='boxplot')
1510014451911:qplot(yearID, salary, data=salaries, group=yearID, geom='boxplot', xlab='Salaries in 2012 and 2016', ylab='Salary')
1510014475926:qplot(yearID, salary, data=salaries, group=yearID, geom='boxplot', xlab='Salaries in 2012 and 2016', ylab='Salary', main='Salaries in 2012 and 2016, a comparison')
1510014775085:require(car)
1510014808567:leveneTest(salary ~ lgID, data=salaries)
1510014820697:leveneTest(salary ~ yearID, data=salaries)
1510014832578:leveneTest(salary ~ lgID, data=salaries)
1510014865151:salaries$yearID <- as.factor(as.character(salaries.$yearID))
1510014869583:salaries$yearID <- as.factor(as.character(salaries$yearID))
1510014873108:leveneTest(salary ~ yearID, data=salaries)
1510015641393:t.test(salary ~ yearID, data=salaries, var.equal=F)
1510015644302:t.test(salary ~ yearID, data=salaries, var.equals=F)
1510015656718:?t.test
1510015663763:t.test(salary ~ yearID, data=salaries)
1510015839057:salaries <- read_csv('lahman_salaries.csv')
1510015871920:qplot(yearID, salary, data=salaries, geom='point')
1510015878047:qplot(yearID, salary, data=salaries, geom='smooth')
1510015924117:qplot(yearID, salary, data=salaries, geom='point')
1510015981813:qplot(yearID, salary, data=salaries, geom='point', xlab='Year', ylab='Salary', main='MLB salaries over the years.')
1510016071190:?t.test
1510016115491:t.test(salary ~ yearID, data=salaries, alternative='greater')
1510016124310:salaries <- subset(salaries, yearID%in%c(2012, 2016))
1510016127609:salaries$yearID <- as.factor(as.character(salaries$yearID))
1510016130056:t.test(salary ~ yearID, data=salaries, alternative='greater')
1510016157293:t.test(salary ~ yearID, data=salaries, alternative='less')
1510016408741:t.test(salaries.2012$salary, salaries.2016$salary, data=salaries, alternative='greater')
1510016420302:t.test(salaries.2012$salary, salaries.2016$salary, data=salaries, alternative='less')
1510016729331:al.salaries <- subset(salaries.2016, lgID=='AL')
1510016729334:nl.salaries <- subset(salaries.2016, lgID=='NL')
1510016782442:InspectScaleVariable(al.salaries, '2016 Salary in American League', 1000000)
1510016835172:InspectScaleVariable(al.salaries$salary, '2016 Salary in American League', 1000000)
1510017193111:summary(al.salaries$salary)
1510017217365:sd(al.salaries$salary)
1510017231298:InspectScaleVariable(nl.salaries$salary, '2016 salary in National League', 1000000)
1510017268094:sd(nl.salaries$salary)
1510017280175:summary(nl.salaries$salary)
1510017758128:qplot(lgID, salary, data=salaries, group=lgID, geom='boxplot', xlab='League', ylab='Salary', main='Salaries in American and National Leagues, a comparison')
1510018043093:leveneTest(salary ~ lgID, data=salaries.2016)
1510018121422:salaries.2016$lgID <- as.factor(salaries.2016$lgID)
1510018131757:leveneTest(salary ~ lgID, data=salaries.2016)
1510018158345:leveneTest(salary ~ yearID, data=salaries)
1510018360899:t.test(al.salaries$salary, nl.salaries$salary, data=salaries.2016,
1510018360901:var.equal=TRUE)
1510018569697:nl.salaries.temp <- subset(nl.salaries, salary < 30000000)
1510018587470:t.test(al.salaries$salary, nl.salaries.temp$salary, data=salaries.2016,
1510018587471:var.equal=TRUE)
1510022829993:player.salaries <- read_csv('lahman_player_salaries.csv')
1510022830030:player.salaries <- filter(player.salaries, !is.na(keyStat))
1510022830051:hitter.salaries.2016 <- subset(player.salaries,
1510022830051:type=='hitter' & salaryYear==2016)
1510022849218:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 1000000)
1510022902094:InspectScaleVariable(hitter.salaries.2016$keyStat,
1510022902095:"Batting Average on Balls In Play", 1000000)
1510022917305:InspectScaleVariable(hitter.salaries.2016$keyStat,
1510022917306:"Batting Average on Balls In Play", 0.01)
1510023055234:cor.test(keyStat, salary, data=hitter.salaries.2016, method='spearman')
1510023086688:cor.test(hitter.salaries.2016$keyStat, hitter.salaries.2016$salary, method='spearman')
1510023105011:cor.test(hitter.salaries.2016$keyStat, hitter.salaries.2016$salary, method='pearson')
1510023352126:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 1000000)
1510023495098:median(hitter.salaries.2016$salary)
1510023503832:sd(hitter.salaries.2016$salary)
1510023646586:mean(hitter.salaries.2016$keyStat)
1510023698408:sd(hitter.salaries.2016$keyStat)
1510023729760:summary(hitter.salaries.2016$salary)
1510023740805:9150000 - 651000
1510023833060:InspectScaleVariable(hitter.salaries.2016$keyStat,
1510023833060:"Batting Average on Balls In Play", 0.01)
1510023883461:hitter.salaries.2016 <- subset(hitter.salaries.2016,
1510023883462:keyStat > 0.2 && keyStat < 0.6)
1510023891386:InspectScaleVariable(hitter.salaries.2016$keyStat,
1510023891387:"Batting Average on Balls In Play", 0.01)
1510023924333:hitter.salaries.2016 <- subset(hitter.salaries.2016,
1510023924334:keyStat > 0.2 && keyStat < 0.6)
1510023931490:View(al.salaries)
1510023932213:View(hitter.salaries.2016)
1510023949888:hitter.salaries.2016 <- subset(hitter.salaries.2016,
1510023949889:keyStat > 0.2 & keyStat < 0.6)
1510023957465:InspectScaleVariable(hitter.salaries.2016$keyStat,
1510023957468:"Batting Average on Balls In Play", 0.01)
1510024002455:mean(hitter.salaries.2016$keyStat)
1510024013206:sd(hitter.salaries.2016$keyStat)
1510024271067:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 1000000)
1510024290741:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 100000)
1510024300098:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 1000000)
1510024305827:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 1500000)
1510024312188:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 1000000)
1510024316111:InspectScaleVariable(hitter.salaries.2016$salary, "Salary", 1000000)
1510024678607:cor.test(hitter.salaries.2016$keyStat, hitter.salaries.2016$salary, method='spearman')
1510057322270:?mutate
1510057352084:?transmute
1510057415331:View(player.salaries)
1510057458764:player.salaries <- read_csv('lahman_player_salaries.csv')
1510057458810:player.salaries <- filter(player.salaries, !is.na(keyStat))
1510057458827:hitters <- subset(player.salaries, type=='hitter' & statYear > 2012)
1510057475447:hitters <- subset(player.salaries, type=='hitter' & statYear > 2011)
1510057515934:hitters.2012 <- subset(hitters, statYear == 2012)
1510057515936:hitters.2013 <- subset(hitters, statYear == 2013)
1510057515938:hitters.2014 <- subset(hitters, statYear == 2014)
1510057515941:hitters.2015 <- subset(hitters, statYear == 2015)
1510057515944:hitters.2016 <- subset(hitters, statYear == 2016)
1510057536952:hitters <- subset(player.salaries, type=='hitter' & statYear > 2010)
1510057536955:hitters.2011 <- subset(hitters, statYear == 2011)
1510057536956:hitters.2012 <- subset(hitters, statYear == 2012)
1510057536958:hitters.2013 <- subset(hitters, statYear == 2013)
1510057536960:hitters.2014 <- subset(hitters, statYear == 2014)
1510057536963:hitters.2015 <- subset(hitters, statYear == 2015)
1510057551871:InspectScaleVariable(hitters.2011)
1510057642407:InspectScaleVariable(hitters.2011$keyStat,
1510057642408:'Batting Average on Balls In Play',
1510057642409:0.01)
1510057696646:subset(hitters, keyStat < 0.2 | keyStat > 0.6)
1510057733424:subset(hitters.2011, keyStat < 0.2 | keyStat > 0.6)
1510057762087:subset(Batting, playerID=='carpema01')
1510057869978:subset(hitters, keyStat < 0.2 | keyStat > 0.6)
1510057889345:subset(hitters, keyStat > 0.6)
1510057931604:hitters <- subset(player.salaries, type=='hitter' & statYear > 2010)
1510057931606:# 20 outliers in the data => Players who have played very few games in some
1510057931606:# seasons and thus having skewed data. Removing the outliers.
1510057931607:hitters <- subset(hitters,
1510057931608:keyStat > 0.2 & keyStat < 0.6)
1510057931610:hitters.2011 <- subset(hitters, statYear == 2011)
1510057931614:hitters.2012 <- subset(hitters, statYear == 2012)
1510057931618:hitters.2013 <- subset(hitters, statYear == 2013)
1510057931620:hitters.2014 <- subset(hitters, statYear == 2014)
1510057931622:hitters.2015 <- subset(hitters, statYear == 2015)
1510057945847:InspectScaleVariable(hitters.2011$keyStat,
1510057945848:'Batting Average on Balls In Play',
1510057945849:0.01)
1510058315640:InspectScaleVariable(hitters.2015$keyStat,
1510058315642:'Batting Average on Balls In Play',
1510058315643:0.01)
1510058462269:mean(hitters.2011$keyStat)
1510058479518:sd(hitters.2011$keyStat)
1510058546833:InspectScaleVariable(hitters.2011$keyStat,
1510058546834:'Batting Average on Balls In Play',
1510058546835:0.01)
1510058635260:InspectScaleVariable(hitters.2012$keyStat,
1510058635261:'Batting Average on Balls In Play',
1510058635262:0.01)
1510058727840:mean(hitters.2012$keyStat)
1510058730399:sd(hitters.2012$keyStat)
1510058749016:InspectScaleVariable(hitters.2013$keyStat,
1510058749019:'Batting Average on Balls In Play',
1510058749020:0.01)
1510058759511:mean(hitters.2013$keyStat)
1510058762911:sd(hitters.2013$keyStat)
1510058949176:InspectScaleVariable(hitters.2014$keyStat,
1510058949178:'Batting Average on Balls In Play',
1510058949178:0.01)
1510058986397:mean(hitters.2014$keyStat)
1510058990048:sd(hitters.2014$keyStat)
1510059053059:InspectScaleVariable(hitters.2015$keyStat,
1510059053061:'Batting Average on Balls In Play',
1510059053061:0.01)
1510059068206:mean(hitters.2015$keyStat)
1510059070046:sd(hitters.2015$keyStat)
1510059159975:shapiro.test(hitters.2011$keyStat)
1510059551930:source('stat_report.r')
1510059556416:InspectScaleVariable(hitters.2015$keyStat,
1510059556417:'Batting Average on Balls In Play',
1510059556418:0.01)
1510059583849:shapiro.test(hitters.2015$keyStat)
1510059586985:shapiro.test(hitters.2014$keyStat)
1510059600278:shapiro.test(hitters.2013$keyStat)
1510059622743:shapiro.test(hitters.2012$keyStat)
1510059700416:?bartlett.test
1510059752181:bartlett.test(hitters$keyStat, hitters$statYear)
1510060217751:?bartlett.test
1510061051582:require(userfriendlyscience)
1510061060082:install.packages('userfriendlyscience')
1510061131846:require(userfriendlyscience)
1510061229621:one.way <- oneway(x=hitters$statYear, y=hitters$keyStat, posthoc='Tukey')
1510061263464:hitters$statYear <- as.factor(as.character(hitters$statYear))
1510061267309:bartlett.test(hitters$keyStat, hitters$statYear)
1510061272556:one.way <- oneway(x=hitters$statYear, y=hitters$keyStat, posthoc='Tukey')
1510061287258:one.way
1510061342984:print(one.way)
1510079773688:require(knitr)
1510090260332:subset(salaries, yearID%in%c(2012, 2016))
1510090266606:knitr::opts_chunk$set(echo = TRUE)
1510090266717:salaries <- subset(salaries, yearID%in%c(2012, 2016))
1510090266768:salaries.2012 <- subset(salaries, yearID==2012)
1510090266807:salaries.2016 <- subset(salaries, yearID==2016)
1510090266842:InspectScaleVariable(salaries.2012, '2012 salary', 1000000)
1510092354925:View(hitter.salaries.2016)
1510092607155:salaries <- read_csv('lahman_player_salaries.csv')
1510092607208:salaries <- filter(salaries, !is.na(keyStat))
1510092607221:hitters <- subset(salaries, type=='hitter' & statYear > 2010)
1510092607227:# salaries <- read_csv('lahman_salaries.csv')
1510092607228:qplot(salaryYear, salary, data=player.salaries, geom='point', xlab='Year',
1510092607229:ylab='Salary', main='MLB salaries over the years.')
1510092616951:qplot(salaryYear, salary, data=salaries, geom='point', xlab='Year',
1510092616953:ylab='Salary', main='MLB salaries over the years.')
1510101600211:battingLabels
1510101629714:?Batting
1510101703770:require(Lahman)
1510101703771:require(dplyr)
1510101703772:require(readr)
1510101703773:DropColumns <- function (df, unwanted.columns) {
1510101703773:# Drop columns of a data frame by names.
1510101703774:# Args:
1510101703775:#   df: The data frame to be modified.
1510101703775:#   unwanted.columns: Names of the columns to be dropped.
1510101703776:# Returns:
1510101703776:#   The data frame with unwanted columns dropped.
1510101703777:df <- df[, !colnames(df) %in% unwanted.columns]
1510101703777:return(df)
1510101703777:}
1510101703778:RenameColumns <- function (df, old.names, new.names) {
1510101703779:# Renames column names of a data frame as needed.
1510101703780:# Args:
1510101703780:#   df: The data frame to be modified.
1510101703784:#   old.names: The column names to be altered.
1510101703785:#   new.names: The new column names.
1510101703787:# Returns:
1510101703789:#   The data frame with column names modified.
1510101703790:for (index in 1:length(old.names)) {
1510101703791:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1510101703791:}
1510101703792:return(df)
1510101703793:}
1510101729022:batting <- Batting
1510101729026:unwanted.batting.columns <- c('G', 'AB', 'R', 'H', 'X2B', 'X3B', 'HR', 'RBI',
1510101729027:'SB', 'CS', 'BB', 'SO', 'IBB', 'HBP', 'SH',
1510101729028:'SF', 'GIDP', 'BA', 'TB', 'SlugPct', 'OBP',
1510101729028:'OPS')
1510101729033:batting <- subset(batting, yearID > 1999 & lgID %in% c('AL', 'NL'))
1510101729123:batting.stats <- battingStats(cbind=F)
1510101729340:batting <- inner_join(batting, batting.stats,
1510101729340:by=c('playerID', 'yearID', 'teamID', 'stint', 'lgID'))
1510101729524:batting <- DropColumns(df=batting, unwanted.columns=unwanted.batting.columns)
1510101736049:View(batting)
1510101751763:?battingStats
1510102598949:salaries <- read_csv('lahman_player_salaries.csv')
1510102599019:salaries <- filter(salaries, !is.na(keyStat))
1510102599037:hitters <- subset(salaries, type=='hitter' & statYear > 2010)
1510102599045:# salaries <- read_csv('lahman_salaries.csv')
1510102599047:qplot(salaryYear, salary, data=salaries, geom='point', xlab='Year',
1510102599048:ylab='Salary', main='MLB salaries over the years.')
1510102605818:salaries <- subset(salaries, salaryYear %in% c(2012, 2016))
1510102605820:salaries.2012 <- subset(salaries, salaryYear==2012)
1510102605822:salaries.2016 <- subset(salaries, salaryYear==2016)
1510102605824:InspectScaleVariable(salaries.2012$salary, '2012 salary', 1000000)
1510102611586:source('stat_report.r')
1510102615774:salaries <- subset(salaries, salaryYear %in% c(2012, 2016))
1510102615776:salaries.2012 <- subset(salaries, salaryYear==2012)
1510102615778:salaries.2016 <- subset(salaries, salaryYear==2016)
1510102615779:InspectScaleVariable(salaries.2012$salary, '2012 salary', 1000000)
1510102689850:salaries <- subset(salaries, salaryYear %in% c(2012, 2016) & type=='hitter')
1510102692981:salaries.2012 <- subset(salaries, salaryYear==2012)
1510102692982:salaries.2016 <- subset(salaries, salaryYear==2016)
1510102698049:InspectScaleVariable(salaries.2012$salary, '2012 salary', 1000000)
1510102759269:?qqnorm
1510102879744:source('stat_report.r')
1510102884182:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000, '2012 Salaries')
1510102963659:?gglpot
1510102968402:?ggplot
1510103057664:source('stat_report.r')
1510103060573:InspectScaleVariable(salaries.2016$salary, 'Salary', 1000000, '2016 Salaries')
1510104152577:source('stat_report.r')
1510104152584:require(car)
1510104152585:require(readr)
1510104152586:require(dplyr)
1510104152589:require(userfriendlyscience)
1510104152592:# Hypothesis 1
1510104152593:# ============
1510104152594:salaries <- read_csv('lahman_player_salaries.csv')
1510104152643:hitter.salaries <- filter(salaries, !is.na(keyStat) & type=='hitter')
1510104152648:hitters <- subset(hitter.salaries, type=='hitter' & statYear > 2010)
1510104152651:# salaries <- read_csv('lahman_salaries.csv')
1510104152652:qplot(salaryYear, salary, data=hitter.salaries, geom='point', xlab='Year',
1510104152653:ylab='Salary', main='MLB salaries over the years.')
1510104153121:# A simple scatterplot seems to corroborate the hypothesis that there is a
1510104153124:# considerable increase in the 2016 MLB salaries when compared to 2012 MLB
1510104153124:# salaries.
1510104153125:hitter.salaries <- subset(hitter.salaries,
1510104153125:salaryYear %in% c(2012, 2016))
1510104153126:salaries.2012 <- subset(hitter.salaries, salaryYear==2012)
1510104153128:salaries.2016 <- subset(hitter.salaries, salaryYear==2016)
1510104153129:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000, '2012 Salaries')
1510104214696:InspectScaleVariable(salaries.2016$salary, 'Salary', 1000000, '2016 Salaries')
1510104580218:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000, '2012 Salaries')
1510104661557:InspectScaleVariable(salaries.2016$salary, 'Salary', 1000000, '2016 Salaries')
1510104772602:InspectScaleVariable(salaries.2016$salary, 'Salary', 1000000, '2016 Salaries')
1510104778763:InspectScaleVariable(salaries.2012$salary, 'Salary', 1000000, '2012 Salaries')
1510104823100:InspectScaleVariable(salaries.2016$salary, 'Salary', 1000000, '2016 Salaries')
1510104921520:median(salaries.2012$salary)
1510104930118:median(salaries.2016$salary)
1510104949180:IQR(salaries.2012$salary)
1510104966722:IQR(salaries.2016$salary)
1510105019983:hitter.salaries$salaryYear <- as.factor(
1510105019985:as.character(hitter.salaries$salaryYear))
1510105019986:qplot(salaryYear, salary, data=hitter.salaries, group=salaryYear,
1510105019987:geom='boxplot',
1510105019987:xlab='Year', ylab='Salary',
1510105019987:main='Hitter salaries in 2012 and 2016, a comparison')
1510105612640:describeBy(hitter.salaries$salary, group=hitter.salaries$salaryYear)
1510105645020:leveneTest(salary ~ salaryYear, data=hitter.salaries)
1510105801592:sum(salaries.2012$salary > 16500000
1510105803970:)
1510105826321:sum(salaries.2016$salary > 22500000
1510105827750:)
1510105938876:y <- c(1, 2, 3)
1510105944890:df <- as.data.frame(x=y)
1510105945862:df
1510106024150:summary(y)
1510106034196:str(summary)
1510106047119:str(summary(y))
1510106061742:summary(y)['3rd Q.']
1510106064188:summary(y)['3rd Qu.']
1510106161832:source('stat_report.r')
1510106184390:GetOutliersCount(salaries.2016$salary)
1510106202614:source('stat_report.r')
1510106204781:GetOutliersCount(salaries.2016$salary)
1510106209514:GetOutliersCount(salaries.2012$salary)
1510106774046:leveneTest(salary ~ salaryYear, data=hitter.salaries)
1510107131622:t.test(salaries.2012$salary, salaries.2016$salary, data=salaries,
1510107131627:alternative='less')
1510107805143:6642162 - 4778320
1510108371555:leveneTest(salary ~ salaryYear, data=hitter.salaries)
1510108409597:t.test(salaries.2012$salary, salaries.2016$salary, data=salaries,
1510108409599:alternative='less')
1510108546307:al.salaries <- subset(salaries.2016, lgID=='AL')
1510108546314:nl.salaries <- subset(salaries.2016, lgID=='NL')
1510108559380:View(salaries.2016)
1510108576007:al.salaries <- subset(salaries.2016, salaryLg=='AL')
1510108576012:nl.salaries <- subset(salaries.2016, salaryLg=='NL')
1510108619298:InspectScaleVariable(al.salaries$salary, 'Salary',
1510108619300:1000000, '2016 Salary in American League')
1510108620273:InspectScaleVariable(nl.salaries$salary, 'Salary',
1510108620274:1000000, '2016 salary in National League')
1510108686665:InspectScaleVariable(al.salaries$salary, 'Salary',
1510108686667:1000000, '2016 salary in American League')
1510108811637:InspectScaleVariable(nl.salaries$salary, 'Salary',
1510108811640:1000000, '2016 salary in National League')
1510108888994:InspectScaleVariable(al.salaries$salary, 'Salary',
1510108888997:1000000, '2016 salary in American League')
1510108938450:InspectScaleVariable(nl.salaries$salary, 'Salary',
1510108938452:1000000, '2016 salary in National League')
1510109036852:median(al.salaries$salary)
1510109046632:IQR(al.salaries$salary)
1510109079342:median(nl.salaries$salary)
1510109088438:IQR(nl.salaries$salary)
1510109119373:qplot(lgID, salary, data=salaries, group=lgID, geom='boxplot', xlab='League',
1510109119374:ylab='Salary',
1510109119375:main='Salaries in American and National Leagues, a comparison')
1510109138923:qplot(lgID, salary, data=salaries, group=salaryLg, geom='boxplot',
1510109138923:xlab='League', ylab='Salary',
1510109138924:main='Salaries in American and National Leagues, a comparison')
1510109150969:qplot(salaryLg, salary, data=salaries, group=salaryLg, geom='boxplot',
1510109150970:xlab='League', ylab='Salary',
1510109150971:main='Salaries in American and National Leagues, a comparison')
1510109436031:print(1, 2)
1510109441223:print("a", 1)
1510109500324:source('stat_report.r')
1510109503855:GetOutliersCount(salaries.2012$salary)
1510109642780:GetOutliersCount(al.salaries$salary)
1510109642810:GetOutliersCount(nl.salaries$salary)
1510109687300:sum(nl.salaries$salary > 12000000)
1510109691068:sum(nl.salaries$salary > 13000000)
1510109705549:x <- nl.salaries$salary
1510109715779:IQR(nl.salaries$salary)
1510109726390:summary(nl.salaries$salary)
1510109742863:y <- 8500000 + 1.5 * 7930000
1510109753239:sum(nl.salaries$salary > y)
1510109769159:y
1510109930072:?boxplot
1510109944324:boxplot(nl.salaries$salary)
1510110062117:ylim1 = boxplot.stats(nl.salaries$salary)$stats[c(1, 5)]
1510110067982:ylim1
1510110123355:GetOutliersCount(al.salaries$salary)
1510110123361:GetOutliersCount(nl.salaries$salary)
1510110513712:GetOutliersCount(al.salaries$salary)
1510110513719:GetOutliersCount(nl.salaries$salary, "x")
1510110518488:source('stat_report.r')
1510110520623:GetOutliersCount(al.salaries$salary)
1510110520658:GetOutliersCount(nl.salaries$salary, "x")
1510110525836:GetOutliersCount(al.salaries$salary)
1510110525837:GetOutliersCount(nl.salaries$salary, "x")
1510110536099:GetOutliersCount(nl.salaries$salary, "x")
1510110559444:source('stat_report.r')
1510110562959:GetOutliersCount(nl.salaries$salary, "x")
1510110749753:leveneTest(salary ~ salaryLg, data=salaries.2016)
1510110824645:t.test(al.salaries$salary, nl.salaries$salary, data=salaries.2016,
1510110824646:var.equal=TRUE)
1510111020361:GetOutliersCount(al.salaries$salary, 'x')
1510111037393:GetOutliersCount(nl.salaries$salary, 'x')
1510111203592:leveneTest(salary ~ salaryLg, data=salaries.2016)
1510111372714:t.test(al.salaries$salary, nl.salaries$salary, data=salaries.2016,
1510111372715:var.equal=TRUE)
1510111391081:7040882 - 6240729
1510155772205:one.way <- oneway(x=hitters$statYear, y=hitters$keyStat, posthoc='Tukey')
1510155772879:print(one.way)
1510156075348:?bartlett.test
1510156161704:?oneway
1510156683712:?bartlett.test
1510156690412:bartlett.test(hitters$keyStat, hitters$statYear)
1510156708009:player.salaries <- read_csv('lahman_player_salaries.csv')
1510156708098:player.salaries <- filter(player.salaries, !is.na(keyStat))
1510156708129:hitters <- subset(player.salaries, type=='hitter' & statYear > 2010)
1510156708136:# 20 outliers in the data => Players who have played very few games in some
1510156708136:# seasons and thus having skewed data. Removing the outliers.
1510156708137:hitters <- subset(hitters,
1510156708139:keyStat > 0.2 & keyStat < 0.6)
1510156714521:hitters$statYear <- as.factor(as.character(hitters$statYear))
1510156718708:bartlett.test(hitters$keyStat, hitters$statYear)
1510156729043:one.way <- oneway(x=hitters$statYear, y=hitters$keyStat, posthoc='Tukey')
1510156732629:print(one.way)
1510156806546:bartlett.test(hitters$keyStat, hitters$statYear)
1510156815562:?bartlett.test
1510159118905:hitter.salaries.2016 <- subset(player.salaries,
1510159118909:type=='hitter' & salaryYear==2016)
1510159184525:hitter.salaries.2016 <- subset(player.salaries,
1510159184527:type=='hitter' & salaryYear==2016)
1510159184529:# 3 outliers in the data => Players who have played very few games in some
1510159184530:# seasons and thus having skewed data. Removing the outliers.
1510159184531:hitter.salaries.2016 <- subset(hitter.salaries.2016,
1510159184531:keyStat > 0.2 & keyStat < 0.6)
1510159184534:InspectScaleVariable(hitter.salaries.2016$salary,
1510159184536:"Salary", 1000000,
1510159184537:"2016 Hitter Salaries")
1510159185711:InspectScaleVariable(hitter.salaries.2016$keyStat,
1510159185712:"Batting Average on Balls In Play", 0.01,
1510159185713:"2015 Hitter BABIPs")
1510159187291:# Salary is not normal based on above. BABIP is.
1510159187291:# So we go for a Spearman correlation.
1510159187292:cor.test(hitter.salaries.2016$keyStat,
1510159187293:hitter.salaries.2016$salary,
1510159187293:method='spearman')
1510159320427:cor.test(hitter.salaries.2016$keyStat,
1510159320429:hitter.salaries.2016$salary,
1510159320430:method='kendall')
1510159533071:str(cor.test(hitter.salaries.2016$keyStat,
1510159533073:hitter.salaries.2016$salary,
1510159533073:method='kendall'))
1510159552082:cor.test(hitter.salaries.2016$keyStat,
1510159552083:hitter.salaries.2016$salary,
1510159552084:method='kendall')
1510162485859:source('lahman_wrangler.r')
1510163359040:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1/Test")
1510163869254:source('stat_report.r')
1510163869273:source('lahman_wrangler.r')
1510163869283:require(car)
1510163869284:require(readr)
1510163869285:require(dplyr)
1510163869286:require(userfriendlyscience)
1510163869287:Wrangle.Lahman() # Prepare the data and create the necessary CSVs.
1510163886302:source('stat_report_helper.r')
1510163886310:source('lahman_wrangler.r')
1510163886319:require(car)
1510163886319:require(readr)
1510163886320:require(dplyr)
1510163886321:require(userfriendlyscience)
1510163886323:Wrangle.Lahman() # Prepare the data and create the necessary CSVs.
1510163979136:salaries <- Salaries %>%
1510163979137:filter(lgID %in% c('AL', 'NL') & yearID > 2000) %>%
1510163979138:inner_join(players, by='playerID') %>%
1510163979138:mutate(age=yearID-birthYear-1L*(birthMonth >= 10))
1510164094556:Salaries
1510164120852:require(Lahman)
1510164120867:require(dplyr)
1510164121046:require(readr)
1510164127401:DropColumns <- function (df, unwanted.columns) {
1510164127405:# Drop columns of a data frame by names.
1510164127405:# Args:
1510164127406:#   df: The data frame to be modified.
1510164127407:#   unwanted.columns: Names of the columns to be dropped.
1510164127409:# Returns:
1510164127409:#   The data frame with unwanted columns dropped.
1510164127412:df <- df[, !colnames(df) %in% unwanted.columns]
1510164127413:return(df)
1510164127415:}
1510164127417:RenameColumns <- function (df, old.names, new.names) {
1510164127418:# Renames column names of a data frame as needed.
1510164127419:# Args:
1510164127419:#   df: The data frame to be modified.
1510164127420:#   old.names: The column names to be altered.
1510164127420:#   new.names: The new column names.
1510164127421:# Returns:
1510164127421:#   The data frame with column names modified.
1510164127422:for (index in 1:length(old.names)) {
1510164127423:colnames(df)[which(colnames(df) == old.names[index])] <- new.names[index]
1510164127424:}
1510164127425:return(df)
1510164127425:}
1510173302263:# Script to run the analysis
1510173302266:# Same content has been made available as CAP1.rmd
1510173302267:source('stat_report_helper.r')
1510173302277:require(car)
1510173304090:require(readr)
1510173304237:require(dplyr)
1510173304530:require(userfriendlyscience)
1510173306751:source('lahman_wrangler.r')
1510173319213:getwd()
1510173322639:setwd("~/MSc in Data Analytics/Probability and Statistical Inference/Assignments/1/Test")
1510173326145:# Script to run the analysis
1510173326147:# Same content has been made available as CAP1.rmd
1510173326149:source('stat_report_helper.r')
1510173326371:require(car)
1510173326372:require(readr)
1510173326373:require(dplyr)
1510173326374:require(userfriendlyscience)
1510173326375:source('lahman_wrangler.r')
1510173332671:salaries <- read_csv('lahman_player_salaries.csv')
1510173336079:View(salaries)
1510173340913:colnames(salaries)
1510241170700:?read.delim
1510241290193:require(arules)
1510241330960:?apriori
1510244094812:license()
1510244097786:license()
1510244118181:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510244512931:# 1.a
1510244512931:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1510244512933:colnames(employment.trends) <- tolower(colnames(employment.trends))
1510244512980:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510244512980:xlab="Quarterly Figures", ylab="Trend",
1510244512981:main="Dublin Employment Trends Per Sector: 2006-2016") +
1510244512982:facet_grid(. ~ sector)
1510244512985:# 1.b
1510244512986:property.trends <- read_tsv("dublin property trends.txt")
1510244512988:colnames(property.trends) <- tolower(colnames(property.trends))
1510244512990:qplot(x=time, y=trend, data=property.trends, geom="line",
1510244512991:colour=category, xlab="Trend", ylab="Time",
1510244512992:main="Dublin Property Trends: 2007 - 2016")
1510244521142:require(readr)
1510244521361:require(ggplot2)
1510244521475:# 1.a
1510244521476:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1510244521542:colnames(employment.trends) <- tolower(colnames(employment.trends))
1510244521543:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510244521543:xlab="Quarterly Figures", ylab="Trend",
1510244521544:main="Dublin Employment Trends Per Sector: 2006-2016") +
1510244521544:facet_grid(. ~ sector)
1510244523092:# 1.b
1510244523093:property.trends <- read_tsv("dublin property trends.txt")
1510244524279:colnames(property.trends) <- tolower(colnames(property.trends))
1510244524280:qplot(x=time, y=trend, data=property.trends, geom="line",
1510244524280:colour=category, xlab="Trend", ylab="Time",
1510244524281:main="Dublin Property Trends: 2007 - 2016")
1510244546979:qqnorm
1510244556395:?qqnorm
1510244603823:require(graphics)
1510244612215:y <- rt(200, df = 5)
1510244612217:qqnorm(y); qqline(y, col = 2)
1510244612278:qqplot(y, rt(300, df = 5))
1510244612462:qqnorm(precip, ylab = "Precipitation [in/yr] for 70 US cities")
1510244661345:x <- data.frame(c(1, 2, 3))
1510244662244:x
1510244679274:colnames(x) <- c('test out')
1510244681016:x
1510244731520:qplot(x$`test out`)
1510244759299:qplot(`test out`, data=x)
1510244769169:qplot('test out', data=x)
1510244780585:qplot('test out', data=x)
1510244785607:qplot(test out, data=x)
1510244794435:qplot(`test out``, data=x)
1510244797633:qplot(`test out``, data=x;)
1510244801079:qplot(`test out`, data=x;)
1510244804041:qplot(`test out`, data=x)
1510244880338:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1510244880345:colnames(employment.trends) <- tolower(colnames(employment.trends))
1510244880346:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510244880347:xlab="Quarterly Figures", ylab="Trend",
1510244880347:main="Dublin Employment Trends Per Sector: 2006-2016") +
1510244880348:facet_grid(. ~ sector)
1510245352019:employment.trends <- read.table("dublin employment trends.txt", delim=':')
1510245363615:employment.trends <- read.table("dublin employment trends.txt", sep=':')
1510245381144:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1510245381149:colnames(employment.trends) <- tolower(colnames(employment.trends))
1510245381149:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510245381150:xlab="Quarterly Figures", ylab="Trend",
1510245381151:main="Dublin Employment Trends Per Sector: 2006-2016") +
1510245381151:facet_grid(. ~ sector)
1510248024226:View(property.trends)
1510254894766:View(employment.trends)
1510255507670:knitr::opts_chunk$set(echo = TRUE)
1510255507672:require(ggplot2)
1510255507674:require(readr)
1510255507849:colnames(employment.trends) <- tolower(colnames(employment.trends))
1510255507862:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510255507863:xlab="Quarterly Figures", ylab="Trend",
1510255507864:main="Dublin Employment Trends Per Sector: 2006-2016") +
1510255507865:facet_grid(. ~ sector)
1510256124132:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510256124134:colour=sector, xlab="Trend", ylab="Time",
1510256124134:main="Dublin Employment Trends: 2007 - 2016")
1510257438044:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510257438046:xlab="Quarterly Figures", ylab="Trend",
1510257438047:main="Dublin Employment Trends Per Sector: 2006-2016") +
1510257438048:facet_grid(. ~ sector)
1510263818100:qqnorm()
1510263819899:qqnorm
1510263995544:debug
1510264000728:debug(qqnorm)
1510264005547:print(debug(qqnorm))
1510264008864:qqnorm
1510264022104:UseMethod(qqnorm)
1510264027436:UseMethod('qqnorm')
1510270670704:debug(t)
1510270677519:t(qplot)
1510270721160:debug
1510270744202:debug
1510270746549:?
1510270748358:debug
1510270777720:t.ts(qplot)
1510270779603:exit
1510270815297:debug(qqnorm)
1510270823694:debug(t)
1510270830045:t(qqnorm)
1510270843361:debug
1510270869997:debug(qqnorm)
1510270878030:qqnorm(c(1, 2, 3))
1510270883912:debug
1510270949195:qqnorm(c(1, 2, 3))
1510270962457:undebug(t)
1510270965214:undebug(qqnorm)
1510270968819:undebug(qplot)
1510274905845:df <- data.frame(cbind(1:10, 11:20))
1510274905849:names(df) <- c("y","x")
1510274905850:par(mar = c(7, 10, 7, 7))
1510274905852:plot(y ~ x, data = df, ylab = "", xlab = "independent")
1510274905910:text(par("usr")[1] - 1, 5.5, adj = 1, labels = "dependent", xpd = TRUE)
1510274912643:df <- data.frame(cbind(1:10, 11:20))
1510274912644:names(df) <- c("y","x")
1510274912645:par(mar = c(7, 10, 7, 7))
1510274912646:plot(y ~ x, data = df, ylab = "", xlab = "independent")
1510274949412:text(par("usr")[1] - 1, 5.5, adj = 1, labels = "dependent", xpd = TRUE)
1510275005242:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1510275005257:colnames(employment.trends) <- tolower(colnames(employment.trends))
1510275005258:qplot(x=time, y=employment, data=employment.trends, geom="line",
1510275005259:xlab="Quarterly Figures", ylab="",
1510275005259:main="Dublin Employment Trends Per Sector: 2006-2016") +
1510275005260:facet_grid(. ~ sector)
1510275006024:text(par("usr")[1] - 1, 5.5, adj = 1, labels = "Trend", xpd = TRUE)
1510275213915:par(mai=c(2, 1, 1, 1), lwd=2)
1510275213916:barplot(as.numeric(c(2, 4, 1, 6)), col = c("lightblue"), main="Bar plot",
1510275213917:names.arg=c("This is bar 1...1","This is bar 1...2",
1510275213918:"This is bar 1...3","This is bar 1...4"),
1510275213919:xpd=TRUE, las=2, lwd=2, axes=FALSE, axis.lty=1,
1510275213920:cex.axis=1, cex.names=1, cex.main=1, ylim=c(-5,8.5),xlim=c(-6,5))
1510275213970:axis(2, -3:9)
1510275224866:par(mai=c(2, 1, 1, 1), lwd=2)
1510275224867:barplot(as.numeric(c(2, 4, 1, 6)), col = c("lightblue"), main="Bar plot",
1510275224867:names.arg=c("This is bar 1...1","This is bar 1...2",
1510275224868:"This is bar 1...3","This is bar 1...4"),
1510275224868:xpd=TRUE, las=2, lwd=2, axes=FALSE, axis.lty=1,
1510275224868:cex.axis=1, cex.names=1, cex.main=1, ylim=c(-5,8.5),xlim=c(-6,5))
1510275224913:axis(2, -3:9, las=2)
1510275228136:par(mai=c(2, 1, 1, 1), lwd=2)
1510275228137:barplot(as.numeric(c(2, 4, 1, 6)), col = c("lightblue"), main="Bar plot",
1510275228138:names.arg=c("This is bar 1...1","This is bar 1...2",
1510275228138:"This is bar 1...3","This is bar 1...4"),
1510275228138:xpd=TRUE, las=2, lwd=2, axes=FALSE, axis.lty=1,
1510275228139:cex.axis=1, cex.names=1, cex.main=1, ylim=c(-5,8.5),xlim=c(-6,5))
1510275228178:axis(2, -3:9)
1510275232705:par(mai=c(2, 1, 1, 1), lwd=2)
1510275232706:barplot(as.numeric(c(2, 4, 1, 6)), col = c("lightblue"), main="Bar plot",
1510275232706:names.arg=c("This is bar 1...1","This is bar 1...2",
1510275232707:"This is bar 1...3","This is bar 1...4"),
1510275232707:xpd=TRUE, las=2, lwd=2, axes=FALSE, axis.lty=1,
1510275232707:cex.axis=1, cex.names=1, cex.main=1, ylim=c(-5,8.5),xlim=c(-6,5))
1510275232749:axis(2, -3:9, las=2)
1510315491918:setwd("~/MSc in Data Analytics/Data Visualisation/Week 8")
1510315587753:download.file('https://www.dropbox.com/s/kemb06n3bp494em/studentresult.csv?dl=0')
1510315937415:install.packages('sqldf')
1510315950487:require(sqldf)
1510316003878:require(sqldf)
1510317175845:getwd()
1510317380788:download.file('https://www.dropbox.com/s/t05lq5y3we4zdr9/studentresult.csv?dl=0')
1510317393059:download.file('https://www.dropbox.com/s/t05lq5y3we4zdr9/studentresult.csv?dl=0', 'studentdata.csv')
1510317404018:getwd()
1510317467072:require('ggplot2')
1510317467238:require('readr')
1510317467289:require('sqldf')
1510317477657:studentdata <- read_csv('studentdata.csv')
1510317480340:View(studentdata)
1510317684395:download.file('https://www.dropbox.com/s/t05lq5y3we4zdr9/studentresult.csv', 'studentdata.csv')
1510317690204:studentdata <- read_csv('studentdata.csv')
1510317762342:studentdata <- read_csv('studentresult.csv')
1510317765262:View(studentdata)
1510317785087:studentresult <- read_csv('studentresult.csv')
1510317831807:str(studentresult)
1510317864939:colnames(studentresult) <- tolower(colnames(studentresult))
1510317885043:studentresult$subject <- as.factor(studentresult$subject)
1510317902189:studentresult$grade <- as.factor(studentresult$grade)
1510317909634:View(studentresult)
1510317940640:studentresult$year <- as.factor(studentresult$year)
1510317946884:str(studentresult)
1510318228770:?sqldf
1510318531023:sqldf("SELECT subject, ROUND(AVG(mark_oral)) FROM studentresult where mark_oral IS NOT 'NA' GROUP BY subject")
1510318562789:subjectwise.mean <- sqldf("SELECT subject, ROUND(AVG(mark_oral)) FROM studentresult where mark_oral IS NOT 'NA' GROUP BY subject")
1510318676919:subjectwise.mean <- sqldf(query.1)
1510318683719:query.1 <- paste0("SELECT subject, ROUND(AVG(mark_oral)) FROM studentresult",
1510318683719:"where mark_oral IS NOT 'NA' GROUP BY subject")
1510318683720:subjectwise.mean <- sqldf(query.1)
1510318686387:View(subjectwise.mean)
1510318801945:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) FROM studentresult",
1510318801948:"where mark_oral IS NOT 'NA' GROUP BY subject")
1510318801949:subjectwise.mean <- sqldf(query.1)
1510338078620:getwd()
1510338092467:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510338146557:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510338386408:knitr::opts_chunk$set(echo = TRUE)
1510338386410:options(width=40)
1510338386411:require(ggplot2)
1510338386697:require(readr)
1510338398223:property.trends <- read_tsv("dublin property trends.txt")
1510338398315:colnames(property.trends) <- tolower(colnames(property.trends))
1510338412456:qplot(x=time, y=trend, data=property.trends, geom="line",
1510338412457:colour=category, xlab="Trend", ylab="Time",
1510338412458:main="Dublin Property Trends: 2007 - 2016")
1510338484928:View(property.trends)
1510338558594:property.trends <- read_tsv("dublin property trends.txt")
1510338558752:colnames(property.trends) <- tolower(colnames(property.trends))
1510338558753:qplot(x=time, y=trend, data=property.trends, geom="line",
1510338558754:colour=category, xlab="Trend", ylab="Time",
1510338558754:main="Dublin Property Trends: 2007 - 2016")
1510338931492:qplot(x=time, y=trend, data=property.trends, geom="line",
1510338931494:colour=category, xlab="Trend", ylab="Time",
1510338931495:main="Dublin Property Trends: 2007 - 2016")
1510338938241:qplot(x=time, y=trend, data=property.trends, geom="line",
1510338938244:colour=category, xlab="Trend", ylab="Time",
1510338938246:main="Dublin Property Trends: 2007 - 2016")
1510340409498:qplot(x=time, y=trend, data=property.trends, geom="line",
1510340409499:colour=category, xlab="Time", ylab="Trend",
1510340409501:main="Dublin Property Trends: 2007 - 2016")
1510357022654:require(httr)
1510357022675:require(jsonlite)
1510357022706:api.key <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1510357022707:# Going ahead with Dublin
1510357022708:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1510357022708:"?contract=Dublin",
1510357022711:"&apiKey=",
1510357022711:api.key)
1510357022713:dublin.data <- GET(dublin.url)
1510357022985:dublin.data.json <- content(dublin.data, as="text")
1510357022989:dublin.data.df <- fromJSON(dublin.data.json)
1510357032959:View(dublin.data.df)
1510357055282:payment.active.count <- sum(dublin.data.df$banking)
1510357055283:open.stations <- subset(dublin.data.df, status=='OPEN')
1510357055284:open.stations.count <- sum(dublin.data.df$status=='OPEN')
1510357055285:payment.active.stations <- subset(open.stations, banking==TRUE)
1510357117113:sum(dublin.data.df$status=='OPEN')
1510357133143:sum(dublin.data.df$status!='OPEN')
1510357136703:sum(dublin.data.df$status=='OPEN')
1510399174968:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1510399174973:"?contract=Dublin",
1510399174974:"&apiKey=",
1510399174974:api.key)
1510399174981:dublin.data <- GET(dublin.url)
1510399175451:dublin.data.json <- content(dublin.data, as="text")
1510399175480:dublin.data.df <- fromJSON(dublin.data.json)
1510399183915:View(dublin.data.df)
1510400647504:sum(dublin.data.df$bike_stands <= 20)
1510400665490:sum(dublin.data.df$bike_stands > 20 & dublin.data.df$bike_stands <= 30)
1510400674303:sum(dublin.data.df$bike_stands > 40)
1510400679614:sum(dublin.data.df$bike_stands > 30)
1510400757626:sum(dublin.data.df$bike_stands)
1510400765373:sum(dublin.data.df$available_bikes)
1510400771892:sum(dublin.data.df$available_bike_stands)
1510401122238:rm(open.stations)
1510401123823:rm(open.stations.count)
1510401128647:rm(payment.active.count)
1510401131651:rm(payment.active.stations)
1510401195929:require(dplyr)
1510401345441:ClassifyStation(bike.stands) {
1510401345443:if (bike.stands <= 20)
1510401345443:return ("small")
1510401345480:else if (bike.stands <=30)
1510401345481:return ("medium")
1510401345482:else
1510401345483:return ("large")
1510401345484:}
1510401361944:ClassifyStation <- function (bike.stands) {
1510401361945:if (bike.stands <= 20)
1510401361946:return ("small")
1510401361946:else if (bike.stands <=30)
1510401361946:return ("medium")
1510401361947:else
1510401361947:return ("large")
1510401361947:}
1510401367959:ClassifyStation(20)
1510401369420:ClassifyStation(21)
1510401370906:ClassifyStation(31)
1510401372289:ClassifyStation(41)
1510401595846:dublin.data.df <- mutate(dublin.data.df,class=ClassifyStation(bike_stands))
1510401618389:dublin.data.df <- mutate(dublin.data.df, class=bike_stands*2)
1510401636056:dublin.data.df <- mutate(dublin.data.df, class=ClassifyStation(dublin.data.df$bike_stands))
1510401648928:?mutate
1510401703970:str(dublin.data.df)
1510401720441:dublin.data.df <- mutate(dublin.data.df, class=ClassifyStation(bike_stands))
1510401753164:dublin.data.df$position
1510402233293:str(dublin.data.df)
1510402264630:position <- dublin.data.df$position
1510402285584:dublin.data.df$position <- NULL
1510402304587:dublin.data.df$position_lat <- position$lat
1510402326379:dublin.data.df$position_long <- position$lng
1510402329265:View(dublin.data.df)
1510402385019:dublin.data.df <- mutate(dublin.data.df, class=ClassifyStation(bike_stands))
1510402407397:View(dublin.data.df)
1510402524173:bike_stands <- dublin.data.df$bike_stands
1510402527591:bike_stands
1510402535637:ClassifyStation(bike_stands)
1510402630155:c(1, 2, 3) > 0
1510402650831:ClassifyStation(c(1, 2, 3))
1510402668100:?if
1510402676899:?
1510402676900:;
1510402680393:?for
1510402681860:;
1510402683573:;
1510402684128:;
1510402689881:?dplyr
1510402908274:ClassifyStation <- function (bike.stands) {
1510402908275:if (bike.stands <= 20) {
1510402908276:return ("small")
1510402908276:} else if (bike.stands <=30) {
1510402908277:return ("medium")
1510402908277:} else {
1510402908277:return ("large")
1510402908278:}
1510402908278:}
1510402912527:ClassifyStation(c(1, 2, 3))
1510403005178:debug(ClassifyStation)
1510403006367:ClassifyStation(c(1, 2, 3))
1510403241338:lapply(c(1, 2, 3), ClassifyStation)
1510403256479:undebug(ClassifyStation)
1510403258533:lapply(c(1, 2, 3), ClassifyStation)
1510403292219:sapply(c(1, 2, 3), ClassifyStation)
1510403310151:sapply(bike_stands, ClassifyStation)
1510403357638:rm(bike_stands)
1510403360871:dublin.data.df <- mutate(dublin.data.df, class=sapply(bike_stands, ClassifyStation)
1510403363848:)
1510403366438:View(dublin.data.df)
1510403593470:qplot(x=class, y=sum(bike_stands), data=dublin.data.df)
1510403611875:qplot(x=class, y=bike_stands, data=dublin.data.df)
1510403770025:?group_by
1510403809234:dublin.data.df <- group_by(dublin.data.df, class)
1510404076186:dublin.data.df
1510404127869:summarise(dublin.data.df, total_bike_stands=sum(bike_stands))
1510404189682:summarise(dublin.data.df, total_bike_stands=sum(bike_stands), total_available_stands=sum(available_bike_stands), total_available_bikes=sum(available_bikes))
1510404757554:class.saummary <- summarise(dublin.data.df, total_bike_stands=sum(bike_stands), total_available_stands=sum(available_bike_stands), total_available_bikes=sum(available_bikes))
1510404761811:View(class.saummary)
1510404827727:mutate(class.summary, percentage_used=total_available_stands*100/total_bike_stands)
1510404843074:class.summary <- class.saummary
1510404847261:rm(class.saummary)
1510404879754:mutate(class.summary, percentage_used=total_available_stands*100/total_bike_stands)
1510404926559:dublin.data.df <- mutate(dublin.data.df, percentage_used=available_stands*100/bike_stands)
1510404942700:dublin.data.df <- mutate(dublin.data.df, percentage_used=available_bike_stands*100/bike_stands)
1510405046025:dublin.data.df <- mutate(dublin.data.df, percentage_used=round(available_bike_stands*100/bike_stands, 2))
1510405048857:View(dublin.data.df)
1510405125605:dublin.data.df <- mutate(dublin.data.df,
1510405125606:class=sapply(bike_stands, ClassifyStation),
1510405125606:percentage_used=round(
1510405125607:available_bike_stands*100/bike_stands, 2))
1510405125676:class.summary <- summarise(dublin.data.df,
1510405125677:total_bike_stands=sum(bike_stands),
1510405125678:total_available_stands=sum(available_bike_stands),
1510405125679:total_available_bikes=sum(available_bikes),
1510405125680:percentage_used=round(
1510405125680:total_available_stands*100/total_bike_stands, 2))
1510405161073:dublin.data.df
1510405205657:group_by(dublin.data.df, class)
1510405238648:group_by
1510405241762:dublin.data.df <- mutate(dublin.data.df,
1510405241762:class=sapply(bike_stands, ClassifyStation),
1510405241763:percentage_used=round(
1510405241764:available_bike_stands*100/bike_stands, 2))
1510405241768:dublin.data.df <- group_by(dublin.data.df, class)
1510405241771:class.summary <- summarise(dublin.data.df,
1510405241771:total_bike_stands=sum(bike_stands),
1510405241772:total_available_stands=sum(available_bike_stands),
1510405241773:total_available_bikes=sum(available_bikes),
1510405241774:percentage_used=round(
1510405241775:total_available_stands*100/total_bike_stands, 2))
1510405250111:dublin.data.df <- mutate(dublin.data.df,
1510405250111:class=sapply(bike_stands, ClassifyStation),
1510405250113:percentage_used=round(
1510405250114:available_bike_stands*100/bike_stands, 2))
1510405271448:ungroup(dublin.data.df)
1510405276768:dublin.data.df
1510405285103:dublin.data.df <- ungroup(dublin.data.df)
1510405286587:dublin.data.df
1510405294603:View(dublin.data.df)
1510405406621:rm(class.summary)
1510405410787:dublin.data.df <- group_by(dublin.data.df, class)
1510405410789:class.summary <- summarise(dublin.data.df,
1510405410790:total_bike_stands=sum(bike_stands),
1510405410791:total_available_stands=sum(available_bike_stands),
1510405410792:total_available_bikes=sum(available_bikes),
1510405410794:percentage_used=round(
1510405410795:total_available_stands*100/total_bike_stands, 2))
1510405645956:ClassifyUtilisation <- function (utilisation.percentage) {
1510405645957:if (utilisation.percentage <= 33) {
1510405645957:return ("less")
1510405645958:} else if (bike.stands <= 66) {
1510405645958:return ("medium")
1510405645958:} else {
1510405645959:return ("high")
1510405645959:}
1510405645959:}
1510405782767:dublin.data.df <- fromJSON(dublin.data.json)
1510405782771:position <- dublin.data.df$position
1510405782772:dublin.data.df$position <- NULL
1510405782773:dublin.data.df$position_lat <- position$lat
1510405782774:dublin.data.df$position_long <- position$lng
1510405788223:dublin.data.df <- mutate(dublin.data.df,
1510405788224:class=sapply(bike_stands, ClassifyStation),
1510405788225:utilisation_percentage=round(
1510405788225:available_bike_stands*100/bike_stands, 2),
1510405788225:utilisation_class=sapply(
1510405788226:utilisation_percentage, ClassifyUtilisation))
1510405807409:dublin.data.df <- mutate(dublin.data.df,
1510405807410:class=sapply(bike_stands, ClassifyStation),
1510405807411:utilisation_percentage=round(
1510405807411:available_bike_stands*100/bike_stands, 2),
1510405807412:utilisation_class=sapply(
1510405807412:utilisation_percentage, ClassifyUtilisation))
1510405853110:dublin.data.df <- mutate(dublin.data.df,
1510405853111:class=sapply(bike_stands, ClassifyStation))
1510405857879:dublin.data.df <- fromJSON(dublin.data.json)
1510405857889:position <- dublin.data.df$position
1510405857889:dublin.data.df$position <- NULL
1510405857890:dublin.data.df$position_lat <- position$lat
1510405857891:dublin.data.df$position_long <- position$lng
1510405867426:dublin.data.df <- mutate(dublin.data.df,
1510405867427:class=sapply(bike_stands, ClassifyStation),
1510405867428:utilisation_percentage=round(
1510405867428:available_bike_stands*100/bike_stands, 2))
1510405876408:ClassifyUtilisation <- function (utilisation.percentage) {
1510405876409:if (utilisation.percentage <= 33) {
1510405876409:return ("less")
1510405876410:} else if (utilisation.percentage <= 66) {
1510405876410:return ("medium")
1510405876410:} else {
1510405876411:return ("high")
1510405876411:}
1510405876411:}
1510405881748:dublin.data.df <- fromJSON(dublin.data.json)
1510405881752:position <- dublin.data.df$position
1510405881752:dublin.data.df$position <- NULL
1510405881753:dublin.data.df$position_lat <- position$lat
1510405881754:dublin.data.df$position_long <- position$lng
1510405902742:dublin.data.df <- fromJSON(dublin.data.json)
1510405902746:position <- dublin.data.df$position
1510405902747:dublin.data.df$position <- NULL
1510405902748:dublin.data.df$position_lat <- position$lat
1510405902749:dublin.data.df$position_long <- position$lng
1510405902750:dublin.data.df <- mutate(dublin.data.df,
1510405902751:class=sapply(bike_stands, ClassifyStation),
1510405902751:utilisation_percentage=round(
1510405902752:available_bike_stands*100/bike_stands, 2),
1510405902752:utilisation_class=sapply(
1510405902752:utilisation_percentage, ClassifyUtilisation))
1510405930856:View(class.summary)
1510406255716:temp161 <- group_by(dublin.data.df, class, utilisation_class)
1510406288075:summarise(temp_161, total_bike_stands=sum(bike_stands),
1510406288076:total_available_stands=sum(available_bike_stands),
1510406288077:total_available_bikes=sum(available_bikes),
1510406288077:percentage_used=round(
1510406288078:total_available_stands*100/total_bike_stands, 2))
1510406299986:summarise(temp161, total_bike_stands=sum(bike_stands),
1510406299987:total_available_stands=sum(available_bike_stands),
1510406299988:total_available_bikes=sum(available_bikes),
1510406299989:percentage_used=round(
1510406299991:total_available_stands*100/total_bike_stands, 2))
1510406309669:summarise(temp161, total_bike_stands=sum(bike_stands),
1510406309669:total_available_stands=sum(available_bike_stands),
1510406309670:total_available_bikes=sum(available_bikes),
1510406309671:percentage_used=round(
1510406309671:total_available_stands*100/total_bike_stands, 2))
1510406360866:temp161
1510406375377:ungroup(temp161, utilisation_class)
1510406382309:temp161
1510406393401:temp161 <- group_by(dublin.data.df, class)
1510406403092:temp161 <- group_by(dublin.data.df, class, utilisation_class)
1510406427365:summarise(temp161, count(utilisation_class))
1510406434342:summarise(temp161, x=count(utilisation_class))
1510406452785:temp161
1510406598438:summarise(temp161)
1510406607712:summary(temp161)
1510406709068:?qplot
1510409344922:CrossTable
1510409350174:temp161
1510409380306:summarise(temp161, x=count(!bonus))
1510409394140:summarise(temp161, x=sum(!bonus))
1510409632606:summarise(temp161, x=sum(banking))
1510409678384:summarise(temp161, x=sum(!bonus))
1510409701940:qplot(x=class, y=sum(bonus), data=dublin.data.df)
1510409708300:qplot(x=class, y=sum(!bonus), data=dublin.data.df)
1510409747197:x <- summarise(temp161, x=sum(!bonus))
1510412454433:qplot(x=utilisation_class, y=x, data=x, m) + facet_grid(. ~ class)
1510412513536:qplot(x=utilisation_class, y=x, data=x, geom='bar') + facet_grid(. ~ class)
1510412522881:qplot(x=utilisation_class, y=x, data=x, geom='hist') + facet_grid(. ~ class)
1510412530346:qplot(x=utilisation_class, y=x, data=x, geom='line') + facet_grid(. ~ class)
1510412540137:qplot(x=utilisation_class, y=x, data=x) + facet_grid(. ~ class)
1510412579652:qplot(x=utilisation_class, y=x, data=x, ylim=0) + facet_grid(. ~ class)
1510412590844:qplot(x=utilisation_class, y=x, data=x, ylim=c(0, 25)) + facet_grid(. ~ class)
1510412684741:qplot(x=utilisation_class, y=x, data=x, ylim=c(0, 25), geom='histogram') + facet_grid(. ~ class)
1510412693870:qplot(x=utilisation_class, y=x, data=x, ylim=c(0, 25), geom='point') + facet_grid(. ~ class)
1510412699689:qplot(x=utilisation_class, y=x, data=x, ylim=c(0, 25), geom='bar') + facet_grid(. ~ class)
1510413029641:qplot(x=utilisation_class, y=x, data=x, group=utilisation_class, ylim=c(0, 25), geom='bar') + facet_grid(. ~ class)
1510413067984:qplot(x=utilisation_class, x, data=x, group=utilisation_class, ylim=c(0, 25)) + facet_grid(. ~ class)
1510413089461:qplot(x=utilisation_class, data=x, group=utilisation_class, geom='bar', ylim=c(0, 25)) + facet_grid(. ~ class)
1510414283868:x
1510414503086:class.summary
1510414524965:class.summary
1510414637538:sum(dublin.data.df$pay)
1510414641830:sum(dublin.data.df$banking)
1510414643612:sum(dublin.data.df$banking)
1510415098410:summary
1510415106985:rm(x)
1510415111266:View(class.summary)
1510415161064:x <- summarise(temp161, x=sum(!bonus))
1510415162647:x
1510415321662:table(x$class, x$utilisation_class)
1510415345802:table(dublin.data.df$class, dublin.data.df$utilisation_class)
1510415381660:levels(dublin.data.df$utilisation_class)
1510415443411:dublin.data.df <- fromJSON(dublin.data.json)
1510415443417:position <- dublin.data.df$position
1510415443417:dublin.data.df$position <- NULL
1510415443418:dublin.data.df$position_lat <- position$lat
1510415443419:dublin.data.df$position_long <- position$lng
1510415443421:dublin.data.df <- mutate(dublin.data.df,
1510415443421:class=sapply(bike_stands, ClassifyStation),
1510415443422:utilisation_percentage=round(
1510415443423:available_bike_stands*100/bike_stands, 2),
1510415443424:utilisation_class=sapply(
1510415443425:utilisation_percentage, ClassifyUtilisation))
1510415443436:dublin.data.df$class <- as.factor(dublin.data.df$class)
1510415443437:dublin.data.df$utilisation_class <- as.factor(dublin.data.df$utilisation_class)
1510415453289:?as.factor
1510415675962:ClassifyStation <- function (bike.stands) {
1510415675963:if (bike.stands <= 20) {
1510415675964:return ("small")
1510415675964:} else if (bike.stands <= 30) {
1510415675964:return ("medium")
1510415675965:} else {
1510415675965:return ("large")
1510415675965:}
1510415675966:}
1510415675966:ClassifyUtilisation <- function (utilisation.percentage) {
1510415675967:if (utilisation.percentage <= 33) {
1510415675968:return ("low")
1510415675968:} else if (utilisation.percentage <= 66) {
1510415675969:return ("medium")
1510415675971:} else {
1510415675972:return ("high")
1510415675974:}
1510415675975:}
1510415686788:dublin.data.df <- fromJSON(dublin.data.json)
1510415686796:position <- dublin.data.df$position
1510415686797:dublin.data.df$position <- NULL
1510415686798:dublin.data.df$position_lat <- position$lat
1510415686799:dublin.data.df$position_long <- position$lng
1510415686800:dublin.data.df <- mutate(dublin.data.df,
1510415686801:class=sapply(bike_stands, ClassifyStation),
1510415686802:utilisation_percentage=round(
1510415686805:available_bike_stands*100/bike_stands, 2),
1510415686806:utilisation_class=sapply(
1510415686808:utilisation_percentage, ClassifyUtilisation))
1510415686823:dublin.data.df$class <- as.factor(dublin.data.df$class,
1510415686823:levels=c('small', 'medium', 'large'),
1510415686824:ordered=TRUE)
1510415686825:dublin.data.df$utilisation_class <- as.factor(dublin.data.df$utilisation_class,
1510415686825:levels=c('low', 'medium', 'high'))
1510415735823:dublin.data.df <- fromJSON(dublin.data.json)
1510415735826:position <- dublin.data.df$position
1510415735827:dublin.data.df$position <- NULL
1510415735828:dublin.data.df$position_lat <- position$lat
1510415735829:dublin.data.df$position_long <- position$lng
1510415735830:dublin.data.df <- mutate(dublin.data.df,
1510415735830:class=sapply(bike_stands, ClassifyStation),
1510415735831:utilisation_percentage=round(
1510415735832:available_bike_stands*100/bike_stands, 2),
1510415735834:utilisation_class=sapply(
1510415735835:utilisation_percentage, ClassifyUtilisation))
1510415735843:dublin.data.df$class <- as.factor(dublin.data.df$class,
1510415735843:labels=c('small', 'medium', 'large'),
1510415735844:ordered=TRUE)
1510416374723:?as.ordered
1510416451940:dublin.data.df <- fromJSON(dublin.data.json)
1510416451949:position <- dublin.data.df$position
1510416451950:dublin.data.df$position <- NULL
1510416451951:dublin.data.df$position_lat <- position$lat
1510416451952:dublin.data.df$position_long <- position$lng
1510416451954:dublin.data.df <- mutate(dublin.data.df,
1510416451955:class=sapply(bike_stands, ClassifyStation),
1510416451956:utilisation_percentage=round(
1510416451956:available_bike_stands*100/bike_stands, 2),
1510416451956:utilisation_class=sapply(
1510416451957:utilisation_percentage, ClassifyUtilisation))
1510416568213:dublin.data.df$class <- as.factor(dublin.data.df$class,
1510416568215:levels=c('small', 'medium', 'large'))
1510416581804:dublin.data.df$class <- factor(dublin.data.df$class,
1510416581805:levels=c('small', 'medium', 'large'))
1510416594319:dublin.data.df$utilisation_class <- factor(dublin.data.df$utilisation_class,
1510416594320:levels=c('low', 'medium', 'high'))
1510416618121:dublin.data.df$class <- factor(dublin.data.df$class,
1510416618122:levels=c('small', 'medium', 'large'),
1510416618123:ordered=TRUE)
1510416618123:dublin.data.df$utilisation_class <- factor(dublin.data.df$utilisation_class,
1510416618124:levels=c('low', 'medium', 'high'),
1510416618125:ordered=TRUE)
1510416622209:table(dublin.data.df$class, dublin.data.df$utilisation_class)
1510416643260:dublin.data.df <- group_by(dublin.data.df, class)
1510416643264:class.summary <- summarise(dublin.data.df,
1510416643265:total_bike_stands=sum(bike_stands),
1510416643267:total_available_stands=sum(available_bike_stands),
1510416643268:total_available_bikes=sum(available_bikes),
1510416643269:percentage_used=round(
1510416643270:total_available_stands*100/total_bike_stands, 2))
1510416646001:View(class.summary)
1510416924758:x <- table(dublin.data.df$class, dublin.data.df$utilisation_class)
1510416927242:View(x)
1510416950924:x
1510416961770:typeof(x)
1510416967826:as.data.frame(x)
1510416980010:?table
1510417046546:as.data.frame.matrix(table)
1510417052093:as.data.frame.matrix(x)
1510417057493:x <- as.data.frame.matrix(x)
1510417154199:dublin.data.df <- group_by(dublin.data.df, class)
1510417154205:class.summary <- summarise(dublin.data.df,
1510417154205:total_bike_stands=sum(bike_stands),
1510417154206:total_available_stands=sum(available_bike_stands),
1510417154207:total_available_bikes=sum(available_bikes),
1510417154208:percentage_used=round(
1510417154209:total_available_stands*100/total_bike_stands, 2))
1510417154214:dublin.data.df <- ungroup(dublin.data.df)
1510417163026:class.summary
1510424950525:x
1510424986746:rm(x)
1510424991208:View(temp161)
1510424998441:temp161
1510425004394:rm(temp161)
1510425015484:View(class.summary)
1510425109510:class.summary.report <- class.summary
1510425198623:class.summary.report <- select(class.summary.report, class)
1510425203742:class.summary.report
1510425207183:class.summary.report <- class.summary
1510425216142:class.summary.report <- select(class.summary.report, class, percentage_used)
1510425218502:class.summary.report
1510425293367:class.summary <- select(class.summary.report, class, total_bike_stands, percentage_used)
1510425307641:View(class.summary)
1510425333788:?select
1510425380193:select(class.summary.report, class, total_bike_stands, percentage_used)
1510425387136:select(class.summary.report, c(class, total_bike_stands, percentage_used))
1510425398695:class.summary <- select(class.summary, class, total_bike_stands, percentage_used)
1510425401949:class.summary
1510425493304:colnames(class.summary) <- c('Class', 'Total bike stands',
1510425493304:'Percentage utilisation')
1510425501001:View(class.summary)
1510425549473:View(utilisation.by.size)
1510425555600:utilisation.by.size <- table(dublin.data.df$class,
1510425555601:dublin.data.df$utilisation_class)
1510425555602:utilisation.by.size <- as.data.frame.matrix(utilisation.by.size)
1510425555603:# View(utilisation.by.size)
1510425559582:View(utilisation.by.size)
1510426516343:Sys.Date()
1510426521611:Sys.time()
1510426555723:format(Sys.time(), "%a %b %d %X %Y")
1510426586439:format(Sys.time(), "%a %b %Y %d %X")
1510426597663:format(Sys.time(), "%a %b %d %Y %X")
1510426607603:format(Sys.time(), "%a %b %d %Y %H")
1510426611718:format(Sys.time(), "%a %b %d %Y %H %m")
1510426615136:format(Sys.time(), "%a %b %d %Y %H %M")
1510426624190:format(Sys.time(), "%a %b %d %Y %I %M")
1510426631236:?format
1510426771976:format(Sys.time(), "%A %b %d %Y %I %M")
1510426791609:format(Sys.time(), "%A %b %d %Y %I %M %P")
1510426794468:format(Sys.time(), "%A %b %d %Y %I %M %p")
1510426818275:format(Sys.time(), "%A, %b %d %Y %I:%M %p")
1510426835883:format(Sys.time(), "%I:%M %p on %A, %b %d %Y ")
1510426860880:format(Sys.time(), "%l:%M %p on %A, %b %d %Y ")
1510426869600:format(Sys.time(), "%l:%M %p on %A, %b %d %Y")
1510426898023:trimws(format(Sys.time(), "%l:%M %p on %A, %b %d %Y"))
1510426992387:View(dublin.data.df)
1510427057501:open.dublin.data.df <- subset(dublin.data.df, status=="OPEN")
1510428393731:'a' + 'b'
1510428420587:GetOpenStations <- function (df) {
1510428420588:total.stations.count <- nrow(df)
1510428420588:open.stations.count <- sum(df$status=="OPEN")
1510428420589:result <- as.character(open.stations.count)
1510428420589:if (open.stations.count == total.stations.count) {
1510428420590:result <- paste('all', result)
1510428420590:}
1510428420590:return(result)
1510428420591:}
1510428434837:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1510428434838:"?contract=Dublin",
1510428434839:"&apiKey=",
1510428434839:kAPIKey)
1510428434840:dublin.data <- GET(dublin.url)
1510428434840:dublin.data.json <- content(dublin.data, as="text")
1510428434842:dublin.data.df <- fromJSON(dublin.data.json)
1510428446431:kAPIKey <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1510428448783:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1510428448784:"?contract=Dublin",
1510428448785:"&apiKey=",
1510428448785:kAPIKey)
1510428448786:dublin.data <- GET(dublin.url)
1510428448988:dublin.data.json <- content(dublin.data, as="text")
1510428448990:dublin.data.df <- fromJSON(dublin.data.json)
1510428463560:GetOpenStations(dublin.data.df)
1510428490441:dublin.data.df$status = 'CLOSED'
1510428491903:GetOpenStations(dublin.data.df)
1510428496353:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1510428496354:"?contract=Dublin",
1510428496355:"&apiKey=",
1510428496355:kAPIKey)
1510428496357:dublin.data <- GET(dublin.url)
1510428496539:dublin.data.json <- content(dublin.data, as="text")
1510428496541:dublin.data.df <- fromJSON(dublin.data.json)
1510428521459:dublin.data.json <- content(dublin.data, as="text")
1510428531638:dublin.data.json <- content(dublin.data, as="text", encoding='UTF-8')
1510428873527:knitr::opts_chunk$set(echo=TRUE)
1510428873533:options(width=40)
1510428873536:require(ggplot2)
1510428873537:require(readr)
1510428873578:View(utilisation.by.size)
1510428885884:source("BikeInfo.R")
1510428889682:View(utilisation.by.size)
1510428991795:require(knitr)
1510428995318:require(knitr)
1510429057828:kable(utilisation.by.size, caption="Utilisation of bike stations in Dublin - classified by size of the station.")
1510429101727:```{r two_one_table_a, echo=FALSE, results='asis'}
1510429106255:kable(utilisation.by.size, caption="Utilisation of bike stations in Dublin - classified by size of the station.")
1510429611510:?kable
1510429621596:kable(utilisation.by.size,
1510429621597:caption="Utilisation of bike stations in Dublin - classified by size of
1510429621598:the station.",
1510429621599:format="html")
1510430166279:install.packages('DT')
1510430174344:require(DT)
1510430294662:knitr::opts_chunk$set(echo=TRUE)
1510430294664:options(width=40)
1510430294666:require(DT)
1510430294668:require(ggplot2)
1510430294670:require(knitr)
1510430294672:require(readr)
1510430294680:datatable(utilisation.by.size)
1510430314088:?datatable
1510430388625:datatable(utilisation.by.size, autoHideNavigation=TRUE)
1510436431079:# API Key f3af0867d0ae0de6957fa29b4469667fba4e229e
1510436431081:# GET https://api.jcdecaux.com/vls/v1/stations?contract={contract_name}&
1510436431081:# apiKey={api_key}
1510436431081:require(dplyr)
1510436431082:require(httr)
1510436431083:require(jsonlite)
1510436431084:kAPIKey <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1510436431085:ClassifyStation <- function (bike.stands) {
1510436431086:if (bike.stands <= 20) {
1510436431087:return ("Small")
1510436431088:} else if (bike.stands <= 30) {
1510436431089:return ("Medium")
1510436431090:} else {
1510436431091:return ("Large")
1510436431091:}
1510436431093:}
1510436431094:ClassifyUtilisation <- function (utilisation.percentage) {
1510436431095:if (utilisation.percentage <= 33) {
1510436431095:return ("Low")
1510436431095:} else if (utilisation.percentage <= 66) {
1510436431096:return ("Medium")
1510436431096:} else {
1510436431097:return ("High")
1510436431097:}
1510436431098:}
1510436431099:GetOpenStations <- function (df) {
1510436431100:total.stations.count <- nrow(df)
1510436431100:open.stations.count <- sum(df$status=="OPEN")
1510436431101:result <- as.character(open.stations.count)
1510436431101:if (open.stations.count == total.stations.count) {
1510436431102:result <- paste('all', result)
1510436431103:}
1510436431104:return(result)
1510436431105:}
1510436431107:# Going ahead with Dublin
1510436431107:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1510436431109:"?contract=Dublin",
1510436431109:"&apiKey=",
1510436431112:kAPIKey)
1510436431173:dublin.data <- GET(dublin.url)
1510436431365:dublin.data.json <- content(dublin.data, as="text", encoding='UTF-8')
1510436431368:dublin.data.df <- fromJSON(dublin.data.json)
1510436431373:open.stations <- subset(dublin.data.df, status=="OPEN")
1510436431375:position <- open.stations$position
1510436431377:open.stations$position <- NULL
1510436431378:open.stations$position_lat <- position$lat
1510436431379:open.stations$position_long <- position$lng
1510436431381:open.stations <- mutate(open.stations,
1510436431381:class=sapply(bike_stands, ClassifyStation),
1510436431382:utilisation_percentage=round(
1510436431383:available_bike_stands*100/bike_stands, 2),
1510436431383:utilisation_class=sapply(
1510436431384:utilisation_percentage, ClassifyUtilisation))
1510436431426:open.stations$class <- factor(open.stations$class,
1510436431426:levels=c('small', 'medium', 'large'),
1510436431428:ordered=TRUE)
1510436431429:open.stations$utilisation_class <- factor(open.stations$utilisation_class,
1510436431429:levels=c('low', 'medium', 'high'),
1510436431430:ordered=TRUE)
1510436431431:utilisation.by.size <- table(open.stations$class,
1510436431431:open.stations$utilisation_class)
1510436431433:utilisation.by.size <- as.data.frame.matrix(utilisation.by.size)
1510436431434:open.stations <- group_by(open.stations, class)
1510436431439:class.summary <- summarise(open.stations,
1510436431439:total_bike_stands=sum(bike_stands),
1510436431440:total_available_stands=sum(available_bike_stands),
1510436431441:total_available_bikes=sum(available_bikes),
1510436431441:percentage_used=round(
1510436431441:total_available_stands*100/total_bike_stands, 2))
1510436431459:open.stations <- ungroup(open.stations)
1510436431460:class.summary <- select(class.summary, class, total_bike_stands,
1510436431460:percentage_used)
1510436431474:colnames(class.summary) <- c('Class', 'Total bike stands',
1510436431474:'Percentage utilisation')
1510436434807:View(utilisation.by.size)
1510452175621:install.packages('geosphere')
1510452184774:require(geosphere)
1510452226893:distGeo(c(-6.278198, 53.34956), (-6.265305, 53.35346))
1510452237076:distGeo(c(-6.278198, 53.34956), c(-6.265305, 53.35346))
1510452335643:View(open.stations)
1510452365506:dublin.data.df <- fromJSON(dublin.data.json)
1510452365515:open.stations <- subset(dublin.data.df, status=="OPEN")
1510452365516:position <- open.stations$position
1510452365518:open.stations$position <- NULL
1510452365519:open.stations$position_lat <- position$lat
1510452365520:open.stations$position_long <- position$lng
1510452365521:open.stations <- mutate(open.stations,
1510452365522:class=sapply(bike_stands, ClassifyStation),
1510452365522:utilisation_percentage=round(
1510452365522:available_bike_stands*100/bike_stands, 2),
1510452365523:utilisation_class=sapply(
1510452365523:utilisation_percentage, ClassifyUtilisation))
1510452365540:open.stations$class <- factor(open.stations$class,
1510452365541:levels=c('Small', 'Medium', 'Large'),
1510452365542:ordered=TRUE)
1510452365543:open.stations$utilisation_class <- factor(open.stations$utilisation_class,
1510452365543:levels=c('Low', 'Medium', 'High'),
1510452365544:ordered=TRUE)
1510452368219:View(open.stations)
1510453223690:GetDistanceAndTime <- function (origins, destinations) {
1510453223693:google.distance.matrix.url <- paste0("http://maps.googleapis.com/maps/api/",
1510453223693:"distancematrix/json?origins=",
1510453223696:origins[1], ",", origins[2],
1510453223697:"&destinations=",
1510453223698:destinations[1], ",", destinations[2])
1510453223698:distance.data <- GET(google.distance.matrix.url)
1510453223699:distance.data.json <- content(distance.data, as="text", encoding="UTF-8")
1510453223699:distance.data.df <- fromJSON(distance.data.json)
1510453223699:}
1510453236405:GetDistanceAndTime(c(-6.278198, 53.34956), c(-6.265305, 53.35346))
1510453247617:GetDistanceAndTime <- function (origins, destinations) {
1510453247618:google.distance.matrix.url <- paste0("http://maps.googleapis.com/maps/api/",
1510453247627:"distancematrix/json?origins=",
1510453247628:origins[1], ",", origins[2],
1510453247629:"&destinations=",
1510453247629:destinations[1], ",", destinations[2])
1510453247631:distance.data <- GET(google.distance.matrix.url)
1510453247631:distance.data.json <- content(distance.data, as="text", encoding="UTF-8")
1510453247633:distance.data.df <- fromJSON(distance.data.json)
1510453247634:return(distance.data.df)
1510453247635:}
1510453251020:GetDistanceAndTime(c(-6.278198, 53.34956), c(-6.265305, 53.35346))
1510453270535:google.distance.matrix.url
1510453289052:GetDistanceAndTime(c(-6.278198, 53.34956), c(-6.265305, 53.35346))
1510453296460:origins <- c(-6.278198, 53.34956)
1510453305046:destinations <- c(-6.265305, 53.35346)
1510453443520:google.distance.matrix.url <- paste0("http://maps.googleapis.com/maps/api/",
1510453443523:"distancematrix/json?origins=",
1510453443524:origins[1], ",", origins[2],
1510453443524:"&destinations=",
1510453443525:destinations[1], ",", destinations[2])
1510453449669:google.distance.matrix.url
1510453493815:origins <- c(53.34956, -6.278198)
1510453503044:destinations <- c(53.35346, -6.265305)
1510453507681:google.distance.matrix.url <- paste0("http://maps.googleapis.com/maps/api/",
1510453507681:"distancematrix/json?origins=",
1510453507682:origins[1], ",", origins[2],
1510453507682:"&destinations=",
1510453507683:destinations[1], ",", destinations[2])
1510453511284:google.distance.matrix.url
1510453536014:GetDistanceAndTime(origins, destinations)
1510453556035:distance.data <- GET(google.distance.matrix.url)
1510453561430:distance.data.json <- content(distance.data, as="text", encoding="UTF-8")
1510453561431:distance.data.df <- fromJSON(distance.data.json)
1510453565420:View(distance.data.df)
1510453596300:distance.data.df$rows
1510453600878:distance.data.df$elements
1510453621365:distance.data.df$rows$elements$distance
1510453624793:distance.data.df$rows$elements
1510453659857:distance.data.df$rows$elements[[1]]$distance$value
1510453670110:distance.data.df$rows$elements[[1]]$duration$value
1510453767890:GetDistanceAndTime <- function (origins, destinations) {
1510453767892:google.distance.matrix.url <- paste0("http://maps.googleapis.com/maps/api/",
1510453767892:"distancematrix/json?origins=",
1510453767892:origins[1], ",", origins[2],
1510453767893:"&destinations=",
1510453767893:destinations[1], ",", destinations[2])
1510453767893:distance.data <- GET(google.distance.matrix.url)
1510453767893:distance.data.json <- content(distance.data, as="text", encoding="UTF-8")
1510453767894:distance.data.df <- fromJSON(distance.data.json)
1510453767894:distance <- distance.data.df$rows$elements[[1]]$distance$value
1510453767894:duration <- distance.data.df$rows$elements[[1]]$duration$value
1510453767894:return(c(distance, duration))
1510453767894:}
1510453774340:GetDistanceAndTime(origins, destinations)
1510453779103:GetDistanceAndTime(origins, destinations)[1]
1510453780748:GetDistanceAndTime(origins, destinations)[2]
1510454280547:x <- c(c(1, 2), c(3, 4))
1510454284341:c[1]
1510454288466:x[1]
1510454291531:x[2]
1510454320027:destinations <- c(df$position_lat, df$position_long)
1510454340979:destinations <- c(open.stations$position_lat, open.stations$position_long)
1510454356738:destinations
1510454599036:here <- origins
1510454619307:open.stations <- mutate(open.stations, distance=GetDistanceAndTime(here,
1510454619308:c(position_lat, position_long)))
1510454690243:df <- open.stations
1510454697320:df <- mutate(df, distance=GetDistanceAndTime(origins=here,
1510454697320:destinations=c(position_lat, position_long)))
1510454776970:?sapply
1510455186237:?sum
1510455189327:sum
1510455196677:debug(sum)
1510455204724:sum(c(2, 3))
1510455213353:undebug(sum)
1510455215551:undebug(sum)
1510455244253:x <- data.frame(a=1:5, b=6:10)
1510455245168:x
1510455262163:mutate(x, c=a+b)
1510455268259:mutate(x, c=sum(a,b))
1510455271273:mutate(x, c=sum(a,b))
1510477544057:mutate(x, c=sapply(c(a, b), sum)
1510477546261:)
1510478011893:?rowwise
1510478047769:View(open.stations)
1510478107605:x
1510478141412:x %>% rowwise() %>% mutate(c=sum(a,b))
1510478346518:here
1510478352382:df %>% rowwise() %>% mutate(distance=GetDistanceAndTime(
1510478352382:origins=here,
1510478352383:destinations=c(position_lat,
1510478352383:position_long)))
1510478378990:df %>% rowwise() %>% mutate(distance=GetDistanceAndTime(
1510478378990:origins=here,
1510478378991:destinations=c(position_lat,
1510478378991:position_long))[1])
1510478420046:df <- df %>% rowwise() %>% mutate(distance=GetDistanceAndTime(
1510478420046:origins=here,
1510478420047:destinations=c(position_lat,
1510478420047:position_long))[1])
1510478438618:View(df)
1510478455624:here
1510478887187:?read_csv
1510479062148:?arrange
1510479135264:df <- arrange(df, distance)
1510479144919:head(distance)
1510479147191:head(df)
1510479156133:View(df)
1510480874154:y <- head(df)
1510480877007:y
1510480885470:y <- head(df, 5)
1510480886696:y
1510521780483:y
1510521785274:View(y)
1510521838727:qplot(x=name, y=distance, data=y)
1510521857817:qplot(x=name, y=distance, data=y, geom='bar')
1510521881494:qplot(x=name, y=distance, data=y, geom='line')
1510521898292:qplot(x=name, y=distance, data=y, geom='bar')
1510521902322:qplot(x=name, y=distance, data=y)
1510522135297:y
1510522138752:View(y)
1510522348840:x <- c(5,17,31,9,17,10,30,28,16,29,14,34)
1510522348842:y <- c(1,2,3,4,5,6,7,8,9,10,11,12)
1510522348843:day <- c(1,2,3,4,5,6,7,8,9,10,11,12)
1510522363470:df1 <- data.frame(x, y, day)
1510522363472:df2 <- melt(df1, id.vars='day')
1510522363473:head(df2)
1510522369301:require(reshape)
1510522372078:df1 <- data.frame(x, y, day)
1510522372080:df2 <- melt(df1, id.vars='day')
1510522372084:head(df2)
1510522380309:View(df1)
1510522381698:View(df2)
1510522383224:View(df1)
1510522384994:View(df2)
1510522386710:View(df1)
1510522396213:View(df2)
1510522426679:y <- head(df, 5)
1510522481084:z <- melt(y, id.vars='name')
1510522497548:?melt
1510522532142:require(reshape2)
1510522535814:z <- melt(y, id.vars='name')
1510522544026:y
1510522554232:?melt
1510522580601:z <- melt(y, value.name='name')
1510522664013:y
1510522673343:y <- data.frame(y)
1510522673838:y
1510522679278:z <- melt(y, value.name='name')
1510522688793:z <- melt(y, id.vars='name')
1510522691909:z
1510522772360:z
1510522801064:z2 <- filter(z, variable%in%c('distance', 'bikes_available'))
1510522813912:z2 <- filter(z, variable%in%c('distance', 'available_bikes'))
1510522816113:z2
1510522850233:qplot(x=name, y=value, data=z2)
1510522886303:qplot(x=name, y=value, data=z2, fill=variable)
1510522901735:qplot(x=name, y=value, data=z2, fill=variable) + geom_bar(stat='identity', position='dodge')
1510522918320:qplot(x=name, y=value, data=z2, fill=variable) + geom_bar(stat='identity')
1510522932335:qplot(x=name, y=value, data=z2, fill=variable) + geom_bar(stat='identity', position='dodge')
1510522948833:qplot(x=name, y=value, data=z2, fill=variable) + geom_bar(position='dodge')
1510522951393:qplot(x=name, y=value, data=z2, fill=variable) + geom_bar(stat='identity', position='dodge')
1510524233091:qplot(x=name, y=distance, data=y, fill=variable) + geom_bar(stat='identity')
1510524242606:qplot(x=name, y=distance, data=y, fill=distance) + geom_bar(stat='identity')
1510524277408:qplot(x=name, y=distance, data=y, fill=distance) + geom_bar(stat='identity', position='dodge')
1510524287679:qplot(x=name, y=distance, data=y, fill=distance) + geom_bar(stat='identity')
1510524304840:qplot(x=name, y=distance, data=y, fill=distance) + geom_bar(stat='identity', position='dodge')
1510524326648:qplot(x=name, y=distance, data=y, fill=distance, geom='bar') + geom_bar(stat='identity', position='dodge')
1510524381679:qplot(x=name, y=distance, data=y, fill=distance, geom='blank') + geom_bar(stat='identity', position='dodge')
1510524505014:y <- arrange(y, distance)
1510524507111:qplot(x=name, y=distance, data=y, fill=distance, geom='blank') + geom_bar(stat='identity', position='dodge')
1510524581540:y <- transform(y, reorder(distance))
1510524621923:y <- transform(y, distance=reorder(distance))
1510524715200:qplot(x=name, y=distance, data=y, fill=distance, geom='blank') + geom_bar(stat='identity', position='dodge') + qplot(x=name, y=available_bikes, data=y, fill=available_bikes, geom=blank)
1510524720354:qplot(x=name, y=distance, data=y, fill=distance, geom='blank') + geom_bar(stat='identity', position='dodge') + qplot(x=name, y=available_bikes, data=y, fill=available_bikes, geom='blank')
1510524741535:qplot(x=name, y=available_bikes, data=y, fill=available_bikes, geom='blank') + geom_bar(stat='identity', position='dodge')
1510524877408:specie=c(rep("sorgho" , 3) , rep("poacee" , 3) , rep("banana" , 3) , rep("triticum" , 3) )
1510524877410:condition=rep(c("normal" , "stress" , "Nitrogen") , 4)
1510524877411:value=abs(rnorm(12 , 0 , 15))
1510524877414:data=data.frame(specie,condition,value)
1510524879115:data
1510524953405:?stack
1510525104565:y
1510525123995:y2 <- select(y, position_lat, position_long)
1510525125401:yw
1510525127519:y2
1510525218691:GetNearestStationsInfo <- function (df, here=c(53.349809, -6.260232), drop=F) {
1510525218692:df <- AddDistanceFromHere(df, here)
1510525218693:df <- ifelse(drop,
1510525218693:filter(select(df, name, distance, available_bike_stands),
1510525218693:available_bike_stands>0),
1510525218694:filter(select(df, name, distance, available_bikes),
1510525218694:available_bikes>0))
1510525218694:df <- arrange(df, distance)
1510525218695:return(head(df, 5))
1510525218695:}
1510525231492:df <- GetNearestStationsInfo(open.stations)
1510525237316:AddDistanceFromHere <- function (df, here=c(53.349809, -6.260232)) {
1510525237316:destinations <- c(df$position_lat, df$position_long)
1510525237317:distances.and.times <- GetDistanceAndTime(origins=here,
1510525237317:destinations=destinations)
1510525237318:df <- mutate(df, distance=GetDistanceAndTime(origins=here,
1510525237318:destinations=c(position_lat,
1510525237318:position_long)))
1510525237318:df <- df %>% rowwise() %>% mutate(distance=GetDistanceAndTime(
1510525237319:origins=here,
1510525237320:destinations=c(position_lat,
1510525237321:position_long))[1])
1510525237322:return(df)
1510525237323:}
1510525241785:df <- GetNearestStationsInfo(open.stations)
1510525285774:AddDistanceFromHere <- function (df, here=c(53.349809, -6.260232)) {
1510525285774:destinations <- c(df$position_lat, df$position_long)
1510525285775:distances.and.times <- GetDistanceAndTime(origins=here,
1510525285775:destinations=destinations)
1510525285776:# df <- mutate(df, distance=GetDistanceAndTime(origins=here,
1510525285776:#                                              destinations=c(position_lat,
1510525285776:#                                                             position_long)))
1510525285776:df <- df %>% rowwise() %>% mutate(distance=GetDistanceAndTime(
1510525285776:origins=here,
1510525285777:destinations=c(position_lat,
1510525285777:position_long))[1])
1510525285777:return(df)
1510525285777:}
1510525288799:df <- GetNearestStationsInfo(open.stations)
1510525313660:df <- GetNearestStationsInfo(open.stations)
1510525319748:GetNearestStationsInfo <- function (df, here=c(53.349809, -6.260232), drop=F) {
1510525319748:df <- AddDistanceFromHere(df, here)
1510525319749:df <- ifelse(drop,
1510525319749:filter(select(df, name, distance, available_bike_stands),
1510525319750:available_bike_stands>0),
1510525319750:filter(select(df, name, distance, available_bikes),
1510525319750:available_bikes>0))
1510525319750:return(head(df, 5))
1510525319751:}
1510525325425:df <- GetNearestStationsInfo(open.stations)
1510525339221:df
1510525366139:here=c(53.349809, -6.260232)
1510525382536:df <- AddDistanceFromHere(open.stations, here)
1510525456626:AddDistanceFromHere <- function (df, here=c(53.349809, -6.260232)) {
1510525456627:# destinations <- c(df$position_lat, df$position_long)
1510525456628:# distances.and.times <- GetDistanceAndTime(origins=here,
1510525456628:#                                           destinations=destinations)
1510525456629:# df <- mutate(df, distance=GetDistanceAndTime(origins=here,
1510525456629:#                                              destinations=c(position_lat,
1510525456629:#                                                             position_long)))
1510525456631:df <- df %>% rowwise() %>% mutate(distance=GetDistanceAndTime(
1510525456632:origins=here,
1510525456633:destinations=c(position_lat,
1510525456634:position_long))[1])
1510525456635:return(df)
1510525456636:}
1510525459691:df <- AddDistanceFromHere(open.stations, here)
1510525468130:df
1510525473476:View(df)
1510525491496:df <- GetNearestStationsInfo(open.stations)
1510525504245:df
1510525517143:df <- AddDistanceFromHere(open.stations, here)
1510525525495:df
1510525541854:filter(select(df, name, distance, available_bike_stands),
1510525541856:available_bike_stands>0)
1510525565117:drop=F
1510525566627:drop
1510525571805:df <- ifelse(drop,
1510525571806:filter(select(df, name, distance, available_bike_stands),
1510525571807:available_bike_stands>0),
1510525571808:filter(select(df, name, distance, available_bikes),
1510525571808:available_bikes>0))
1510525572899:df
1510525611030:df <- AddDistanceFromHere(open.stations, here)
1510525778884:GetNearestStationsInfo <- function (df, here=c(53.349809, -6.260232), drop=F) {
1510525778889:df <- AddDistanceFromHere(df, here)
1510525778890:if (drop) {
1510525778891:df <- df %>%
1510525778891:select(name, distance, available_bike_stands) %>%
1510525778892:filter(available_bike_stands>0)
1510525778892:} else {
1510525778892:df <- df %>%
1510525778893:select(df, name, distance, available_bikes) %>%
1510525778893:filter(available_bikes>0)
1510525778893:}
1510525778894:return(head(df, 5))
1510525778894:}
1510525780585:df
1510525804505:df <- GetNearestStationsInfo(open.stations)
1510525900390:df <- AddDistanceFromHere(open.stations, here)
1510525938484:df <- df %>%
1510525938484:select(name, distance, available_bikes) %>%
1510525938485:filter(available_bikes>0)
1510525939792:df
1510525946462:AddDistanceFromHere <- function (df, here=c(53.349809, -6.260232)) {
1510525946463:# destinations <- c(df$position_lat, df$position_long)
1510525946464:# distances.and.times <- GetDistanceAndTime(origins=here,
1510525946464:#                                           destinations=destinations)
1510525946464:# df <- mutate(df, distance=GetDistanceAndTime(origins=here,
1510525946465:#                                              destinations=c(position_lat,
1510525946465:#                                                             position_long)))
1510525946465:df <- df %>% rowwise() %>%
1510525946465:mutate(distance=GetDistanceAndTime(origins=here,
1510525946466:destinations=c(position_lat,
1510525946466:position_long))[1])
1510525946466:return(df)
1510525946466:}
1510525946467:GetNearestStationsInfo <- function (df, here=c(53.349809, -6.260232), drop=F) {
1510525946467:df <- AddDistanceFromHere(df, here)
1510525946469:if (drop) {
1510525946469:df <- df %>%
1510525946469:select(name, distance, available_bike_stands) %>%
1510525946469:filter(available_bike_stands>0)
1510525946470:} else {
1510525946470:df <- df %>%
1510525946470:select(name, distance, available_bikes) %>%
1510525946470:filter(available_bikes>0)
1510525946471:}
1510525946471:return(head(df, 5))
1510525946471:}
1510525951123:df <- GetNearestStationsInfo(open.stations)
1510525962509:df
1510525989809:GetNearestStationsInfo <- function (df, here=c(53.349809, -6.260232), drop=F) {
1510525989811:df <- AddDistanceFromHere(df, here)
1510525989812:if (drop) {
1510525989813:df <- df %>%
1510525989814:select(name, distance, available_bike_stands) %>%
1510525989814:filter(available_bike_stands>0)
1510525989815:} else {
1510525989815:df <- df %>%
1510525989816:select(name, distance, available_bikes) %>%
1510525989816:filter(available_bikes>0)
1510525989816:}
1510525989818:return(data.frame(head(df, 5)))
1510525989818:}
1510525993831:df <- GetNearestStationsInfo(open.stations)
1510526009570:df
1510526063417:Plot.Distance.Availability <- function (df) {
1510526063417:qplot(x=name, y=distance, data=df, fill=distance, geom='blank') +
1510526063418:geom_bar(stat='identity', position='dodge')
1510526063419:}
1510526068032:Plot.Distance.Availability(df)
1510526162906:Plot.Distance.Availability <- function (df) {
1510526162909:qplot(x=reorder(name, distance), y=distance, data=df, fill=distance, geom='blank') +
1510526162909:geom_bar(stat='identity', position='dodge')
1510526162910:}
1510526165421:Plot.Distance.Availability(df)
1510526792637:Plot.Distance.Availability <- function (df) {
1510526792639:qplot(x=reorder(name, distance),
1510526792639:y=distance, data=df, fill=distance, geom='blank') +
1510526792639:geom_bar(stat='identity', position='dodge') +
1510526792640:xlab('Stations') + ylab('Distance in metres')
1510526792640:}
1510526794509:Plot.Distance.Availability(df)
1510527048255:GetNearestStationsInfo <- function (df, here=c(53.349809, -6.260232), drop=F) {
1510527048256:df <- AddDistanceFromHere(df, here)
1510527048257:if (drop) {
1510527048257:df <- df %>%
1510527048257:select(name, distance, available_bike_stands) %>%
1510527048257:filter(available_bike_stands>0) %>%
1510527048258:mutate(name_availability=paste0(
1510527048258:name, " (", available_bike_stands, ")"
1510527048258:))
1510527048258:} else {
1510527048259:df <- df %>%
1510527048259:select(name, distance, available_bikes) %>%
1510527048259:filter(available_bikes>0) %>%
1510527048259:mutate(name_availability=paste0(
1510527048260:name, " (", available_bikes, ")"
1510527048260:))
1510527048260:}
1510527048261:return(data.frame(head(df, 5)))
1510527048261:}
1510527059173:df <- GetNearestStationsInfo(open.stations)
1510527073113:df
1510527082495:Plot.Distance.Availability(df)
1510527099027:Plot.Distance.Availability <- function (df) {
1510527099029:qplot(x=reorder(name_availability, distance),
1510527099030:y=distance, data=df, fill=distance, geom='blank') +
1510527099030:geom_bar(stat='identity', position='dodge') +
1510527099030:xlab('Stations') + ylab('Distance in metres')
1510527099030:}
1510527101698:Plot.Distance.Availability(df)
1510527734223:require(ggmpa)
1510527738940:require(ggmap)
1510527741141:require(ggmap)
1510527757025:?geocode
1510527766890:geocode('Tyrrelstown')
1510527817411:geocode('Tyrrelstown')['lat']
1510527824748:geocode('Tyrrelstown')[1]
1510527859982:geocode('The spire')
1510527868403:geocode('Spire Dublin')
1510527894659:geocode('India dublin')
1510527957864:'dublin' in 'india dublin'
1510527962735:'dublin' %in% 'india dublin'
1510528011535:grepl('dublin', 'chars')
1510528016882:grepl('dublin', 'india dublin')
1510528018602:grepl('dublin', 'india dublins')
1510528025481:grepl('dublin', 'india dubl')
1510528034450:grepl('dublin india', 'dublin')
1510528130101:x <- geocode('spire dublin')
1510528141564:x[1]
1510528143517:x[2]
1510528156277:x[1, 1]
1510528158810:x[1, 2]
1510528412934:kJCDAPIKey <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1510528420769:kJCDAPIKey <- "f3af0867d0ae0de6957fa29b4469667fba4e229e"
1510528439934:ClassifyStation <- function (bike.stands) {
1510528439934:if (bike.stands <= 20) {
1510528439935:return ("Small")
1510528439935:} else if (bike.stands <= 30) {
1510528439936:return ("Medium")
1510528439936:} else {
1510528439936:return ("Large")
1510528439936:}
1510528439937:}
1510528439938:ClassifyUtilisation <- function (utilisation.percentage) {
1510528439938:if (utilisation.percentage <= 33) {
1510528439939:return ("Low")
1510528439939:} else if (utilisation.percentage <= 66) {
1510528439953:return ("Medium")
1510528439953:} else {
1510528439954:return ("High")
1510528439955:}
1510528439955:}
1510528439956:GetOpenStations <- function (df) {
1510528439956:total.stations.count <- nrow(df)
1510528439958:open.stations.count <- sum(df$status=="OPEN")
1510528439958:result <- as.character(open.stations.count)
1510528439959:if (open.stations.count == total.stations.count) {
1510528439960:result <- paste('all', result)
1510528439963:}
1510528439965:return(result)
1510528439966:}
1510528439968:GetDistanceAndTime <- function (origins, destinations) {
1510528439968:google.distance.matrix.url <- paste0("http://maps.googleapis.com/maps/api/",
1510528439970:"distancematrix/json?origins=",
1510528439970:origins[1], ",", origins[2],
1510528439971:"&destinations=",
1510528439971:destinations[1], ",", destinations[2])
1510528439972:distance.data <- GET(google.distance.matrix.url)
1510528439972:distance.data.json <- content(distance.data, as="text", encoding="UTF-8")
1510528439973:distance.data.df <- fromJSON(distance.data.json)
1510528439973:distance <- distance.data.df$rows$elements[[1]]$distance$value
1510528439974:duration <- distance.data.df$rows$elements[[1]]$duration$value
1510528439974:return(c(distance, duration))
1510528439975:}
1510528439975:AddDistanceFromHere <- function (df, origin) {
1510528439976:df <- df %>% rowwise() %>%
1510528439977:mutate(distance=GetDistanceAndTime(origins=origin,
1510528439977:destinations=c(position_lat,
1510528439977:position_long))[1])
1510528439978:return(df)
1510528439978:}
1510528439979:GetNearestStationsInfo <- function (df, origin, drop) {
1510528439979:# c(53.349809, -6.260232)
1510528439980:df <- AddDistanceFromHere(df, origin)
1510528439980:if (drop) {
1510528439981:df <- df %>%
1510528439981:select(name, distance, available_bike_stands) %>%
1510528439982:filter(available_bike_stands>0) %>%
1510528439982:mutate(name_availability=paste0(
1510528439982:name, " (", available_bike_stands, ")"
1510528439983:))
1510528439983:} else {
1510528439983:df <- df %>%
1510528439984:select(name, distance, available_bikes) %>%
1510528439986:filter(available_bikes>0) %>%
1510528439987:mutate(name_availability=paste0(
1510528439987:name, " (", available_bikes, ")"
1510528439988:))
1510528439988:}
1510528439989:return(data.frame(head(df, 5)))
1510528439989:}
1510528439990:PlotDistanceAvailability <- function (df) {
1510528439990:qplot(x=reorder(name_availability, distance),
1510528439991:y=distance, data=df, fill=distance, geom='blank') +
1510528439992:geom_bar(stat='identity', position='dodge') +
1510528439992:xlab('Stations') + ylab('Distance in metres')
1510528439994:}
1510528461486:PlotNearestAvailableStations <- function (df, origin="Spire", drop=FALSE) {
1510528461487:origin = tolower(origin)
1510528461488:if (!grepl('dublin', origin)) {
1510528461488:origin <- paste(origin, "dublin")
1510528461488:}
1510528461489:origin.coordinates <- geocode(origin)
1510528461489:origin.latlong <- c(origin.coordinates[1,1], origin.coordinates[1, 2])
1510528461489:nearest.stations <- GetNearestStationsInfo(open.stations,
1510528461489:origin.latlong,
1510528461490:drop)
1510528461490:PlotDistanceAvailability(nearest.stations)
1510528461490:}
1510528466554:dublin.url <- paste0("https://api.jcdecaux.com/vls/v1/stations",
1510528466554:"?contract=Dublin",
1510528466555:"&apiKey=",
1510528466555:kJCDAPIKey)
1510528466556:dublin.data <- GET(dublin.url)
1510528466797:dublin.data.json <- content(dublin.data, as="text", encoding="UTF-8")
1510528466799:dublin.data.df <- fromJSON(dublin.data.json)
1510528466803:open.stations <- subset(dublin.data.df, status=="OPEN")
1510528482736:position <- open.stations$position
1510528482737:open.stations$position <- NULL
1510528482738:open.stations$position_lat <- position$lat
1510528482739:open.stations$position_long <- position$lng
1510528482742:open.stations <- mutate(open.stations,
1510528482743:class=sapply(bike_stands, ClassifyStation),
1510528482744:utilisation_percentage=round(
1510528482745:available_bike_stands*100/bike_stands, 2),
1510528482746:utilisation_class=sapply(
1510528482746:utilisation_percentage, ClassifyUtilisation))
1510528482769:open.stations$class <- factor(open.stations$class,
1510528482769:levels=c('Small', 'Medium', 'Large'),
1510528482770:ordered=TRUE)
1510528482772:open.stations$utilisation_class <- factor(open.stations$utilisation_class,
1510528482772:levels=c('Low', 'Medium', 'High'),
1510528482773:ordered=TRUE)
1510528507263:PlotNearestAvailableStations(open.stations)
1510528560258:origin="Spire"
1510528564001:origin = tolower(origin)
1510528564002:if (!grepl('dublin', origin)) {
1510528564002:origin <- paste(origin, "dublin")
1510528564003:}
1510528566052:origin
1510528570091:origin.coordinates <- geocode(origin)
1510528576543:origin.latlong <- c(origin.coordinates[1,1], origin.coordinates[1, 2])
1510528581195:origin.latlong
1510528609758:PlotNearestAvailableStations <- function (df, origin="Spire", drop=FALSE) {
1510528609759:origin = tolower(origin)
1510528609760:if (!grepl('dublin', origin)) {
1510528609760:origin <- paste(origin, "dublin")
1510528609761:}
1510528609761:origin.coordinates <- geocode(origin)
1510528609761:origin.latlong <- c(origin.coordinates[1, 2], origin.coordinates[1, 1])
1510528609761:nearest.stations <- GetNearestStationsInfo(open.stations,
1510528609762:origin.latlong,
1510528609762:drop)
1510528609762:PlotDistanceAvailability(nearest.stations)
1510528609762:}
1510528614648:PlotNearestAvailableStations(open.stations)
1510580047036:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510580202089:db.url <- paste0("https://data.dublinked.ie/dataset/a97edfe6-1ee2-494c-9998-",
1510580202092:"c7ab29214d59/resource/e95bd0b4-1ac3-471d-93ea-2d129c8e8dfe",
1510580202093:"/download/googletransitdublinbusp20130315-1546.zip")
1510580202095:download.file(db.url, "gtfs_dataset.zip")
1510580210911:db.url <- paste0("https://data.dublinked.ie/dataset/a97edfe6-1ee2-494c-9998-",
1510580210912:"c7ab29214d59/resource/e95bd0b4-1ac3-471d-93ea-2d129c8e8dfe",
1510580210913:"/download/googletransitdublinbusp20130315-1546.zip")
1510580210913:download.file(db.url, "gtfs_dataset.zip")
1510580221063:unzip("gtfs_dataset.zip", exdir="gtfs")
1510580785416:require(readr)
1510580805265:agencies <- read_csv('agency.txt')
1510580813206:agencies <- read_csv('gtfs/agency.txt')
1510580815923:View(agencies)
1510580849404:calendar <- read_csv('gtfs/calendar.txt')
1510580851686:View(calendar)
1510580964388:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510580966643:View(calendar.dates)
1510581153619:routes <- read_csv('gtfs/routes.txt')
1510581156551:View(routes)
1510582358384:shapes <- read_csv('gtfs/shapes.txt')
1510582363242:View(shapes)
1510583776707:routes <- read_csv('gtfs/routes.txt')
1510583776716:shapes <- read_csv('gtfs/shapes.txt')
1510583799536:trips <- read_csv('gtfs/trips.txt')
1510583802497:View(trips)
1510583866318:sum(is.na(trips$trip_headsign))
1510583872005:sum(is.na(trips$block_id))
1510583886305:trips$trip_headsign = NULL
1510583892490:trips$block_id = NULL
1510583895868:View(trips)
1510583961569:View(calendar)
1510584021023:stops <- read_csv('gtfs/stops.txt')
1510584024190:View(stops)
1510584211190:trips <- read_csv('gtfs/trips.txt')
1510584488330:require(dplyr)
1510584568931:x <- group_by(shapes, shape_id)
1510584574704:head(x)
1510584580466:shapes
1510584595630:x
1510584604069:head(x)
1510584636477:summarise(x, cou=count(shape_pt_sequence))
1510584690918:summarise(x, cou=sum(shape_pt_sequence>0))
1510593837169:require(readr)
1510593837405:# 3.1 (10/20) Shape the data and conduct an initial exploratory analysis of the
1510593837405:# entire dataset, focussing on all the routes.
1510593837406:db.url <- paste0("https://data.dublinked.ie/dataset/a97edfe6-1ee2-494c-9998-",
1510593837407:"c7ab29214d59/resource/e95bd0b4-1ac3-471d-93ea-2d129c8e8dfe",
1510593837408:"/download/googletransitdublinbusp20130315-1546.zip")
1510593837409:download.file(db.url, "gtfs_dataset.zip")
1510593849248:unzip("gtfs_dataset.zip", exdir="gtfs")
1510593849670:agencies <- read_csv('gtfs/agency.txt')
1510593849755:calendar <- read_csv('gtfs/calendar.txt')
1510593849905:routes <- read_csv('gtfs/routes.txt')
1510593849909:shapes <- read_csv('gtfs/shapes.txt')
1510593850080:stops <- read_csv('gtfs/stops.txt')
1510593850093:trips <- read_csv('gtfs/trips.txt')
1510593979888:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510593982986:require(readr)
1510593988170:agencies <- read_csv('gtfs/agency.txt')
1510593988177:calendar <- read_csv('gtfs/calendar.txt')
1510593988182:routes <- read_csv('gtfs/routes.txt')
1510593988192:shapes <- read_csv('gtfs/shapes.txt')
1510593988537:stops <- read_csv('gtfs/stops.txt')
1510593988555:trips <- read_csv('gtfs/trips.txt')
1510593994093:View(shapes)
1510594084515:View(trips)
1510594288159:stop.times <- read_csv('gtfs/stop_times.txt')
1510594428551:View(stop.times)
1510594503992:View(stops)
1510656557405:require(readr)
1510656560282:agencies <- read_csv('gtfs/agency.txt')
1510656560318:calendar <- read_csv('gtfs/calendar.txt')
1510656560380:routes <- read_csv('gtfs/routes.txt')
1510656560381:shapes <- read_csv('gtfs/shapes.txt')
1510656560383:stops <- read_csv('gtfs/stops.txt')
1510656560384:trips <- read_csv('gtfs/trips.txt')
1510656574880:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510656578725:agencies <- read_csv('gtfs/agency.txt')
1510656578807:calendar <- read_csv('gtfs/calendar.txt')
1510656578937:routes <- read_csv('gtfs/routes.txt')
1510656578941:shapes <- read_csv('gtfs/shapes.txt')
1510656579239:stops <- read_csv('gtfs/stops.txt')
1510656579258:trips <- read_csv('gtfs/trips.txt')
1510656617307:stop_times <- read_csv('gtfs/stop_times.txt')
1510656631577:View(trips)
1510656716815:View(stops)
1510656784624:View(routes)
1510656802077:sum(routes$route_type==3)
1510656818172:sum(routes$agency_id=978)
1510656821636:sum(routes$agency_id==978)
1510656823258:View(agencies)
1510657010046:DropColumns <- function (df, unwanted.columns) {
1510657010048:# Drop columns of a data frame by names.
1510657010048:# Args:
1510657010048:#   df: The data frame to be modified.
1510657010049:#   unwanted.columns: Names of the columns to be dropped.
1510657010049:# Returns:
1510657010050:#   The data frame with unwanted columns dropped.
1510657010050:df <- df[, !colnames(df) %in% unwanted.columns]
1510657010050:return(df)
1510657010051:}
1510657054257:routes <- DropColumns(routes, c('agency_id', 'route_type'))
1510657114680:View(routes)
1510657148779:len(unique(routes$route_id))
1510657156178:length(unique(routes$route_id))
1510658796458:View(calendar)
1510658821752:str(calendar)
1510658873636:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510658879702:agencies <- read_csv('gtfs/agency.txt')
1510658879708:calendar <- read_csv('gtfs/calendar.txt')
1510658879717:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510658879721:routes <- read_csv('gtfs/routes.txt')
1510658879729:shapes <- read_csv('gtfs/shapes.txt')
1510658880031:stop.times <- read_csv('gtfs/stop_times.txt')
1510658883061:stops <- read_csv('gtfs/stops.txt')
1510658883085:trips <- read_csv('gtfs/trips.txt')
1510658890759:routes <- DropColumns(routes, c('agency_id', 'route_type'))
1510658896739:DropColumns <- function (df, unwanted.columns) {
1510658896740:# Drop columns of a data frame by names.
1510658896741:# Args:
1510658896741:#   df: The data frame to be modified.
1510658896742:#   unwanted.columns: Names of the columns to be dropped.
1510658896742:# Returns:
1510658896742:#   The data frame with unwanted columns dropped.
1510658896743:df <- df[, !colnames(df) %in% unwanted.columns]
1510658896743:return(df)
1510658896743:}
1510658899509:routes <- DropColumns(routes, c('agency_id', 'route_type'))
1510658905990:View(calendar.dates)
1510659364464:colnames(trips)
1510659374366:View(trips)
1510659449317:trips <- DropColumns(trips, c('trip_headsign', 'block_id'))
1510659498996:unique(trips$route_id)
1510659504876:length(unique(trips$route_id))
1510659582613:length(unique(trips$shape_id))
1510659731044:sum(stop.times$pickup_type)
1510659738063:sum(stop.times$drop_off_type)
1510659931922:View(stop.times)
1510659941592:stop.times <- DropColumns(stop.times, c('pickup_type', 'drop_off_type'))
1510659943268:View(shapes)
1510659944353:View(stop.times)
1510659972391:View(shapes)
1510660205206:df <- read_csv('gtfs/transfers.txt')
1510660206628:df
1510660209450:View(df)
1510660558308:View(routes)
1510660568418:View(trips)
1510660615030:require(dplyr)
1510660706140:df <- inner_join(trips, routes, by='route_id')
1510660710292:View(df)
1510661032748:mutated.shapes <- group_by(shapes, 'shape_id')
1510661044463:mutated.shapes
1510661056429:View(mutated.shapes)
1510661084184:rm(mutated.shapes)
1510661098855:group_by(shapes, shape_id)
1510661107743:mutated.shapes <- group_by(shapes, shape_id)
1510661165338:summarise(mutated.shapes, total_distance=max(shape_dist_traveled))
1510661170441:summarise(mutated.shapes, total_distance=max(shape_dist_traveled))
1510661186670:shapes.and.distances <- summarise(mutated.shapes, total_distance=max(shape_dist_traveled))
1510661296608:xxx <- shapes %>% group_by(shape_id) %>% summarise(total_distance=max(shape_dist_traveled))
1510661305793:View(shapes.and.distances)
1510661307561:View(xxx)
1510661371220:View(df)
1510661517076:length(unique(shape_id))
1510661526272:length(unique(df$shape_id))
1510661562067:df$route_id=='0-40D-b12-1'
1510661568336:df[df$route_id=='0-40D-b12-1', ]
1510661610074:filter(shapes, shape_id=='0-40D-b12-1.258.O')
1510661623429:View(filter(shapes, shape_id=='0-40D-b12-1.258.O'))
1510662094303:View(xxx)
1510662196271:View(shapes)
1510662224245:View(trips)
1510662888867:ggmap::get_map(location = c(lon = -95.3632715, lat = 29.7632836),
1510662888874:maptype ="satellite",zoom=20)
1510662901269:ggmap
1510662910136:?ggmap
1510662934154:require(ggmap)
1510662952699:ggmap::get_map(location = c(lon = -95.3632715, lat = 29.7632836),
1510662952703:+                maptype ="satellite",zoom=20)
1510662958826:ggmap::get_map(location = c(lon = -95.3632715, lat = 29.7632836),
1510662958826:maptype ="satellite",zoom=20)
1510662980680:ggmap(get_map(location = c(lon = -95.3632715, lat = 29.7632836),
1510662980682:maptype ="satellite",zoom=20))
1510662997407:?get_map
1510663009322:ggmap
1510663907264:require(ggmap)
1510663913847:shapes.and.distances <- shapes %>%
1510663913850:group_by(shape_id) %>%
1510663913850:summarise(total_distance=max(shape_dist_traveled))
1510664116656:View(shapes.and.distances)
1510664137770:df <- inner_join(df, shapes.and.distances, by='shape_id')
1510664141469:View(df)
1510670622616:View(routes)
1510670669937:View(filter(df, route_short_name=='40D'))
1510670680218:View(stops)
1510670682882:View(stop.times)
1510670716275:View(df)
1510670737579:View(shapes)
1510670744483:View(stop.times)
1510670894944:?filter
1510671692956:View(filter(df, trip_id=='1.1598.0-33A-b12-1.451.I'))
1510671729812:View(df)
1510671876477:mutated.stop.times <- group_by(stop.times, trip_id)
1510671922655:str(stop.times)
1510672192194:mutated.stop.times <- mutate(mutated.stop.times, previous_stop_time=lag(x))
1510672203059:View(mutated.stop.times)
1510672229328:mutated.stop.times <- mutate(mutated.stop.times, previous_stop_time=lag(arrival_time))
1510672275477:sum(stop.times$arrival_time==stop.times$departure_time)
1510672287188:stop.times$arrival_time==stop.times$departure_time
1510672306622:sum(is.na(stop.times$arrival_time))
1510672348134:View(filter(stop.times, is.na(stop.times)))
1510672360108:View(filter(stop.times, is.na(stop.times$arrival_time)))
1510672437005:xx <- mutated.stop.times
1510672444763:xx <- filter(stop.times, is.na(stop.times$arrival_time))
1510672467092:yy <- filter(stop.times, !is.na(stop.times$arrival_time))
1510672481402:sum(yy$arrival_time != yy$departure_time)
1510672520951:length(unique(xx$trip_id))
1510672611678:xx <- group_by(xx, trip_id)
1510672653780:xx.count <- summarise(xx, count(stop_sequence))
1510672667686:xx.count <- summarise(xx, count(!is.na(arrival_time)))
1510672680006:xx.count <- summarise(xx, sum(!is.na(arrival_time)))
1510672682913:xx.count
1510672691361:xx.count <- summarise(xx, sum(is.na(arrival_time)))
1510672694178:xx
1510672703251:xx.count
1510672719540:xx.count <- arrange(xx.count, trip_id)
1510672722975:xx.count <- arrange(xx.count, trip_id)
1510672725728:xx.count
1510672786896:zz <- inner_join(xx, yy, by=trip_id)
1510672792045:zz <- inner_join(xx, yy, by='trip_id')
1510672801788:length(unique(zz$trip_id))
1510672824059:zz
1510672827885:View(zz)
1510672865760:zz <- inner_join(xx.count, yy, by='trip_id')
1510672891928:zz <- group_by(zz, trip_id)
1510672937998:zz.count <- summarise(zz, sum(!is.na(arrival_time)))
1510672954199:View(zz.count)
1510672965165:zz <- inner_join(xx.count, yy, by='trip_id')
1510672998367:zz <- group_by(zz, trip_id, sum(is.na(arrival_time)))
1510673002068:zz
1510673008142:zz.count <- summarise(zz, sum(!is.na(arrival_time)))
1510673010416:View(zz.count)
1510673043107:xx.count <- summarise(xx, invalid.count=sum(is.na(arrival_time)))
1510673051643:zz <- inner_join(xx.count, yy, by='trip_id')
1510673092166:zz <- group_by(zz, trip_id, invalid.count)
1510673106003:zz.count <- summarise(zz, sum(!is.na(arrival_time)))
1510673108252:View(zz.count)
1510673125750:len(xx)
1510673139663:length(unique(xx$trip_id))
1510673153984:length(unique(zz$trip_id))
1510673300535:category = c(???Title???, ???Name???, ???Surname???)
1510673300538:lecturer = c( title , name, surname)
1510673300540:paste(category , lecturer , sep = ??? = ???)
1510673321771:category = c('Title', 'Name', 'Surname')
1510673321773:lecturer = c( title , name, surname)
1510673321775:paste(category , lecturer , sep='=')
1510673354125:category = c('Title', 'Name', 'Surname')
1510673354127:lecturer = c('Dr.', 'David', 'Leonard')
1510673354128:paste(category , lecturer , sep='=')
1510673379239:paste(category , lecturer , sep='=', collapse=',')
1510673382860:paste(category , lecturer , sep='=', collapse=', ')
1510676655711:View(stop.times)
1510676718445:colours <- 1:5
1510676727734:a <= 6:10
1510676731315:a <- 6:10
1510676748715:b <- data.frame(a, colours)
1510676749965:b
1510676760513:select(b, -a)
1510676771166:b
1510676780826:b$c = 2:6
1510676781810:b
1510676793316:b <- select(b, -c(a, c))
1510676794167:b
1510677567947:View(trips)
1510677686084:View(shapes)
1510678140993:View(stop.times)
1510679767001:agencies <- read_csv('gtfs/agency.txt')
1510679767012:calendar <- read_csv('gtfs/calendar.txt')
1510679767018:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510679767027:routes <- read_csv('gtfs/routes.txt')
1510679767032:shapes <- read_csv('gtfs/shapes.txt')
1510679767379:stop.times <- read_csv('gtfs/stop_times.txt')
1510679770365:stops <- read_csv('gtfs/stops.txt')
1510679770380:trips <- read_csv('gtfs/trips.txt')
1510679791965:routes <- select(routes, -c('agency_id', 'route_type'))
1510679791973:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510679791974:trips <- select(trips, -c('trip_headsign', 'block_id'))
1510679791980:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510679791980:# throughout, departure_time because it is same as arrival_time for all the
1510679791981:# rows
1510679791982:stop.times <- select(stop.times, -c('pickup_type', 'drop_off_type',
1510679791983:'departure_time'))
1510679806406:routes <- select(routes, -c('agency_id', 'route_type'))
1510679814184:View(routes)
1510679831037:mutated.stop.times <- mutate(mutated.stop.times, previous_stop_time=lag(arrival_time))
1510679834744:routes <- select(routes, -c(agency_id, route_type))
1510679842606:trips <- select(trips, -c(trip_headsign, block_id))
1510679854580:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510679854581:departure_time))
1510679867850:df <- inner_join(trips, routes, by='route_id')
1510679867855:shapes.and.distances <- shapes %>%
1510679867855:group_by(shape_id) %>%
1510679867856:summarise(total_distance=max(shape_dist_traveled))
1510679872131:mutated.stop.times <- group_by(stop.times, trip_id)
1510679872233:mutated.stop.times <- mutate(mutated.stop.times, previous_stop_time=lag(arrival_time))
1510679889448:View(mutated.stop.times)
1510679947808:mutated.stop.times <- mutate(mutated.stop.times, difference=arrival_time-previous_stop_time)
1510680132378:mutated.stop.times <- stop.times %>%
1510680132379:group_by(trip_id) %>%
1510680132380:mutate(previous_stop_time=lag(arrival_time)) %>%
1510680132380:mutate(difference=arrival_time-previous_stop_time)
1510680462439:mutated.stop.times <- stop.times %>%
1510680462441:group_by(trip_id) %>%
1510680462441:mutate(previous_stop_time=lag(arrival_time)) %>%
1510680462441:mutate(time_since_previous_stop=arrival_time-previous_stop_time) %>%
1510680462442:mutate(distance_since_previous_stop=lag(shape_dist_traveled)) %>%
1510680462442:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5))
1510680498462:mutated.stop.times <- stop.times %>%
1510680498462:group_by(trip_id) %>%
1510680498463:mutate(previous_stop_time=lag(arrival_time)) %>%
1510680498464:mutate(time_since_previous_stop=as.integer(arrival_time-previous_stop_time)) %>%
1510680498464:mutate(distance_since_previous_stop=lag(shape_dist_traveled)) %>%
1510680498465:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5))
1510680563556:View(trips)
1510680572263:View(stop.times)
1510680901866:mutated.stop.times <- stop.times %>%
1510680901868:group_by(trip_id) %>%
1510680901869:mutate(previous_stop_time=lag(arrival_time)) %>%
1510680901869:mutate(time_since_previous_stop=as.integer(arrival_time-previous_stop_time)) %>%
1510680901870:mutate(distance_till_previous_stop=lag(shape_dist_traveled)) %>%
1510680901871:mutate(distance_since_previous_stop=shape_dist_traveled-distance_till_previous_stop) %>%
1510680901871:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5))
1510680908980:View(mutated.stop.times)
1510681098011:View(filter(mutated.stop.times, is.na(arrival_time)))
1510681137404:sum(is.na(mutated.stop.times$shape_dist_traveled))
1510681265205:mutated.stop.times <- stop.times %>%
1510681265206:group_by(trip_id) %>%
1510681265207:mutate(previous_stop_time=lag(arrival_time)) %>%
1510681265207:mutate(time_since_previous_stop=as.integer(arrival_time-previous_stop_time)) %>%
1510681265208:mutate(time_till_this_stop=cumsum(time_since_previous_stop)) %>%
1510681265208:mutate(distance_till_previous_stop=lag(shape_dist_traveled)) %>%
1510681265210:mutate(distance_since_previous_stop=shape_dist_traveled-distance_till_previous_stop) %>%
1510681265210:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5))
1510681276489:View(mutated.stop.times)
1510681551315:a = 1:5
1510681554451:b = 6:10
1510681559472:c <- data.frame(a,b)
1510681560445:c
1510681593638:c[c$a%2==0]
1510681599554:c[c$a%2==0,]
1510681603963:c
1510681607901:ca <- c
1510681612151:ca[ca$a%2==0,]
1510681631806:ca[ca$a==1,]
1510681633761:ca[ca$a==1]
1510681650456:ca$a==1
1510681666894:ca$b[ca$a==1]
1510681670133:ca$b[ca$a==1] = 7
1510681671628:ca
1510681808390:mutated.stop.times <- stop.times %>%
1510681808390:group_by(trip_id) %>%
1510681808391:mutate(previous_stop_time=lag(arrival_time)) %>%
1510681808391:mutate(time_since_previous_stop=as.integer(arrival_time-previous_stop_time)) %>%
1510681808392:mutate(distance_till_previous_stop=lag(shape_dist_traveled)) %>%
1510681808392:mutate(distance_since_previous_stop=shape_dist_traveled-distance_till_previous_stop) %>%
1510681808393:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5))
1510681816019:mutated.stop.times$time_since_previous_stop[
1510681816019:!(is.na(mutated.stop.times$arrival_time)) &
1510681816020:is.na(mutated.stop.times$time_since_previous_stop)] <- 0
1510681899085:mutated.stop.times <- mutate(mutated.stop.times,
1510681899086:time_till_this_stop=cumsum(time_since_previous_stop))
1510682101407:mutated.stop.times.summary <- summarise(total_distance=max(shape_dist_traveled))
1510682165531:mutated.stop.times.summary <- summarise(
1510682165532:mutated.stop.times,
1510682165533:total_distance=max(mutated.stop.times.summary$shape_dist_traveled))
1510682188834:mutated.stop.times.summary <- summarise(mutated.stop.times,
1510682188837:total_distance=max(shape_dist_traveled))
1510682193712:View(mutated.stop.times.summary)
1510682446980:View(shapes)
1510682509909:invalid.stop.times <- filter(stop.times, is.na(arrival_time))
1510682513770:View(invalid.stop.times)
1510682599240:View(filter(stop.times, stop_id=='8240DB003827'))
1510682679652:View(filter(mutated.stop.times, stop_id=='8240DB003827'))
1510682726969:View(filter(mutated.stop.times, trip_id=='268.2732.0-33-b12-1.220.I'))
1510683899220:View(trips)
1510684270683:invalid.stop.times <- filter(mutated.stop.times, is.na(kmph))
1510685700368:View(filter(mutated.stop.times, stop_id=='8240DB003827'))
1510685794522:View(shapes.and.distances)
1510686092143:ungroup(mutated.stop.times)
1510686099798:mutated.stop.times
1510687073371:x <- ungroup(mutated.stop.times)
1510687183357:x <- x %>%
1510687183359:mutate(previous_stop_id=lag(stop_id)) %>%
1510687183359:group_by(stop_id, previous_stop_id)
1510687277737:x <- x %>%
1510687277738:filter(!is.na(arrival_time))
1510687278177:mutate(previous_stop_id=lag(stop_id)) %>%
1510687278177:group_by(stop_id, previous_stop_id)
1510687307088:x <- x %>%
1510687307089:filter(!is.na(arrival_time)) %>%
1510687307090:mutate(previous_stop_id=lag(stop_id)) %>%
1510687307090:group_by(stop_id, previous_stop_id)
1510687329960:x <- ungroup(mutated.stop.times)
1510687335092:y <- x %>%
1510687335093:filter(!is.na(arrival_time)) %>%
1510687335094:mutate(previous_stop_id=lag(stop_id)) %>%
1510687335094:group_by(stop_id, previous_stop_id)
1510702826011:length(trips$shape_id)
1510702834436:length(unique(trips$shape_id))
1510702842258:length(shapes$shape_id)
1510702848820:length(unique(shapes$shape_id))
1510706067405:stops.pairs.and.speeds <- summarise(y, mean_kmph=mean(kmph))
1510706077877:View(stops.pairs.and.speeds)
1510706133211:View(y)
1510706175059:View(filter(y, stop_id=='8220DB004521'))
1510706269350:View(filter(y, trip_id=='3537.1732.0-747-b12-1.467.I'))
1510706313408:View(y)
1510706489844:View(filter(y, trip_id=='1007.852.0-75-b12-1.113.I'))
1510706835322:y <- x %>%
1510706835323:filter(!is.na(arrival_time)) %>%
1510706835324:filter(distance_since_previous_stop != 0) %>%
1510706835324:filter(time_since_previous_stop != 0)
1510706835829:mutate(previous_stop_id=lag(stop_id)) %>%
1510706835829:group_by(stop_id, previous_stop_id)
1510706835831:stops.pairs.and.speeds <- summarise(y, mean_kmph=mean(kmph))
1510706850499:y <- x %>%
1510706850501:filter(!is.na(arrival_time)) %>%
1510706850502:filter(distance_since_previous_stop != 0) %>%
1510706850503:filter(time_since_previous_stop != 0) %>%
1510706850504:mutate(previous_stop_id=lag(stop_id)) %>%
1510706850505:group_by(stop_id, previous_stop_id)
1510706851040:stops.pairs.and.speeds <- summarise(y, mean_kmph=mean(kmph))
1510706868164:View(y)
1510706877288:View(stops.pairs.and.speeds)
1510706952445:stops.pairs.and.speeds <- summarise(y, mean_kmph=mean(kmph),
1510706952445:count_rows=sum(!is.na(arrival_time)))
1510707562436:y <- mutated.stop.times %>%
1510707562439:filter(!is.na(arrival_time)) %>%
1510707562440:filter(distance_since_previous_stop != 0) %>%
1510707562442:filter(time_since_previous_stop != 0) %>%
1510707562442:mutate(previous_stop_id=lag(stop_id)) %>%
1510707562444:ungroup() %>%
1510707562444:group_by(stop_id, previous_stop_id)
1510707564440:stops.pairs.and.speeds <- summarise(y, mean_kmph=mean(kmph),
1510707564440:count_rows=sum(!is.na(arrival_time)))
1510707570272:View(stops.pairs.and.speeds)
1510707821087:x <- mutate(mutated.stop.times, previous_stop_id=lag(stop_id))
1510708077217:View(mutated.stop.times.summary)
1510708078696:View(mutated.stop.times)
1510708273512:rownames(stops.pairs.and.speeds) <- paste(stops.pairs.and.speeds$previous_stop_id,
1510708273514:stops.pairs.and.speeds$stop_id,
1510708273515:sep='_')
1510708290738:View(stops.pairs.and.speeds)
1510708386735:View(filter(y, stop_id=='8220DB000002'))
1510737636289:require(dplyr)
1510737636550:require(ggmap)
1510737636841:require(readr)
1510737648246:agencies <- read_csv('gtfs/agency.txt')
1510737648285:calendar <- read_csv('gtfs/calendar.txt')
1510737648349:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510737648351:routes <- read_csv('gtfs/routes.txt')
1510737648352:shapes <- read_csv('gtfs/shapes.txt')
1510737648354:stop.times <- read_csv('gtfs/stop_times.txt')
1510737648355:stops <- read_csv('gtfs/stops.txt')
1510737648356:trips <- read_csv('gtfs/trips.txt')
1510737681127:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510737684021:agencies <- read_csv('gtfs/agency.txt')
1510737684105:calendar <- read_csv('gtfs/calendar.txt')
1510737684292:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510737684299:routes <- read_csv('gtfs/routes.txt')
1510737684305:shapes <- read_csv('gtfs/shapes.txt')
1510737684609:stop.times <- read_csv('gtfs/stop_times.txt')
1510737687758:stops <- read_csv('gtfs/stops.txt')
1510737687773:trips <- read_csv('gtfs/trips.txt')
1510737702341:routes <- select(routes, -c(agency_id, route_type))
1510737702362:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510737702362:trips <- select(trips, -c(trip_headsign, block_id))
1510737702425:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510737702425:# throughout, departure_time because it is same as arrival_time for all the
1510737702427:# rows
1510737702427:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510737702427:departure_time))
1510737702433:df <- inner_join(trips, routes, by='route_id')
1510737702438:shapes.and.distances <- shapes %>%
1510737702439:group_by(shape_id) %>%
1510737702440:summarise(total_distance=max(shape_dist_traveled))
1510737702461:mutated.stop.times <- stop.times %>%
1510737702462:group_by(trip_id) %>%
1510737702463:mutate(previous_stop_time=lag(arrival_time)) %>%
1510737702464:mutate(time_since_previous_stop=as.integer(arrival_time-previous_stop_time)) %>%
1510737702465:mutate(distance_till_previous_stop=lag(shape_dist_traveled)) %>%
1510737702466:mutate(distance_since_previous_stop=shape_dist_traveled-distance_till_previous_stop) %>%
1510737702468:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5))
1510737704463:mutated.stop.times$time_since_previous_stop[
1510737704472:!(is.na(mutated.stop.times$arrival_time)) &
1510737704472:is.na(mutated.stop.times$time_since_previous_stop)] <- 0
1510737745239:y <- mutated.stop.times %>%
1510737745249:filter(!is.na(arrival_time)) %>%
1510737745250:filter(distance_since_previous_stop != 0) %>%
1510737745250:filter(time_since_previous_stop != 0) %>%
1510737745250:mutate(previous_stop_id=lag(stop_id)) %>%
1510737745251:ungroup() %>%
1510737745252:group_by(stop_id, previous_stop_id)
1510737747080:stops.pairs.and.speeds <- summarise(y, mdn_kmph=median(kmph),
1510737747081:count_rows=sum(!is.na(arrival_time)))
1510737747528:rownames(stops.pairs.and.speeds) <- paste(stops.pairs.and.speeds$previous_stop_id,
1510737747528:stops.pairs.and.speeds$stop_id,
1510737747529:sep='_')
1510738089523:?read.table
1510738148543:View(stops.pairs.and.speeds)
1510738357280:View(filter(stop.times, stop_id=='8220DB006032'))
1510738390184:View(filter(y, stop_id=='8220DB006032'))
1510738442419:View(filter(y, trip_id=='10288.1703.0-747-b12-1.467.I'))
1510738466623:View(filter(stop.times, trip_id=='10288.1703.0-747-b12-1.467.I'))
1510753327612:View(stop.times)
1510753333746:View(filter(stop.times, trip_id=='10288.1703.0-747-b12-1.467.I'))
1510756847779:mutated.stop.times <- stop.times %>%
1510756847781:group_by(trip_id) %>%
1510756847782:mutate(previous_stop_time=lag(arrival_time)) %>%
1510756847783:mutate(time_since_previous_stop=as.integer(arrival_time-previous_stop_time)) %>%
1510756847784:mutate(distance_till_previous_stop=lag(shape_dist_traveled)) %>%
1510756847784:mutate(distance_since_previous_stop=shape_dist_traveled-distance_till_previous_stop) %>%
1510756847785:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5)) %>%
1510756847786:mutate(previous_stop_id=lag(stop_id)) %>%
1510756847787:filter(!(stop_id==previous_stop_id))
1510757162718:mutated.stop.times$time_since_previous_stop[
1510757162718:!(is.na(mutated.stop.times$arrival_time)) &
1510757162719:is.na(mutated.stop.times$time_since_previous_stop)] <- 0
1510757179356:y <- mutated.stop.times %>%
1510757179359:filter(!is.na(arrival_time)) %>%
1510757179359:filter(distance_since_previous_stop != 0) %>%
1510757179359:filter(time_since_previous_stop != 0) %>%
1510757179360:mutate(previous_stop_id=lag(stop_id)) %>%
1510757179360:ungroup() %>%
1510757179361:group_by(stop_id, previous_stop_id)
1510757181249:stops.pairs.and.speeds <- summarise(y, mdn_kmph=median(kmph),
1510757181249:count_rows=sum(!is.na(arrival_time)))
1510757181837:rownames(stops.pairs.and.speeds) <- paste(stops.pairs.and.speeds$previous_stop_id,
1510757181838:stops.pairs.and.speeds$stop_id,
1510757181839:sep='_')
1510757187451:View(stops.pairs.and.speeds)
1510757240487:View(filter(stops, stop_id=='gen:57102:84244:0:1'))
1510757254643:View(filter(stops, stop_id=='gen:57102:84243:0:1'))
1510764574894:View(routes)
1510764621666:View(trips)
1510765657245:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1510765657246:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1510765657247:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1510765657247:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1510765711240:df <- read.table("pedestrianfootfall2013.ods")
1510765714438:View(df)
1510765739959:require(readODS)
1510765750218:install.packages('readODS')
1510765772248:require(readODS)
1510766274712:dfs <- read.ods("pedestrianfootfall2013.ods")
1510766355626:View(df)
1510766376734:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1510766376734:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1510766376735:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1510766376736:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1510766378262:dfs <- read.ods("pedestrianfootfall2013.ods")
1510766443712:require(dplyr)
1510766443713:require(ggmap)
1510766443715:require(readr)
1510766447038:stop.times <- read_csv('gtfs/stop_times.txt')
1510766452228:View(stop.times)
1510767326535:df <- read_ods("pedestrianfootfall2013.ods")
1510767336151:View(df)
1510767726807:require(dplyr)
1510767726809:require(ggmap)
1510767726811:require(readr)
1510767781006:agencies <- read_csv('gtfs/agency.txt')
1510767781011:calendar <- read_csv('gtfs/calendar.txt')
1510767781033:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510767786104:stops <- read_csv('gtfs/stops.txt')
1510767797662:agencies <- read_csv('gtfs/agency.txt')
1510767797666:calendar <- read_csv('gtfs/calendar.txt')
1510767797670:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510767797674:routes <- read_csv('gtfs/routes.txt')
1510767797683:shapes <- read_csv('gtfs/shapes.txt')
1510767797983:stop.times <- read_csv('gtfs/stop_times.txt')
1510767800054:stops <- read_csv('gtfs/stops.txt')
1510767800065:trips <- read_csv('gtfs/trips.txt')
1510767810197:# ---- Trimming down ----
1510767810198:# 1. Dropping agency_id and route_type from routes as they do not vary
1510767810199:# throughout the data.
1510767810199:routes <- select(routes, -c(agency_id, route_type))
1510767810212:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510767810213:trips <- select(trips, -c(trip_headsign, block_id))
1510767810222:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510767810223:# throughout, departure_time because it is same as arrival_time for all the
1510767810224:# rows
1510767810225:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510767810226:departure_time))
1510767863125:shapes.and.distances <- shapes %>%
1510767863128:group_by(shape_id) %>%
1510767863128:summarise(total_distance=max(shape_dist_traveled))
1510767986054:mutated.stop.times <- stop.times %>%
1510767986056:group_by(trip_id) %>%
1510767986057:mutate(previous_stop_time=lag(arrival_time)) %>%
1510767986058:mutate(time_since_previous_stop=as.integer(arrival_time-previous_stop_time)) %>%
1510767986058:mutate(distance_till_previous_stop=lag(shape_dist_traveled)) %>%
1510767986058:mutate(distance_since_previous_stop=shape_dist_traveled-distance_till_previous_stop) %>%
1510767986059:mutate(kmph=(distance_since_previous_stop*18)/(time_since_previous_stop*5)) %>%
1510767986060:mutate(previous_stop_id=lag(stop_id)) %>%
1510767986061:filter(!(stop_id==previous_stop_id))
1510768079952:View(stop.times)
1510768110054:View(trips)
1510768145915:View(routes)
1510768223771:View(shapes)
1510768229135:View(trips)
1510768344626:df <- inner_join(shapes.and.distances, trips, by="trip_id")
1510768356878:df <- inner_join(shapes.and.distances, trips, by="shape_id")
1510768359862:View(df)
1510769278887:View(shapes.and.distances)
1510769356022:length(unique(shapes$shape_id))
1510769568963:mutated.trips <- inner_join(trips, shapes.and.distances, by="shape_id")
1510769618606:group_by(mutated.trips, route_id, shape_id)
1510770309408:x <- group_by(trips, service_id)
1510770332282:summarise(x, count(route_id))
1510770340506:x
1510770377683:x <- group_by(trips, service_id, route_id)
1510770380091:x
1510770433692:x <- summarise(x, xcount=sum(!is.na(trip_id)))
1510770435922:x
1510770461323:x <- summarise(x, ycount=sum(xcount))
1510770462790:x
1510770651064:x <- group_by(trips, service_id, route_id)
1510770695162:View(shapes)
1510770765253:x <- summarise(x, xcount=sum(!is.na(trip_id)))
1510770770756:View(x)
1510770779276:x
1510770806172:summarise(x, ycount=sum(xcount))
1510771081576:trips.by.services <- trips %>%
1510771081576:group_by(service_id) %>%
1510771081577:summarise(trip.count=sum(!is.na(trip_id)))
1510771086053:View(trips.by.services)
1510771099125:trips.by.services <- trips %>%
1510771099126:group_by(service_id) %>%
1510771099127:summarise(trip_count=sum(!is.na(trip_id)))
1510771102829:trips.by.services
1510771183303:routes.by.services <- trips.by.services %>%
1510771183304:summarise(route.count=sum(!is.na(route_id)))
1510771189342:trips.by.services <- trips %>%
1510771189344:group_by(service_id, route_id) %>%
1510771189344:summarise(trip_count=sum(!is.na(trip_id)))
1510771192139:routes.by.services <- trips.by.services %>%
1510771192141:summarise(route.count=sum(!is.na(route_id)))
1510771196104:View(routes.by.services)
1510771686421:trips.by.services <- trips %>%
1510771686422:group_by(service_id, route_id) %>%
1510771686423:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510771686423:summarise(route.count=sum(!is.na(route_id)))
1510771692092:View(trips.by.services)
1510771823222:trips.by.services <- trips %>%
1510771823223:group_by(service_id, route_id) %>%
1510771823224:summarise(trip_count=sum(!is.na(trip_id)))
1510771823240:routes.by.services <- trips.by.services %>%
1510771823240:summarise(route.count=sum(!is.na(route_id)))
1510771823244:services.summary <- inner_join(trips.by.services, routes.by.services,
1510771823245:by="service_id")
1510771823249:rm(c(trips.by.services, routes.by.services))
1510771831966:trips.by.services <- trips %>%
1510771831967:group_by(service_id, route_id) %>%
1510771831968:summarise(trip_count=sum(!is.na(trip_id)))
1510771831985:routes.by.services <- trips.by.services %>%
1510771831986:summarise(route.count=sum(!is.na(route_id)))
1510771831994:services.summary <- inner_join(trips.by.services, routes.by.services,
1510771831994:by="service_id")
1510771831996:rm(c("trips.by.services", "routes.by.services"))
1510771845785:rm("trips.by.services", "routes.by.services")
1510771851426:trips.by.services <- trips %>%
1510771851426:group_by(service_id, route_id) %>%
1510771851427:summarise(trip_count=sum(!is.na(trip_id)))
1510771851446:routes.by.services <- trips.by.services %>%
1510771851446:summarise(route.count=sum(!is.na(route_id)))
1510771851455:services.summary <- inner_join(trips.by.services, routes.by.services,
1510771851455:by="service_id")
1510771851457:rm("trips.by.services", "routes.by.services")
1510772012998:View(services.summary)
1510772039638:trips.by.services <- trips %>%
1510772039639:group_by(service_id, route_id) %>%
1510772039640:summarise(trip_count=sum(!is.na(trip_id)))
1510772067297:trips.by.services <- trips %>%
1510772067298:group_by(service_id, route_id) %>%
1510772067299:summarise(trip_count=sum(!is.na(trip_id)))
1510772067318:routes.by.services <- trips.by.services %>%
1510772067318:summarise(route.count=sum(!is.na(route_id)))
1510772067327:trips.by.services <- ungroup(trips.by.services)
1510772067328:services.summary <- inner_join(trips.by.services, routes.by.services,
1510772067328:by="service_id")
1510772067329:rm("trips.by.services", "routes.by.services")
1510772070620:View(services.summary)
1510772097414:trips.by.services <- trips %>%
1510772097415:group_by(service_id, route_id) %>%
1510772097416:summarise(trip_count=sum(!is.na(trip_id)))
1510772101346:View(trips.by.services)
1510772135839:trips.by.services <- trips %>%
1510772135839:group_by(service_id) %>%
1510772135840:summarise(trip_count=sum(!is.na(trip_id)))
1510772139203:routes.by.services <- trips.by.services %>%
1510772139204:summarise(route.count=sum(!is.na(route_id)))
1510772165012:trips.by.services <- trips %>%
1510772165014:group_by(service_id) %>%
1510772165015:summarise(trip_count=sum(!is.na(trip_id)))
1510772167671:View(trips.by.services)
1510772239757:routes.by.services <- trips %>%
1510772239757:group_by(service_id, route_id) %>%
1510772239758:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510772239759:summarise(route.count=sum(!is.na(route_id)))
1510772243394:View(routes.by.services)
1510772254654:trips.by.services <- trips %>%
1510772254660:group_by(service_id) %>%
1510772254660:summarise(trip_count=sum(!is.na(trip_id)))
1510772254675:routes.by.services <- trips %>%
1510772254675:group_by(service_id, route_id) %>%
1510772254676:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510772254677:summarise(route.count=sum(!is.na(route_id)))
1510772254694:services.summary <- inner_join(trips.by.services, routes.by.services,
1510772254694:by="service_id")
1510772254696:rm("trips.by.services", "routes.by.services")
1510772257204:View(services.summary)
1510773956474:agencies <- read_csv('gtfs/agency.txt')
1510773956480:calendar <- read_csv('gtfs/calendar.txt')
1510773956491:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510773956496:routes <- read_csv('gtfs/routes.txt')
1510773956500:shapes <- read_csv('gtfs/shapes.txt')
1510773956665:stop.times <- read_csv('gtfs/stop_times.txt')
1510773958585:stops <- read_csv('gtfs/stops.txt')
1510773958595:trips <- read_csv('gtfs/trips.txt')
1510773958627:# ---- Trimming down ----
1510773958628:# 1. Dropping agency_id and route_type from routes as they do not vary
1510773958629:# throughout the data.
1510773958629:routes <- select(routes, -c(agency_id, route_type))
1510773958636:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510773958638:trips <- select(trips, -c(trip_headsign, block_id))
1510773958644:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510773958644:# throughout, departure_time because it is same as arrival_time for all the
1510773958645:# rows
1510773958646:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510773958647:departure_time))
1510773958658:# 1. Service-wise summary.
1510773958659:# How many routes are covered under each service?
1510773958660:# How many trips are offered by each service?
1510773958660:trips.by.services <- trips %>%
1510773958661:group_by(service_id) %>%
1510773958661:summarise(trip_count=sum(!is.na(trip_id)))
1510773958668:routes.by.services <- trips %>%
1510773958670:group_by(service_id, route_id) %>%
1510773958672:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510773958673:summarise(route.count=sum(!is.na(route_id)))
1510773958695:services.summary <- inner_join(trips.by.services, routes.by.services,
1510773958695:by="service_id")
1510773958697:rm("trips.by.services", "routes.by.services")
1510773963710:View(services.summary)
1510774185689:x <- group_by(stop.times, stop_id)
1510774202176:View(x)
1510774255598:summarise(x, sum(!is.na(trip_id)))
1510774324377:len(unique(stops$stop_id))
1510774330121:length(unique(stops$stop_id))
1510774336482:length(unique(stops$stop_name))
1510774442079:length(unique(shapes$shape_id))
1510778181331:View(stops)
1510778309735:stop.times <- inner_join(stop.times, stops, by="stop_id") %>%
1510778309740:select(-c(stop_lat, stop_lon))
1510778313348:View(stop.times)
1510778539705:trips.by.services <- trips %>%
1510778539706:group_by(service_id) %>%
1510778539707:summarise(trip_count=sum(!is.na(trip_id)))
1510778539712:routes.by.services <- trips %>%
1510778539712:group_by(service_id, route_id) %>%
1510778539713:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510778539714:summarise(route_count=sum(!is.na(route_id)))
1510778539733:services.summary <- inner_join(trips.by.services, routes.by.services,
1510778539733:by="service_id")
1510778539735:rm("trips.by.services", "routes.by.services")
1510778578024:area.wise.route.counts <- stop.times %>%
1510778578026:group_by(stop_name) %>%
1510778578027:summarise(route_count=sum(!is.na(route_id)))
1510778592878:View(stop.times)
1510778686535:stop.times <- read_csv('gtfs/stop_times.txt')
1510778689969:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510778689969:departure_time))
1510778743773:routes.and.stops <- stop.times %>%
1510778743774:inner_join(stops, by="stop_id") %>%
1510778743775:select(-c(stop_lat, stop_lon)) %>%
1510778743775:inner_join(trips, by="trip_id")
1510778759743:View(routes.and.stops)
1510778838465:View(trips)
1510778902727:length(unique(trips$shape_id))
1510778906998:length(unique(trips$route_id))
1510778940943:x <- group_by(trips, route_id)
1510779016640:x <- group_by(trips, route_id, shape_id)
1510779056047:summarise(x, shape_count=sum(!is.na(shape_id)))
1510843233547:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510843240879:stop.times <- read_csv('gtfs/stop_times.txt')
1510843240880:stops <- read_csv('gtfs/stops.txt')
1510843246005:require(readr)
1510843249800:stop.times <- read_csv('gtfs/stop_times.txt')
1510843252692:stops <- read_csv('gtfs/stops.txt')
1510843274169:require(dplyr)
1510843275847:df <- inner_join(stops, stop.times, by='stop_id')
1510843277870:View(df)
1510843285328:View(stop.times)
1510845853237:x <- c(1, 2, 3, 4, 5)
1510845855815:trim(x)
1510852153492:View(stop.times)
1510879183581:setwd("~/MSc in Data Analytics/Data Visualisation/Week 8")
1510879192820:require('ggplot2')
1510879193212:require('readr')
1510879193286:require('sqldf')
1510879211636:studentresult <- read_csv('studentresult.csv')
1510879211801:colnames(studentresult) <- tolower(colnames(studentresult))
1510879211802:studentresult$subject <- as.factor(studentresult$subject)
1510879211803:studentresult$grade <- as.factor(studentresult$grade)
1510879211804:studentresult$year <- as.factor(studentresult$year)
1510879271460:View(studentresult)
1510879284256:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) FROM studentresult",
1510879284257:"where mark_oral IS NOT 'NA' GROUP BY subject")
1510879284258:subjectwise.mean <- sqldf(query.1)
1510879285947:View(subjectwise.mean)
1510879326742:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) as average",
1510879326743:"FROM studentresult",
1510879326744:"where mark_oral IS NOT 'NA' GROUP BY subject")
1510879326744:subjectwise.mean <- sqldf(query.1)
1510879328818:View(subjectwise.mean)
1510879354661:View(subjectwise.mean)
1510879355861:View(studentresult)
1510879377326:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) as oral_average",
1510879377327:"FROM studentresult",
1510879377328:"where mark_oral IS NOT 'NA' GROUP BY subject")
1510879380933:subjectwise.mean <- sqldf(query.1)
1510879475272:rownames(subjectwise.mean) <- subjectwise.mean$subject
1510879487598:subjectwise.mean['chinese']
1510879490696:subjectwise.mean['Chinese']
1510879492412:subjectwise.mean['Chinese',]
1510879496058:subjectwise.mean['Chinese']
1510879515390:studentresult$mark_oral[is.na(studentresult$mark_oral)] <-
1510879515391:subjectwise.mean[studentresult$subject, ]
1510879561767:subjectwise.mean['Chinese']
1510879567694:subjectwise.mean$oral_average['Chinese']
1510879571272:subjectwise.mean$oral_average['Chinese',]
1510879576877:subjectwise.mean$oral_average['Chinese']
1510879585491:subjectwise.mean
1510879603265:subjectwise.mean['Chinese', ]$subject
1510879609150:subjectwise.mean['Chinese', ]$oral_average
1510879620158:studentresult$mark_oral[is.na(studentresult$mark_oral)] <-
1510879620159:subjectwise.mean[studentresult$subject, ]$oral_average
1510879667247:studentresult <- read_csv('studentresult.csv')
1510879667504:colnames(studentresult) <- tolower(colnames(studentresult))
1510879667504:studentresult$subject <- as.factor(studentresult$subject)
1510879667506:studentresult$grade <- as.factor(studentresult$grade)
1510879667506:studentresult$year <- as.factor(studentresult$year)
1510879671427:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) as oral_average",
1510879671428:"FROM studentresult",
1510879671429:"where mark_oral IS NOT 'NA' GROUP BY subject")
1510879671429:subjectwise.mean <- sqldf(query.1)
1510879671446:rownames(subjectwise.mean) <- subjectwise.mean$subject
1510879698061:require(dplyr)
1510879749039:studentresult <- studentresult %>%
1510879749039:inner_join(subjectwise.mean, by=subject)
1510879754718:studentresult <- studentresult %>%
1510879754719:inner_join(subjectwise.mean, by="subject")
1510879939851:studentresult <- read_csv('studentresult.csv')
1510879939873:colnames(studentresult) <- tolower(colnames(studentresult))
1510879939875:studentresult$subject <- as.factor(studentresult$subject)
1510879939877:studentresult$grade <- as.factor(studentresult$grade)
1510879939879:studentresult$year <- as.factor(studentresult$year)
1510879939888:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) as oral_average",
1510879939889:"FROM studentresult",
1510879939890:"where mark_oral IS NOT 'NA' GROUP BY subject")
1510879939891:subjectwise.mean <- sqldf(query.1)
1510879939914:studentresult <- studentresult %>%
1510879939914:inner_join(subjectwise.mean, by="subject") %>%
1510879939915:mutate(mark_oral=ifelse(is.na(mark_oral), oral_average, mark_oral)) %>%
1510879939916:select(-oral_average)
1510880299850:query.2 <- paste("SELECT name, year, mark_written, mark_oral",
1510880299853:"FROM studentresult",
1510880299854:"GROUP BY name, year")
1510880299855:student.annual.performance <- sqldf(query.2)
1510880303114:View(studentresult)
1510880308780:View(student.annual.performance)
1510880370182:query.2 <- paste("SELECT name, year, SUM(mark_written), SUM(mark_oral)",
1510880370183:"FROM studentresult",
1510880370184:"GROUP BY name, year")
1510880370185:student.annual.performance <- sqldf(query.2)
1510880372479:View(student.annual.performance)
1510880376606:View(studentresult)
1510880409080:query.2 <- paste("SELECT name, year, AVG(SUM(mark_written), SUM(mark_oral))",
1510880409081:"FROM studentresult",
1510880409082:"GROUP BY name, year")
1510880409083:student.annual.performance <- sqldf(query.2)
1510880427989:query.2 <- paste("SELECT name, year, SUM(mark_written), SUM(mark_oral)",
1510880427990:"FROM studentresult",
1510880427991:"GROUP BY name, year")
1510880427991:student.annual.performance <- sqldf(query.2)
1510880445318:student.annual.performance
1510880569125:query.2 <- paste("SELECT name, year, SUM(mark_written) as written_total,",
1510880569131:"SUM(mark_oral) as oral_total",
1510880569132:"FROM studentresult",
1510880569132:"GROUP BY name, year")
1510880569134:student.annual.performance <- sqldf(query.2) %>%
1510880569136:mutate(average_marks = (written_total + oral_total) / 2) %>%
1510880569138:select(-c('written_total', 'oral_total'))
1510880576598:query.2 <- paste("SELECT name, year, SUM(mark_written) as written_total,",
1510880576599:"SUM(mark_oral) as oral_total",
1510880576600:"FROM studentresult",
1510880576600:"GROUP BY name, year")
1510880576601:student.annual.performance <- sqldf(query.2)
1510880601055:query.2 <- paste("SELECT name, year, SUM(mark_written) as written_total,",
1510880601058:"SUM(mark_oral) as oral_total",
1510880601058:"FROM studentresult",
1510880601059:"GROUP BY name, year")
1510880601060:student.annual.performance <- sqldf(query.2) %>%
1510880601060:mutate(average_marks = (written_total + oral_total) / 2)
1510880604363:View(student.annual.performance)
1510880660102:query.2 <- paste("SELECT name, year, SUM(mark_written) as written_total,",
1510880660103:"SUM(mark_oral) as oral_total",
1510880660104:"FROM studentresult",
1510880660105:"GROUP BY name, year")
1510880660105:student.annual.performance <- sqldf(query.2) %>%
1510880660106:mutate(average_marks = (written_total + oral_total) / 2) %>%
1510880660107:select(-c(written_total, oral_total))
1510880667914:View(student.annual.performance)
1510881550965:timex <- "11:00:00"
1510881571502:format("%H:%m:%s", timex)
1510881770692:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510881790479:stop.times <- read_csv('gtfs/stop_times.txt')
1510881927561:str(stop.times)
1510881941903:View(stop.times)
1510881989231:stop.times <- filter(stop.times, trip_id=='.1598.0-33A-b12-1.451.I')
1510881997053:stop.times <- read_csv('gtfs/stop_times.txt')
1510882004339:View(stop.times)
1510882027200:stop.times <- filter(stop.times, trip_id=='1.1598.0-33A-b12-1.451.I')
1510882029758:View(stop.times)
1510882044386:stop.times$arrival_time < "11:00:00"
1510882055173:stop.times$arrival_time
1510882074753:stop.times$arrival_time < time("11:00:00")
1510882158642:as.POSIXct("11:00:00", format="%H:%M:%S")
1510882218730:strptime(x = "11:00:00", format = "%H:%M:%S")
1510882311743:str(stop.times)
1510882350605:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510882350606:departure_time))
1510882400638:stop.times$arrival_time
1510882409218:type(stop.times$arrival_time)
1510882412053:typeof(stop.times$arrival_time)
1510882423719:View(stop.times)
1510882431474:16:15:00
1510882440488:16:15
1510882512645:arrival_times <- stop.times$arrival_time
1510882515020:arrival_times
1510882530893:arrival_times > '11:00:00'
1510882544079:arrival_times > '17:00:00'
1510882547373:arrival_times > '18:00:00'
1510882560174:arrival_times[1]
1510882564228:x <- arrival_times[1]
1510882565344:x
1510882568994:date(x)
1510882574990:type(x)
1510882577897:typeof(x)
1510882588424:print(x)
1510882638627:strptime(x = x, format = "%H:%M:%S")
1510882657895:strptime(x = x, format = "%H:%M:%S") > strptime(x = "11:00:00", format = "%H:%M:%S")
1510882662972:strptime(x = x, format = "%H:%M:%S") > strptime(x = "23:00:00", format = "%H:%M:%S")
1510882672741:strptime(x = x, format = "%H:%M:%S") > strptime(x = "16:16:00", format = "%H:%M:%S")
1510882677811:strptime(x = x, format = "%H:%M:%S") > strptime(x = "16:14:00", format = "%H:%M:%S")
1510882970239:stop.times <- read_csv('gtfs/stop_times.txt')
1510882975104:View(stop.times)
1510883204725:stop.times <- select(stop.times, -c(pickup_type, drop_off_type, departure_time)
1510883206612:)
1510883216566:stop.times <- filter(stop.times, trip_id=='1.1598.0-33A-b12-1.451.I')
1510883219918:View(stop.times)
1510883252424:setwd("~/MSc in Data Analytics/Data Visualisation/Week 8")
1510883271761:studentresult <- read_csv('studentresult.csv')
1510883271781:colnames(studentresult) <- tolower(colnames(studentresult))
1510883271782:studentresult$subject <- as.factor(studentresult$subject)
1510883271785:studentresult$grade <- as.factor(studentresult$grade)
1510883271787:studentresult$year <- as.factor(studentresult$year)
1510883277224:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) AS oral_average",
1510883277225:"FROM studentresult",
1510883277226:"WHERE mark_oral IS NOT 'NA' GROUP BY subject")
1510883277227:subjectwise.mean <- sqldf(query.1)
1510883280219:studentresult <- studentresult %>%
1510883280220:inner_join(subjectwise.mean, by="subject") %>%
1510883280221:mutate(mark_oral=ifelse(is.na(mark_oral), oral_average, mark_oral)) %>%
1510883280221:select(-oral_average)
1510883284198:query.2 <- paste("SELECT name, year, SUM(mark_written) as written_total,",
1510883284199:"SUM(mark_oral) as oral_total",
1510883284199:"FROM studentresult",
1510883284200:"GROUP BY name, year")
1510883284200:student.annual.performance <- sqldf(query.2) %>%
1510883284201:mutate(average_marks = (written_total + oral_total) / 2) %>%
1510883284202:select(-c(written_total, oral_total))
1510883300457:qplot(x=name, y=average_marks, fill=average_marks, geom='blank') +
1510883300460:geom_bar(stat='identity', position='dodge')
1510883346388:qplot(x=name, y=average_marks, data=student.annual.performance,
1510883346390:fill=average_marks, geom='blank') +
1510883346391:geom_bar(stat='identity', position='dodge')
1510883509763:Animals <- read.table(
1510883509766:header=TRUE, text='Category        Reason Species
1510883509767:1   Decline       Genuine      24
1510883509768:2  Improved       Genuine      16
1510883509769:3  Improved Misclassified      85
1510883509769:4   Decline Misclassified      41
1510883509770:5   Decline     Taxonomic       2
1510883509770:6  Improved     Taxonomic       7
1510883509772:7   Decline       Unclear      41
1510883509772:8  Improved       Unclear     117')
1510883509781:ggplot(Animals, aes(factor(Reason), Species, fill = Category)) +
1510883509783:geom_bar(stat="identity", position = "dodge") +
1510883509783:scale_fill_brewer(palette = "Set1")
1510883730579:View(Animals)
1510883774637:reason - year, species - avgmarks
1510883874450:ggplot(student.annual.performance,
1510883874451:aes(factor(year), average_marks, fill = name)) +
1510883874452:geom_bar(stat="identity", position = "dodge") +
1510883874452:scale_fill_brewer(palette = "Set1")
1510883890892:qplot(student.annual.performance,
1510883890892:aes(factor(year), average_marks, fill = name)) +
1510883890893:geom_bar(stat="identity", position = "dodge") +
1510883890894:scale_fill_brewer(palette = "Set1")
1510883896352:ggplot(student.annual.performance,
1510883896353:aes(factor(year), average_marks, fill = name)) +
1510883896354:geom_bar(stat="identity", position = "dodge") +
1510883896354:scale_fill_brewer(palette = "Set1")
1510884021012:qplot(data=student.annual.performance,
1510884021014:aes(x = factor(year), y = average_marks, fill = name)) +
1510884021014:geom_bar(stat="identity", position = "dodge") +
1510884021015:scale_fill_brewer(palette = "Set1")
1510884026848:qplot(data=student.annual.performance,
1510884026848:aes(x = factor(year), y = average_marks, fill = name)) +
1510884026849:geom_bar(stat="identity", position = "dodge")
1510884076723:qplot(data=student.annual.performance)
1510884076756:+ aes(x = factor(year), y = average_marks, fill = name)
1510884136313:qplot(data=student.annual.performance)
1510884136381:+ aes(x = factor(year), y = average_marks, fill = name)
1510884161918:ggplot(student.annual.performance,
1510884161919:aes(factor(year), average_marks, fill = name)) +
1510884161919:geom_bar(stat="identity", position = "dodge") +
1510884161920:scale_fill_brewer(palette = "Set1")
1510884210927:ggplot(student.annual.performance,
1510884210927:aes(factor(year), average_marks, fill = name)) +
1510884210928:geom_bar(stat="identity", position = "dodge") +
1510884210929:scale_fill_brewer(palette = "Set1") +
1510884210929:xlab("Year") + ylab("Average marks")
1510884327974:GetAge <- function (d) {
1510884327977:now <- as.Date(Sys.Date())
1510884327977:then <- as.Date(d, format="%d-%m-%Y")
1510884327978:result <- now - then
1510884327979:return(round(as.numeric(result / 365)))
1510884327979:}
1510884372165:GetAge <- function(d) {
1510884372165:now <- as.Date(Sys.Date())
1510884372166:then <- as.Date(d, format = "%d-%m-%Y")
1510884372167:result <- now - then
1510884372168:return(round(as.numeric(result / 365)))
1510884372169:}
1510884412637:studentresult <- mutate(age=GetAge(dob))
1510884432074:studentresult <- mutate(studentresult, age=GetAge(dob))
1510884572611:as.Date(2000)
1510884575411:as.Date('2000')
1510884586481:as.Date(x = "2000")
1510917229910:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1510917323574:require(dplyr)
1510917323865:require(ggmap)
1510917324206:require(readr)
1510917348209:agencies <- read_csv('gtfs/agency.txt')
1510917348288:calendar <- read_csv('gtfs/calendar.txt')
1510917348436:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510917348439:routes <- read_csv('gtfs/routes.txt')
1510917348446:shapes <- read_csv('gtfs/shapes.txt')
1510917348855:stop.times <- read_csv('gtfs/stop_times.txt')
1510917352235:stops <- read_csv('gtfs/stops.txt')
1510917352252:trips <- read_csv('gtfs/trips.txt')
1510917352300:# ---- Trimming down ----
1510917352300:# After examining the tables, we can see that some of the tables have variables
1510917352301:# that will not be helpful in the analysis. So, we can remove those variables.
1510917352302:# 1. Dropping agency_id and route_type from routes as they do not vary
1510917352302:# throughout the data.
1510917352303:routes <- select(routes, -c(agency_id, route_type))
1510917352336:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510917352336:trips <- select(trips, -c(trip_headsign, block_id))
1510917352389:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510917352389:# throughout, departure_time because it is same as arrival_time for all the
1510917352390:# rows
1510917352391:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510917352391:departure_time))
1510917352397:# EDA
1510917352397:# 1. Service-wise summary.
1510917352398:# a) How many routes are covered under each service?
1510917352399:# b) How many trips are offered by each service?
1510917352399:trips.by.services <- trips %>%
1510917352400:group_by(service_id) %>%
1510917352400:summarise(trip_count=sum(!is.na(trip_id)))
1510917352436:routes.by.services <- trips %>%
1510917352437:group_by(service_id, route_id) %>%
1510917352438:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510917352438:summarise(route_count=sum(!is.na(route_id)))
1510917352495:services.summary <- inner_join(trips.by.services, routes.by.services,
1510917352495:by="service_id")
1510917352499:rm("trips.by.services", "routes.by.services")
1510917461891:require(ggplot2)
1510917515507:Animals <- read.table(
1510917515512:header=TRUE, text='Category        Reason Species
1510917515512:1   Decline       Genuine      24
1510917515513:2  Improved       Genuine      16
1510917515513:3  Improved Misclassified      85
1510917515514:4   Decline Misclassified      41
1510917515514:5   Decline     Taxonomic       2
1510917515515:6  Improved     Taxonomic       7
1510917515515:7   Decline       Unclear      41
1510917515518:8  Improved       Unclear     117')
1510917515525:ggplot(Animals, aes(factor(Reason), Species, fill = Category)) +
1510917515525:geom_bar(stat="identity", position = "dodge") +
1510917515527:scale_fill_brewer(palette = "Set1")Animals <- read.table(
1510917515527:header=TRUE, text='Category        Reason Species
1510917515560:1   Decline       Genuine      24
1510917515560:2  Improved       Genuine      16
1510917515562:3  Improved Misclassified      85
1510917515562:4   Decline Misclassified      41
1510917515563:5   Decline     Taxonomic       2
1510917515563:6  Improved     Taxonomic       7
1510917515563:7   Decline       Unclear      41
1510917515564:8  Improved       Unclear     117')
1510917515564:ggplot(Animals, aes(factor(Reason), Species, fill = Category)) +
1510917515565:geom_bar(stat="identity", position = "dodge") +
1510917515565:scale_fill_brewer(palette = "Set1")
1510917537617:Animals <- read.table(
1510917537618:header=TRUE, text='Category        Reason Species
1510917537619:1   Decline       Genuine      24
1510917537619:2  Improved       Genuine      16
1510917537620:3  Improved Misclassified      85
1510917537620:4   Decline Misclassified      41
1510917537621:5   Decline     Taxonomic       2
1510917537624:6  Improved     Taxonomic       7
1510917537626:7   Decline       Unclear      41
1510917537627:8  Improved       Unclear     117')
1510917537629:ggplot(Animals, aes(factor(Reason), Species, fill = Category)) +
1510917537630:geom_bar(stat="identity", position = "dodge") +
1510917537631:scale_fill_brewer(palette = "Set1")
1510917548023:View(Animals)
1510917553509:View(routes)
1510917568755:View(services.summary)
1510917618674:require(reshape2)
1510917646218:services.summary <- melt(services.summary)
1510917666708:trips.by.services <- trips %>%
1510917666711:group_by(service_id) %>%
1510917666712:summarise(trip_count=sum(!is.na(trip_id)))
1510917666723:routes.by.services <- trips %>%
1510917666724:group_by(service_id, route_id) %>%
1510917666725:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510917666725:summarise(route_count=sum(!is.na(route_id)))
1510917666741:services.summary <- inner_join(trips.by.services, routes.by.services,
1510917666742:by="service_id")
1510917666754:rm("trips.by.services", "routes.by.services")
1510917701480:services.summary <- melt(data = services.summary, id.vars = service_id)
1510917707253:services.summary <- melt(data = services.summary, id.vars = "service_id")
1510917861320:ggplot(services.summary, aes(factor(variable), value, fill=service_id)) +
1510917861321:geom_bar(stat='identity', position='dodge') +
1510917861322:scale_fill_brewer(palette = "Set1")
1510917916204:ggplot(services.summary, aes(factor(variable), value, fill=factor(service_id))) +
1510917916205:geom_bar(stat='identity', position='dodge') +
1510917916206:scale_fill_brewer(palette = "Set1")
1510918008144:ggplot(services.summary, aes(reorder(factor(variable), value), value, fill=factor(service_id))) +
1510918008145:geom_bar(stat='identity', position='dodge') +
1510918008146:scale_fill_brewer(palette = "Set1")
1510918100847:trips.by.services <- trips %>%
1510918100848:group_by(service_id) %>%
1510918100849:summarise(trip_count=sum(!is.na(trip_id)))
1510918103712:View(trips.by.services)
1510918194307:qplot(x=reorder(service_id, trip_count),
1510918194307:y=trip_count, data=trips.by.services,
1510918194308:fill=trip_count, geom='blank', main='Trips by services') +
1510918194309:geom_bar(stat='identity', position='dodge') +
1510918194310:xlab("Services") + ylab('Trips')
1510918220969:qplot(x=reorder(service_id, trip_count),
1510918220969:y=trip_count, data=trips.by.services,
1510918220970:fill=trip_count, geom='blank', main='Trips by services') +
1510918220970:geom_bar(stat='identity', position='dodge') +
1510918220971:xlab("Services") + ylab('Trips') +
1510918220971:scale_fill_brewer(palette = "Set1")
1510918245340:qplot(x=reorder(factor(service_id), trip_count),
1510918245341:y=trip_count, data=trips.by.services,
1510918245341:fill=trip_count, geom='blank', main='Trips by services') +
1510918245342:geom_bar(stat='identity', position='dodge') +
1510918245343:xlab("Services") + ylab('Trips') +
1510918245344:scale_fill_brewer(palette = "Set1")
1510918272084:qplot(x=service_id,
1510918272084:y=trip_count, data=trips.by.services,
1510918272085:fill=trip_count, geom='blank', main='Trips by services') +
1510918272086:geom_bar(stat='identity', position='dodge') +
1510918272086:xlab("Services") + ylab('Trips') +
1510918272086:scale_fill_brewer(palette = "Set1")
1510918280779:qplot(x=factor(service_id),
1510918280780:y=trip_count, data=trips.by.services,
1510918280781:fill=trip_count, geom='blank', main='Trips by services') +
1510918280782:geom_bar(stat='identity', position='dodge') +
1510918280782:xlab("Services") + ylab('Trips') +
1510918280782:scale_fill_brewer(palette = "Set1")
1510918466590:qplot(x=factor(service_id),
1510918466591:y=trip_count, data=trips.by.services,
1510918466592:fill=trip_count, geom='blank', main='Trips by services') +
1510918466592:geom_bar(stat='identity', position='dodge') +
1510918466593:xlab("Services") + ylab('Trips') +
1510918466593:scale_colour_manual(breaks=c('1', '2', '3'),
1510918466594:labels=c('Service 1', 'Service 2', 'Service 3'),
1510918466594:values=c('blue', 'red', 'green'))
1510918513917:qplot(x=reorder(factor(service_id), trip_count)
1510918513918:y=trip_count, data=trips.by.services,
1510918513919:fill=trip_count, geom='blank', main='Trips by services') +
1510918513919:geom_bar(stat='identity', position='dodge') +
1510918513920:xlab("Services") + ylab('Trips') +
1510918513920:scale_colour_manual(breaks=c('1', '2', '3'),
1510918513920:labels=c('Service 1', 'Service 2', 'Service 3'),
1510918513921:values=c("#E69F00", "#56B4E9", "#009E73"))
1510918540266:qplot(x=reorder(factor(service_id), trip_count)
1510918540268:y=trip_count, data=trips.by.services,
1510918540269:fill=trip_count, geom='blank', main='Trips by services') +
1510918540270:geom_bar(stat='identity', position='dodge')
1510918557014:qplot(x=reorder(factor(service_id), trip_count)
1510918557015:y=trip_count, data=trips.by.services,
1510918557016:fill=trip_count, geom='blank', main='Trips by services') +
1510918557016:geom_bar(stat='identity', position='dodge')
1510918576644:qplot(x=reorder(factor(service_id), trip_count),
1510918576645:y=trip_count, data=trips.by.services,
1510918576645:fill=trip_count, geom='blank', main='Trips by services') +
1510918576646:geom_bar(stat='identity', position='dodge') +
1510918576646:xlab("Services") + ylab('Trips') +
1510918576646:scale_colour_manual(breaks=c('1', '2', '3'),
1510918576647:labels=c('Service 1', 'Service 2', 'Service 3'),
1510918576647:values=c("#E69F00", "#56B4E9", "#009E73"))
1510918594359:qplot(x=reorder(factor(service_id), trip_count),
1510918594359:y=trip_count, data=trips.by.services,
1510918594360:fill=trip_count, geom='blank', main='Trips by services') +
1510918594361:geom_bar(stat='identity', position='dodge') +
1510918594361:xlab("Services") + ylab('Trips')
1510918613033:qplot(x=reorder(factor(service_id), -trip_count),
1510918613034:y=trip_count, data=trips.by.services,
1510918613035:fill=trip_count, geom='blank', main='Trips by services') +
1510918613035:geom_bar(stat='identity', position='dodge') +
1510918613036:xlab("Services") + ylab('Trips')
1510918786804:qplot(x=reorder(factor(service_id), -trip_count),
1510918786805:y=trip_count, data=trips.by.services,
1510918786805:fill=service_id, geom='blank', main='Trips by services') +
1510918786806:geom_bar(stat='identity', position='dodge') +
1510918786806:xlab("Services") + ylab('Trips') +
1510918786807:scale_fill_brewer(palette = "Set1")
1510918803895:qplot(x=reorder(factor(service_id), -trip_count),
1510918803899:y=trip_count, data=trips.by.services,
1510918803899:fill=factor(service_id), geom='blank', main='Trips by services') +
1510918803901:geom_bar(stat='identity', position='dodge') +
1510918803901:xlab("Services") + ylab('Trips') +
1510918803902:scale_fill_brewer(palette = "Set1")
1510918959244:trips <- read_csv('gtfs/trips.txt')
1510918962640:trips <- select(trips, -c(trip_headsign, block_id)) %>%
1510918962641:mutate(service_id=factor(service_id))
1510918977271:trips.by.services <- trips %>%
1510918977272:group_by(service_id) %>%
1510918977274:summarise(trip_count=sum(!is.na(trip_id)))
1510919011263:qplot(x=reorder(service_id, -trip_count),
1510919011264:y=trip_count, data=trips.by.services,
1510919011264:fill=service_id, geom='blank', main='Trips by services') +
1510919011265:geom_bar(stat='identity', position='dodge') +
1510919011265:xlab("Services") + ylab('Trips') +
1510919011265:scale_colour_manual(breaks=c('1', '2', '3'),
1510919011266:labels=c('Service 1', 'Service 2', 'Service 3'),
1510919011266:values=c("#E69F00", "#56B4E9", "#009E73"))
1510919201304:qplot(x=reorder(service_id, -trip_count),
1510919201305:y=trip_count, data=trips.by.services,
1510919201306:fill=service_id, geom='blank', main='Trips by services') +
1510919201307:geom_bar(stat='identity', position='dodge') +
1510919201308:xlab("Services") + ylab('Trips') +
1510919201309:scale_colour_manual(labels=c('Service 1', 'Service 2', 'Service 3'),
1510919201310:values=c("#E69F00", "#56B4E9", "#009E73"))
1510919219711:qplot(x=reorder(service_id, -trip_count),
1510919219712:y=trip_count, data=trips.by.services,
1510919219713:fill=service_id, geom='blank', main='Trips by services') +
1510919219714:geom_bar(stat='identity', position='dodge') +
1510919219715:xlab("Services") + ylab('Trips') +
1510919219716:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510919335366:routes.by.services <- trips %>%
1510919335367:group_by(service_id, route_id) %>%
1510919335369:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510919335370:summarise(route_count=sum(!is.na(route_id)))
1510919335389:qplot(x=reorder(service_id, -route_count),
1510919335389:y=route_count, data=routes.by.services,
1510919335390:fill=service_id, geom='blank', main='Routes by services') +
1510919335391:geom_bar(stat='identity', position='dodge') +
1510919335391:xlab("Services") + ylab('Trips') +
1510919335392:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510920059202:routes.and.stops <- stop.times %>%
1510920059204:inner_join(stops, by="stop_id") %>%
1510920059204:select(-c(stop_lat, stop_lon)) %>%
1510920059205:inner_join(trips, by="trip_id") %>%
1510920059205:select(-c(service_id))
1510920059798:area.wise.route.counts <- routes.and.stops %>%
1510920059798:group_by(stop_name) %>%
1510920059799:summarise(route_count=sum(!is.na(route_id)))
1510920092828:View(area.wise.route.counts)
1510920140672:area.wise.route.counts <- routes.and.stops %>%
1510920140672:group_by(stop_name, route_id) %>%
1510920140673:summarise(route_count=sum(!is.na(route_id)))
1510920150933:View(area.wise.route.counts)
1510920205983:area.wise.route.counts <- routes.and.stops %>%
1510920205983:group_by(stop_name, route_id) %>%
1510920205984:summarise(route_count=sum(!is.na(route_id))) %>%
1510920205985:summarise(route_count=sum(!is.na(route_id)))
1510920208889:View(area.wise.route.counts)
1510920310683:agencies <- read_csv('gtfs/agency.txt')
1510920310691:calendar <- read_csv('gtfs/calendar.txt')
1510920310695:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510920310704:routes <- read_csv('gtfs/routes.txt')
1510920310709:shapes <- read_csv('gtfs/shapes.txt')
1510920310866:stop.times <- read_csv('gtfs/stop_times.txt')
1510920312420:stops <- read_csv('gtfs/stops.txt')
1510920312430:trips <- read_csv('gtfs/trips.txt')
1510920312623:# ---- Trimming down ----
1510920312624:# After examining the tables, we can see that some of the tables have variables
1510920312625:# that will not be helpful in the analysis. So, we can remove those variables.
1510920312625:# 1. Dropping agency_id and route_type from routes as they do not vary
1510920312626:# throughout the data.
1510920312626:routes <- select(routes, -c(agency_id, route_type))
1510920312631:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510920312632:# Also, service_id can be converted to a factor as only 3 possible values are
1510920312633:# there.
1510920312634:trips <- select(trips, -c(trip_headsign, block_id)) %>%
1510920312634:mutate(service_id=factor(service_id))
1510920312647:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510920312647:# throughout, departure_time because it is same as arrival_time for all the
1510920312648:# rows
1510920312649:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510920312649:departure_time))
1510920312657:# EDA
1510920312658:# 1. Service-wise summary.
1510920312659:# a) How many routes are covered under each service?
1510920312661:# b) How many trips are offered by each service?
1510920312661:trips.by.services <- trips %>%
1510920312661:group_by(service_id) %>%
1510920312662:summarise(trip_count=sum(!is.na(trip_id)))
1510920312667:qplot(x=reorder(service_id, -trip_count),
1510920312667:y=trip_count, data=trips.by.services,
1510920312669:fill=service_id, geom='blank', main='Trips by services') +
1510920312669:geom_bar(stat='identity', position='dodge') +
1510920312671:xlab("Services") + ylab('Trips') +
1510920312673:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510920312981:routes.by.services <- trips %>%
1510920312981:group_by(service_id, route_id) %>%
1510920312982:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510920312983:summarise(route_count=sum(!is.na(route_id)))
1510920312999:qplot(x=reorder(service_id, -route_count),
1510920312999:y=route_count, data=routes.by.services,
1510920313000:fill=service_id, geom='blank', main='Routes by services') +
1510920313001:geom_bar(stat='identity', position='dodge') +
1510920313001:xlab("Services") + ylab('Trips') +
1510920313002:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510920313454:services.summary <- inner_join(trips.by.services, routes.by.services,
1510920313455:by="service_id")
1510920313457:rm("trips.by.services", "routes.by.services")
1510920313458:# Plotting the summary.
1510920313459:services.summary <- melt(data = services.summary, id.vars = "service_id")
1510920313460:ggplot(services.summary, aes(reorder(factor(variable), value), value, fill=factor(service_id))) +
1510920313460:geom_bar(stat='identity', position='dodge') +
1510920313461:scale_fill_brewer(palette = "Set1")
1510920313869:# 2. Stop-wise summary.
1510920313869:# a) How many stops are there? Grouped by stop_ids and stop_names.
1510920313870:# Grouping by stop_names, we can get bus stops clustered in an area.
1510920313871:# b) How vital is an area(How many different routes are there in each area?)
1510920313871:# c) How busy is an area(How many different trips are there in each area?)
1510920313871:# d) Make categories based on importance of a stop - how many stops are there
1510920313872:#    in each category? And same based on busyness of stops?
1510920313872:# a) How many stops are there?
1510920313872:stop.count <- length(unique(stops$stop_id))
1510920313873:stop.area.count <- length(unique(stops$stop_name))
1510920313874:# b) How vital is an area(How many different routes are there in each area?)
1510920313875:stops.and.trips <- stop.times %>%
1510920313875:inner_join(stops, by="stop_id") %>%
1510920313875:select(-c(stop_lat, stop_lon)) %>%
1510920313876:inner_join(trips, by="trip_id") %>%
1510920313876:select(-c(service_id))
1510920314517:vital.stops <- stops.and.trips %>%
1510920314518:group_by(stop_name, route_id) %>%
1510920314519:summarise(route_count=sum(!is.na(route_id))) %>%
1510920314519:summarise(route_count=sum(!is.na(route_id)))
1510920437536:busy.stops <- stops.and.trips %>%
1510920437537:group_by(stop_name) %>%
1510920437538:summarise(trip_count=sum(!is.na(route_id)))
1510920445536:View(busy.stops)
1510920481155:stops.and.trips <- stop.times %>%
1510920481155:inner_join(stops, by="stop_id") %>%
1510920481156:select(-c(stop_lat, stop_lon)) %>%
1510920481157:inner_join(trips, by="trip_id")
1510920554182:stops.and.trips <- stop.times %>%
1510920554183:inner_join(stops, by="stop_id") %>%
1510920554184:select(-c(stop_lat, stop_lon)) %>%
1510920554184:inner_join(trips, by="trip_id")
1510920554574:vital.stops <- stops.and.trips %>%
1510920554575:group_by(stop_name, service_id, route_id) %>%
1510920554575:summarise(route_count=sum(!is.na(route_id))) %>%
1510920554576:summarise(route_count=sum(!is.na(route_id)))
1510920554904:# c) How busy is an area? (How many different trips are there in each area?)
1510920554904:busy.stops <- stops.and.trips %>%
1510920554905:group_by(stop_name, service_id) %>%
1510920554906:summarise(trip_count=sum(!is.na(route_id)))
1510920560641:View(vital.stops)
1510920735703:View(busy.stops)
1510921111214:areas.and.stops <- stops.and.trips %>%
1510921111216:group_by(stop_name) %>%
1510921111216:mutate(stop_count=sum(!is.na(stop_id)))
1510921131617:areas.and.stops <- stops.and.trips %>%
1510921131617:group_by(stop_name) %>%
1510921131618:summarise(stop_count=sum(!is.na(stop_id)))
1510921133872:View(areas.and.stops)
1510921162585:len(unique(stops$stop_id))
1510921169178:length(unique(stops$stop_id))
1510921177933:len(stops)
1510921184677:nrow(stops)
1510921197709:sum(areas.and.stops$stop_count)
1510921230170:areas.and.stops <- stops.and.trips %>%
1510921230171:group_by(stop_name, stop_id) %>%
1510921230172:summarise(stop_count=sum(!is.na(stop_id))) %>%
1510921230172:summarise(stop_count=sum(!is.na(stop_id)))
1510921233385:View(areas.and.stops)
1510921239218:sum(areas.and.stops$stop_count)
1510921360855:areas.and.stops <- stops.and.trips %>%
1510921360856:group_by(stop_name, stop_id) %>%
1510921360858:summarise(stop_count=sum(!is.na(stop_id))) %>%
1510921360859:summarise(stop_count=sum(!is.na(stop_id)))
1510921361087:# b) How vital is an area? (How many different routes are there in each area?)
1510921361088:stops.and.trips <- stop.times %>%
1510921361089:inner_join(stops, by="stop_id") %>%
1510921361089:select(-c(stop_lat, stop_lon)) %>%
1510921361090:inner_join(trips, by="trip_id")
1510921361330:vital.stops <- stops.and.trips %>%
1510921361330:group_by(stop_name, service_id, route_id) %>%
1510921361331:summarise(route_count=sum(!is.na(route_id))) %>%
1510921361332:summarise(route_count=sum(!is.na(route_id))) %>%
1510921361332:inner_join(areas.and.stops, by="stop_name")
1510921361635:# c) How busy is an area? (How many different trips are there in each area?)
1510921361635:busy.stops <- stops.and.trips %>%
1510921361636:group_by(stop_name, service_id) %>%
1510921361637:summarise(trip_count=sum(!is.na(route_id))) %>%
1510921361637:inner_join(areas.and.stops, by="stop_name")
1510921370338:View(vital.stops)
1510921555713:vital.stops <- stops.and.trips %>%
1510921555715:group_by(stop_name, service_id, route_id) %>%
1510921555715:summarise(route_count=sum(!is.na(route_id))) %>%
1510921555716:summarise(route_count=sum(!is.na(route_id))) %>%
1510921555716:inner_join(areas.and.stops, by="stop_name") %>%
1510921555717:mutate(area_importance=route_count/stop_count)
1510921557345:View(vital.stops)
1510921603609:vital.stops <- stops.and.trips %>%
1510921603611:group_by(stop_name, service_id, route_id) %>%
1510921603612:summarise(route_count=sum(!is.na(route_id))) %>%
1510921603613:summarise(route_count=sum(!is.na(route_id))) %>%
1510921603614:inner_join(areas.and.stops, by="stop_name") %>%
1510921603615:mutate(area_importance=round(route_count/stop_count), 2)
1510921606374:View(vital.stops)
1510921617843:vital.stops <- stops.and.trips %>%
1510921617844:group_by(stop_name, service_id, route_id) %>%
1510921617844:summarise(route_count=sum(!is.na(route_id))) %>%
1510921617844:summarise(route_count=sum(!is.na(route_id))) %>%
1510921617845:inner_join(areas.and.stops, by="stop_name") %>%
1510921617845:mutate(area_importance=round(route_count/stop_count, 2))
1510921619468:View(vital.stops)
1510921933434:busy.stops <- stops.and.trips %>%
1510921933435:group_by(stop_name, service_id) %>%
1510921933436:summarise(trip_count=sum(!is.na(route_id))) %>%
1510921933436:inner_join(areas.and.stops, by="stop_name") %>%
1510921933436:mutate(area_busyness=round(trip_count/stop_count, 2))
1510921937105:View(busy.stops)
1510921978551:View(busy.stops)
1510922125220:hist(busy.stops$area_busyness)
1510922145241:View(busy.stops)
1510922146821:View(busy.stops)
1510922299164:View(calendar)
1510922332328:busy.stops <- stops.and.trips %>%
1510922332329:group_by(stop_name, service_id) %>%
1510922332330:summarise(trip_count=sum(!is.na(route_id))) %>%
1510922332330:inner_join(areas.and.stops, by="stop_name") %>%
1510922332330:mutate(area_busyness=round(trip_count/stop_count, 2)) %>%
1510922332331:mutate(fab=round(ifelse(service_id==1, area_busyness/5,
1510922332331:ifelse(service_id==2, area_busyness/2,
1510922332332:area_busyness)), 2))
1510922587172:vital.stops <- stops.and.trips %>%
1510922587173:group_by(stop_name, service_id, route_id) %>%
1510922587174:summarise(route_count=sum(!is.na(route_id))) %>%
1510922587174:summarise(route_count=sum(!is.na(route_id))) %>%
1510922587175:inner_join(areas.and.stops, by="stop_name") %>%
1510922587175:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1510922587175:mutate(area_importance=round(ifelse(service_id==1, area_importance/5,
1510922587176:ifelse(service_id==2, area_importance/2,
1510922587176:area_importance)), 2))
1510922587641:# c) How busy is an area? (How many different trips are there in each area?)
1510922587642:busy.stops <- stops.and.trips %>%
1510922587643:group_by(stop_name, service_id) %>%
1510922587643:summarise(trip_count=sum(!is.na(route_id))) %>%
1510922587644:inner_join(areas.and.stops, by="stop_name") %>%
1510922587644:mutate(area_busyness=round(trip_count/stop_count, 2)) %>%
1510922587644:mutate(area_busyness=round(ifelse(service_id==1, area_busyness/5,
1510922587645:ifelse(service_id==2, area_busyness/2,
1510922587645:area_busyness)), 2))
1510922687421:hist(busy.stops$area_busyness)
1510922702979:hist(vital.stops$area_importance)
1510922740314:?hist
1510922780039:hist(vital.stops$area_importance, xlim=c(0, 10))
1510922789923:hist(vital.stops$area_importance, xlim=c(0, 10), bins=20)
1510922820861:?title
1510922946016:qplot(x=reorder(service_id, -route_count),
1510922946021:y=route_count, data=routes.by.services,
1510922946022:fill=service_id, geom='blank', main='Routes by services') +
1510922946023:geom_bar(stat='identity', position='dodge') +
1510922946024:xlab("Services") + ylab('Trips') +
1510922946025:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510924207798:agencies <- read_csv('gtfs/agency.txt')
1510924207805:calendar <- read_csv('gtfs/calendar.txt')
1510924207813:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510924207820:routes <- read_csv('gtfs/routes.txt')
1510924207829:shapes <- read_csv('gtfs/shapes.txt')
1510924208134:stop.times <- read_csv('gtfs/stop_times.txt')
1510924210899:stops <- read_csv('gtfs/stops.txt')
1510924210914:trips <- read_csv('gtfs/trips.txt')
1510924210955:# ---- Trimming down ----
1510924210956:# After examining the tables, we can see that some of the tables have variables
1510924210957:# that will not be helpful in the analysis. So, we can remove those variables.
1510924210958:# 1. Dropping agency_id and route_type from routes as they do not vary
1510924210959:# throughout the data.
1510924210960:routes <- select(routes, -c(agency_id, route_type))
1510924210966:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510924210967:# Also, service_id can be converted to a factor as only 3 possible values are
1510924210968:# there.
1510924210968:trips <- select(trips, -c(trip_headsign, block_id)) %>%
1510924210970:mutate(service_id=factor(service_id))
1510924210981:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510924210982:# throughout, departure_time because it is same as arrival_time for all the
1510924210983:# rows
1510924210983:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510924210984:departure_time))
1510924210989:# EDA
1510924210990:# 1. Service-wise summary.
1510924210993:# a) How many routes are covered under each service?
1510924210994:# b) How many trips are offered by each service?
1510924210995:trips.by.services <- trips %>%
1510924210996:group_by(service_id) %>%
1510924210996:summarise(trip_count=sum(!is.na(trip_id)))
1510924211002:qplot(x=reorder(service_id, -trip_count),
1510924211003:y=trip_count, data=trips.by.services,
1510924211003:fill=service_id, geom='blank', main='Trips by services') +
1510924211004:geom_bar(stat='identity', position='dodge') +
1510924211005:xlab("Services") + ylab('Trips') +
1510924211006:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510924211321:routes.by.services <- trips %>%
1510924211322:group_by(service_id, route_id) %>%
1510924211323:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510924211323:summarise(route_count=sum(!is.na(route_id)))
1510924211359:qplot(x=reorder(service_id, -route_count),
1510924211360:y=route_count, data=routes.by.services,
1510924211361:fill=service_id, geom='blank', main='Routes by services') +
1510924211362:geom_bar(stat='identity', position='dodge') +
1510924211363:xlab("Services") + ylab('Trips') +
1510924211364:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510924211821:services.summary <- inner_join(trips.by.services, routes.by.services,
1510924211821:by="service_id")
1510924211823:# Plotting the summary.
1510924211824:services.summary <- melt(data = services.summary, id.vars = "service_id")
1510924211826:# 2. Stop-wise summary.
1510924211826:# a) How many stops are there? Grouped by stop_ids and stop_names.
1510924211827:# Grouping by stop_names, we can get bus stops clustered in an area.
1510924211828:# b) How vital is an area(How many different routes are there in each area?)
1510924211828:# c) How busy is an area(How many different trips are there in each area?)
1510924211828:# d) Make categories based on importance of a stop - how many stops are there
1510924211829:#    in each category? And same based on busyness of stops?
1510924211829:# a) How many stops are there?
1510924211830:stop.count <- length(unique(stops$stop_id))
1510924211831:stop.area.count <- length(unique(stops$stop_name))
1510924211832:# Importance and busyness of an area will vary based on the day of the week as
1510924211832:# well. So, while trying to evaluate these, service_id must be factored in.
1510924211833:# Also, how many stops are there in an area will also give a clearer picture.
1510924211834:# Getting area-wise stop counts.
1510924211834:areas.and.stops <- stops.and.trips %>%
1510924211835:group_by(stop_name, stop_id) %>%
1510924211836:summarise(stop_count=sum(!is.na(stop_id))) %>%
1510924211836:summarise(stop_count=sum(!is.na(stop_id)))
1510924211838:# b) How vital is an area? (How many different routes are there in each area?)
1510924211838:stops.and.trips <- stop.times %>%
1510924211839:inner_join(stops, by="stop_id") %>%
1510924211840:select(-c(stop_lat, stop_lon)) %>%
1510924211840:inner_join(trips, by="trip_id")
1510924212583:# We are looking at the importance of an area by looking at how many different
1510924212583:# routes are passing through the area. We divide this by number of stops in the
1510924212584:# area to get area_importance. Now, service_id comes into picture, we need to
1510924212585:# divide area_importance by the number of days the service operates for in
1510924212586:# order to get the importance of an area per service per day.The higher the
1510924212586:# value for this, the more well-connected or important the area is considered.
1510924212589:vital.stops <- stops.and.trips %>%
1510924212589:group_by(stop_name, service_id, route_id) %>%
1510924212590:summarise(route_count=sum(!is.na(route_id))) %>%
1510924212591:summarise(route_count=sum(!is.na(route_id))) %>%
1510924212591:inner_join(areas.and.stops, by="stop_name") %>%
1510924212592:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1510924212593:mutate(area_importance=round(ifelse(service_id==1, area_importance/5,
1510924212594:ifelse(service_id==2, area_importance/2,
1510924212594:area_importance)), 2))
1510924213117:# c) How busy is an area? (How many different trips are there in each area?)
1510924213117:# Similar analysis to one done for evaluating the importance of areas.
1510924213119:busy.stops <- stops.and.trips %>%
1510924213119:group_by(stop_name, service_id) %>%
1510924213119:summarise(trip_count=sum(!is.na(route_id))) %>%
1510924213120:inner_join(areas.and.stops, by="stop_name") %>%
1510924213120:mutate(area_busyness=round(trip_count/stop_count, 2)) %>%
1510924213121:mutate(area_busyness=round(ifelse(service_id==1, area_busyness/5,
1510924213121:ifelse(service_id==2, area_busyness/2,
1510924213123:area_busyness)), 2))
1510924294587:agencies <- read_csv('gtfs/agency.txt')
1510924294592:calendar <- read_csv('gtfs/calendar.txt')
1510924294596:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1510924294603:routes <- read_csv('gtfs/routes.txt')
1510924294608:shapes <- read_csv('gtfs/shapes.txt')
1510924294769:stop.times <- read_csv('gtfs/stop_times.txt')
1510924296554:stops <- read_csv('gtfs/stops.txt')
1510924296564:trips <- read_csv('gtfs/trips.txt')
1510924296593:# ---- Trimming down ----
1510924296594:# After examining the tables, we can see that some of the tables have variables
1510924296595:# that will not be helpful in the analysis. So, we can remove those variables.
1510924296596:# 1. Dropping agency_id and route_type from routes as they do not vary
1510924296596:# throughout the data.
1510924296598:routes <- select(routes, -c(agency_id, route_type))
1510924296609:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1510924296609:# Also, service_id can be converted to a factor as only 3 possible values are
1510924296610:# there.
1510924296611:trips <- select(trips, -c(trip_headsign, block_id)) %>%
1510924296611:mutate(service_id=factor(service_id))
1510924296628:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1510924296628:# throughout, departure_time because it is same as arrival_time for all the
1510924296629:# rows
1510924296630:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1510924296630:departure_time))
1510924296641:# EDA
1510924296641:# 1. Service-wise summary.
1510924296642:# a) How many routes are covered under each service?
1510924296643:# b) How many trips are offered by each service?
1510924296643:trips.by.services <- trips %>%
1510924296644:group_by(service_id) %>%
1510924296645:summarise(trip_count=sum(!is.na(trip_id)))
1510924296654:qplot(x=reorder(service_id, -trip_count),
1510924296655:y=trip_count, data=trips.by.services,
1510924296657:fill=service_id, geom='blank', main='Trips by services') +
1510924296658:geom_bar(stat='identity', position='dodge') +
1510924296658:xlab("Services") + ylab('Trips') +
1510924296661:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510924296951:routes.by.services <- trips %>%
1510924296952:group_by(service_id, route_id) %>%
1510924296953:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510924296953:summarise(route_count=sum(!is.na(route_id)))
1510924297452:qplot(x=reorder(service_id, -route_count),
1510924297453:y=route_count, data=routes.by.services,
1510924297454:fill=service_id, geom='blank', main='Routes by services') +
1510924297454:geom_bar(stat='identity', position='dodge') +
1510924297454:xlab("Services") + ylab('Trips') +
1510924297455:scale_colour_manual(c("#E69F00", "#56B4E9", "#009E73"))
1510924297768:services.summary <- inner_join(trips.by.services, routes.by.services,
1510924297771:by="service_id")
1510924297773:# Plotting the summary.
1510924297773:services.summary <- melt(data = services.summary, id.vars = "service_id")
1510924297775:# 2. Stop-wise summary.
1510924297776:# a) How many stops are there? Grouped by stop_ids and stop_names.
1510924297777:# Grouping by stop_names, we can get bus stops clustered in an area.
1510924297777:# b) How vital is an area(How many different routes are there in each area?)
1510924297777:# c) How busy is an area(How many different trips are there in each area?)
1510924297778:# d) Make categories based on importance of a stop - how many stops are there
1510924297778:#    in each category? And same based on busyness of stops?
1510924297779:# a) How many stops are there?
1510924297780:stop.count <- length(unique(stops$stop_id))
1510924297783:stop.area.count <- length(unique(stops$stop_name))
1510924297785:# Importance and busyness of an area will vary based on the day of the week as
1510924297786:# well. So, while trying to evaluate these, service_id must be factored in.
1510924297787:# Also, how many stops are there in an area will also give a clearer picture.
1510924297789:# b) How vital is an area? (How many different routes are there in each area?)
1510924297789:stops.and.trips <- stop.times %>%
1510924297790:inner_join(stops, by="stop_id") %>%
1510924297791:select(-c(stop_lat, stop_lon)) %>%
1510924297791:inner_join(trips, by="trip_id")
1510924298491:# Getting area-wise stop counts.
1510924298491:areas.and.stops <- stops.and.trips %>%
1510924298492:group_by(stop_name, stop_id) %>%
1510924298493:summarise(stop_count=sum(!is.na(stop_id))) %>%
1510924298493:summarise(stop_count=sum(!is.na(stop_id)))
1510924298892:# We are looking at the importance of an area by looking at how many different
1510924298892:# routes are passing through the area. We divide this by number of stops in the
1510924298893:# area to get area_importance. Now, service_id comes into picture, we need to
1510924298894:# divide area_importance by the number of days the service operates for in
1510924298894:# order to get the importance of an area per service per day.The higher the
1510924298895:# value for this, the more well-connected or important the area is considered.
1510924298895:vital.stops <- stops.and.trips %>%
1510924298895:group_by(stop_name, service_id, route_id) %>%
1510924298896:summarise(route_count=sum(!is.na(route_id))) %>%
1510924298896:summarise(route_count=sum(!is.na(route_id))) %>%
1510924298896:inner_join(areas.and.stops, by="stop_name") %>%
1510924298897:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1510924298897:mutate(area_importance=round(ifelse(service_id==1, area_importance/5,
1510924298897:ifelse(service_id==2, area_importance/2,
1510924298898:area_importance)), 2))
1510924299301:# c) How busy is an area? (How many different trips are there in each area?)
1510924299301:# Similar analysis to one done for evaluating the importance of areas.
1510924299302:busy.stops <- stops.and.trips %>%
1510924299302:group_by(stop_name, service_id) %>%
1510924299303:summarise(trip_count=sum(!is.na(route_id))) %>%
1510924299303:inner_join(areas.and.stops, by="stop_name") %>%
1510924299304:mutate(area_busyness=round(trip_count/stop_count, 2)) %>%
1510924299304:mutate(area_busyness=round(ifelse(service_id==1, area_busyness/5,
1510924299304:ifelse(service_id==2, area_busyness/2,
1510924299305:area_busyness)), 2))
1510929494786:View(trips)
1510929725645:View(routes)
1510929799110:# 3. An analysis on routes -
1510929799111:# a) Which are the most important routes? (Most trips per routes)
1510929799111:# b) Which are the quickest routes? (Highest average speed across trips)
1510929799112:# a) Which are the most important routes? (Most trips per routes)
1510929799112:trips.by.routes <- trips %>%
1510929799115:inner_join(routes, by="route_id") %>%
1510929799115:group_by(route_id, route_short_name, route_long_name) %>%
1510929799116:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510929799116:ungroup()
1510929802181:View(trips.by.routes)
1510929831533:trips.by.routes <- trips %>%
1510929831534:inner_join(routes, by="route_id") %>%
1510929831535:group_by(route_id, route_short_name, route_long_name, service_id) %>%
1510929831536:summarise(trip_count=sum(!is.na(trip_id))) %>%
1510929831537:ungroup()
1510929841784:View(trips.by.routes)
1510929870632:View(trips)
1510929897490:View(trips)
1510929962653:xx <- trips %>%
1510929962654:inner_join(routes, by = route_id)
1510929962656:filter(direction_id == 1 & route_short_name == '39A')
1510929972620:xx <- trips %>%
1510929972621:inner_join(routes, by = route_id) %>%
1510929972622:filter(direction_id == 1 & route_short_name == '39A')
1510929980178:xx <- trips %>%
1510929980179:inner_join(routes, by = "route_id") %>%
1510929980179:filter(direction_id == 1 & route_short_name == '39A')
1510929984683:View(xx)
1510930001683:View(trips)
1510930056475:View(stop.times)
1510930069582:xx <- trips %>%
1510930069582:inner_join(routes, by = "route_id") %>%
1510930069584:filter(direction_id == 1 & route_short_name == '39A') %>%
1510930069584:inner_join(stop.times, by = 'trip_id')
1510930083732:View(xx)
1510930118601:xx <- trips %>%
1510930118601:inner_join(routes, by = "route_id") %>%
1510930118603:filter(direction_id == 1 & route_short_name == '39A') %>%
1510930118604:inner_join(stop.times, by = 'trip_id') %>%
1510930118605:filter(stop_sequence %in% c(22, 32))
1510930130461:View(xx)
1510930229974:xx <- trips %>%
1510930229975:inner_join(routes, by = "route_id") %>%
1510930229976:filter(direction_id == 1 & route_short_name == '39A') %>%
1510930229977:inner_join(stop.times, by = 'trip_id') %>%
1510930229978:filter(stop_sequence %in% c(22, 32) & trip_id = '3110.2978.0-39A-b12-1.247.I')
1510930240497:xx <- trips %>%
1510930240498:inner_join(routes, by = "route_id") %>%
1510930240499:filter(direction_id == 1 & route_short_name == '39A') %>%
1510930240499:inner_join(stop.times, by = 'trip_id') %>%
1510930240499:filter(stop_sequence %in% c(22, 32) & trip_id=='3110.2978.0-39A-b12-1.247.I')
1510930244203:View(xx)
1510930299724:xx <- trips %>%
1510930299725:inner_join(routes, by = "route_id") %>%
1510930299726:filter(direction_id == 1 & route_short_name == '39A') %>%
1510930299727:inner_join(stop.times, by = 'trip_id') %>%
1510930299728:inner_join(stops, by = 'stop_id') %>%
1510930299729:filter(stop_sequence %in% c(22, 32) & trip_id=='3110.2978.0-39A-b12-1.247.I')
1510930301247:View(xx)
1510930328199:xx <- trips %>%
1510930328200:inner_join(routes, by = "route_id") %>%
1510930328201:filter(direction_id == 1 & route_short_name == '39A') %>%
1510930328201:inner_join(stop.times, by = 'trip_id') %>%
1510930328202:inner_join(stops, by = 'stop_id') %>%
1510930328202:filter(stop_sequence %in% c(22, 32))
1510930330484:View(xx)
1510930640459:View(trips.by.routes)
1510931066311:View(trips.by.routes)
1510931257399:# b) Which are the quickest routes? (Highest average speed across trips)
1510931257400:# Distance covered in each shape is summarised.
1510931257401:shapes.and.distances <- shapes %>%
1510931257402:group_by(shape_id) %>%
1510931257402:summarise(total_distance=max(shape_dist_traveled))
1510931326582:View(stops)
1510931788375:xx <- trips %>%
1510931788375:inner_join(routes, by='route_id') %>%
1510931788376:inner_join(shapes.and.distances, by='shape_id')
1510931791601:View(xx)
1510932034839:View(xx)
1510932125294:xx <- trips %>%
1510932125294:inner_join(routes, by='route_id') %>%
1510932125295:inner_join(shapes.and.distances, by='shape_id') %>%
1510932125296:group_by(route_id, service_id, direction_id) %>%
1510932125296:summarise(distance_covered=mean(total_distance))
1510932128166:View(xx)
1510932146331:xx <- trips %>%
1510932146334:inner_join(routes, by='route_id') %>%
1510932146335:inner_join(shapes.and.distances, by='shape_id') %>%
1510932146336:group_by(route_id, service_id, direction_id)
1510932149712:xx
1510932327551:xx <- trips %>%
1510932327551:inner_join(routes, by='route_id') %>%
1510932327552:inner_join(shapes.and.distances, by='shape_id') %>%
1510932327553:group_by(route_id, service_id, direction_id) %>%
1510932327553:summarise(shape_count=sum(!is.na(shape_id)))
1510932330429:View(xx)
1510932353713:xx <- trips %>%
1510932353714:inner_join(routes, by='route_id') %>%
1510932353714:inner_join(shapes.and.distances, by='shape_id') %>%
1510932353715:group_by(route_id, service_id, direction_id, shape_id) %>%
1510932353715:summarise(shape_count=sum(!is.na(shape_id))) %>%
1510932353715:summarise(shape_count=sum(!is.na(shape_id)))
1510932355883:View(xx)
1510932443923:xx <- trips %>%
1510932443925:inner_join(routes, by='route_id') %>%
1510932443926:inner_join(shapes.and.distances, by='shape_id') %>%
1510932443926:group_by(route_id, service_id, direction_id, shape_id) %>%
1510932443926:filter(route_id=='0-13-b12-1' & direction_id==1 & service_id==1)
1510932525241:xx <- trips %>%
1510932525243:inner_join(routes, by='route_id') %>%
1510932525244:inner_join(shapes.and.distances, by='shape_id') %>%
1510932525245:group_by(route_id, service_id, direction_id) %>%
1510932525246:summarise(distance_covered=mean(total_distance))
1510932549695:xx <- trips %>%
1510932549696:inner_join(routes, by='route_id') %>%
1510932549697:inner_join(shapes.and.distances, by='shape_id') %>%
1510932549697:group_by(route_short_name, service_id, direction_id) %>%
1510932549697:summarise(distance_covered=mean(total_distance))
1510933638861:route.40d <- routes %>%
1510933638862:filter(route_short_name == '40D')
1510933641327:View(route.40d)
1510933671554:route.40d <- routes %>%
1510933671554:filter(route_short_name == '40D') %>%
1510933671555:inner_join(trips, by = 'route_id')
1510933673507:View(route.40d)
1510934265138:route.40d <- routes %>%
1510934265139:filter(route_short_name == '40D') %>%
1510934265140:inner_join(trips, by = 'route_id') %>%
1510934265140:inner_join(stop.times, by = 'trip_id') %>%
1510934265140:inner_join(stops, by = 'stop_id')
1510934278332:View(route.40d)
1510934328996:View(calendar)
1510934500102:calendar <- calendar %>%
1510934500102:select(-c(start_date, end_date)) %>%
1510934500103:mutate(service_id=factor(service_id))
1510934613863:calendar <- melt(calendar, id.vars = service_id)
1510934619618:calendar <- melt(calendar, id.vars = 'service_id')
1510934714076:rownames(calendar) <- c('service_id', 'day', 'availability')
1510934721293:colnames(calendar) <- c('service_id', 'day', 'availability')
1510934753799:calendar <- filter(calendar, availability == 1)
1510934804118:calendar <- calendar %>%
1510934804119:filter(availability == 1) %>%
1510934804119:select(-availability)
1510934840846:route.40d <- routes %>%
1510934840848:filter(route_short_name == '40D') %>%
1510934840849:inner_join(trips, by = 'route_id') %>%
1510934840851:inner_join(stop.times, by = 'trip_id') %>%
1510934840852:inner_join(stops, by = 'stop_id') %>%
1510934840853:inner_join(calendar, by = 'service_id')
1510934843270:View(route.40d)
1510935068903:route.40d <- routes %>%
1510935068904:filter(route_short_name == '40D') %>%
1510935068905:inner_join(trips, by = 'route_id') %>%
1510935068905:inner_join(stop.times, by = 'trip_id') %>%
1510935068906:inner_join(stops, by = 'stop_id')
1510935087375:route.40d.days <- route.40d %>%
1510935087376:inner_join(calendar, by = 'service_id')
1510935180531:route.40d <- routes %>%
1510935180533:filter(route_short_name == '40D') %>%
1510935180533:inner_join(trips, by = 'route_id') %>%
1510935180534:inner_join(stop.times, by = 'trip_id') %>%
1510935180535:inner_join(stops, by = 'stop_id') %>%
1510935180535:inner_join(shapes, by = 'shape_id')
1510935208697:route.40d <- routes %>%
1510935208699:filter(route_short_name == '40D') %>%
1510935208700:inner_join(trips, by = 'route_id') %>%
1510935208701:inner_join(stop.times, by = 'trip_id') %>%
1510935208702:inner_join(stops, by = 'stop_id') %>%
1510935208703:inner_join(shapes.and.distances, by = 'shape_id')
1510935252797:route.40d.days <- route.40d %>%
1510935252798:inner_join(calendar, by = 'service_id')
1510935252873:route.40d.days <- route.40d %>%
1510935252874:inner_join(calendar, by = 'service_id')
1510935411460:View(route.40d)
1510935470616:factor(route.40d$total_distance)
1510935521101:mean(route.40d$total_distance)
1510935533960:mean(route.40d$shape_dist_traveled)
1510936026943:route.40d.trips <- route40d %>%
1510936026944:group_by(direction_id, trip_id) %>%
1510936026945:summarise(start_time=min(arrival_time))
1510936034217:route.40d.trips <- route.40d %>%
1510936034219:group_by(direction_id, trip_id) %>%
1510936034219:summarise(start_time=min(arrival_time))
1510936040623:View(route.40d.trips)
1510936113756:route.40d.trips <- route.40d %>%
1510936113757:group_by(direction_id, trip_id) %>%
1510936113758:summarise(start_time=min(arrival_time), end_time=max(arrival_time))
1510936181699:route.40d.trips <- route.40d %>%
1510936181699:group_by(direction_id, trip_id) %>%
1510936181701:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1510936181702:travel_time = end_time-start_time)
1510936204852:route.40d.trips <- route.40d %>%
1510936204853:group_by(direction_id, trip_id) %>%
1510936204854:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1510936204854:travel_time_in_mins = (end_time-start_time) / 60)
1510936328546:route.40d.trips <- route.40d %>%
1510936328547:group_by(direction_id, trip_id) %>%
1510936328547:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1510936328548:travel_time_in_mins = (end_time-start_time) / 60) %>%
1510936328548:filter(!is.na(travel_time_in_mins))
1510936408096:route.40d.trips
1510936429193:mean.times.to.from <- route.40d.trips %>%
1510936429193:summarise(mean_travel_time_in_mins=mean(travel_time_in_mins))
1510936431608:View(mean.times.to.from)
1510936461541:mean.times.to.from <- route.40d.trips %>%
1510936461541:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins), 2))
1510936489480:mean.times.to.from <- route.40d.trips %>%
1510936489482:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1510936540750:route.40d.trips <- route.40d %>%
1510936540751:group_by(direction_id, stop_headsign, trip_id) %>%
1510936540752:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1510936540752:travel_time_in_mins = (end_time-start_time) / 60) %>%
1510936540753:filter(!is.na(travel_time_in_mins))
1510936540780:mean.times.to.from <- route.40d.trips %>%
1510936540781:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1510936554388:route.40d.trips <- route.40d %>%
1510936554389:group_by(stop_headsign, trip_id) %>%
1510936554390:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1510936554391:travel_time_in_mins = (end_time-start_time) / 60) %>%
1510936554391:filter(!is.na(travel_time_in_mins))
1510936554416:mean.times.to.from <- route.40d.trips %>%
1510936554417:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1510936650619:mean.distances.to.fro <- route.40d %>%
1510936650620:group_by(stop_headsign) %>%
1510936650621:summarise(mean_distance = round(mean(total_distance), 2))
1510936654686:View(mean.distances.to.fro)
1510947785067:setwd("~/MSc in Data Analytics/Data Visualisation/Week 8")
1510947918610:studentresult <- read_csv('studentresult.csv')
1510947918683:colnames(studentresult) <- tolower(colnames(studentresult))
1510947918685:studentresult$subject <- as.factor(studentresult$subject)
1510947918686:studentresult$grade <- as.factor(studentresult$grade)
1510947918687:studentresult$year <- as.factor(studentresult$year)
1510947918689:# Getting average of available oral marks by subject.
1510947918689:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) AS oral_average",
1510947918691:"FROM studentresult",
1510947918691:"WHERE mark_oral IS NOT 'NA' GROUP BY subject")
1510947918692:subjectwise.mean <- sqldf(query.1)
1510947922701:require(dplyr)
1510947922703:require('ggplot2')
1510947922703:require('readr')
1510947922704:require('sqldf')
1510947924000:GetAge <- function(d, year) {
1510947924001:now <- as.Date(Sys.Date())
1510947924002:then <- as.Date(d, format = "%d-%m-%Y")
1510947924002:result <- now - then
1510947924004:return(round(as.numeric(result / 365)))
1510947924004:}
1510947924005:# File downloaded manually
1510947924005:studentresult <- read_csv('studentresult.csv')
1510947924037:colnames(studentresult) <- tolower(colnames(studentresult))
1510947924038:studentresult$subject <- as.factor(studentresult$subject)
1510947924039:studentresult$grade <- as.factor(studentresult$grade)
1510947924041:studentresult$year <- as.factor(studentresult$year)
1510947924042:# Getting average of available oral marks by subject.
1510947924042:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) AS oral_average",
1510947924043:"FROM studentresult",
1510947924043:"WHERE mark_oral IS NOT 'NA' GROUP BY subject")
1510947924043:subjectwise.mean <- sqldf(query.1)
1510947940442:# Imputing missing oral marks by average of available oral marks by subject.
1510947940443:studentresult <- studentresult %>%
1510947940444:inner_join(subjectwise.mean, by="subject") %>%
1510947940445:mutate(mark_oral=ifelse(is.na(mark_oral), oral_average, mark_oral)) %>%
1510947940447:select(-oral_average)
1510947947820:# Q1. What are the total marks (oral plus written divided by two) for each
1510947947824:# student for each year?
1510947947824:query.2 <- paste("SELECT name, year, SUM(mark_written) as written_total,",
1510947947826:"SUM(mark_oral) as oral_total",
1510947947827:"FROM studentresult",
1510947947828:"GROUP BY name, year")
1510947947830:student.annual.performance <- sqldf(query.2) %>%
1510947947831:mutate(average_marks = (written_total + oral_total) / 2) %>%
1510947947832:select(-c(written_total, oral_total))
1510947948019:ggplot(student.annual.performance,
1510947948020:aes(factor(year), average_marks, fill = name)) +
1510947948021:geom_bar(stat="identity", position = "dodge") +
1510947948021:scale_fill_brewer(palette = "Set1") +
1510947948022:xlab("Year") + ylab("Average marks")
1510947952356:studentresult <- mutate(studentresult, age=GetAge(dob))
1510947965672:View(studentresult)
1510948007973:now <- as.Date(Sys.Date())
1510948010097:now - year
1510948014045:year(now)
1510948015910:now
1510948038562:require('lubridate')
1510948043795:year(now)
1510948100316:GetAge <- function(d, mark.year) {
1510948100317:now <- as.Date(Sys.Date())
1510948100318:then <- as.Date(d, format = "%d-%m-%Y")
1510948100318:result <- now - then
1510948100318:return(round(as.numeric(result / 365)) - (year(now) - mark.year))
1510948100319:}
1510948121578:studentresult <- read_csv('studentresult.csv')
1510948121607:colnames(studentresult) <- tolower(colnames(studentresult))
1510948121608:studentresult$subject <- as.factor(studentresult$subject)
1510948121609:studentresult$grade <- as.factor(studentresult$grade)
1510948121611:studentresult$year <- as.factor(studentresult$year)
1510948121612:# Getting average of available oral marks by subject.
1510948121612:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) AS oral_average",
1510948121613:"FROM studentresult",
1510948121614:"WHERE mark_oral IS NOT 'NA' GROUP BY subject")
1510948121614:subjectwise.mean <- sqldf(query.1)
1510948121641:# Imputing missing oral marks by average of available oral marks by subject.
1510948121642:studentresult <- studentresult %>%
1510948121643:inner_join(subjectwise.mean, by="subject") %>%
1510948121644:mutate(mark_oral=ifelse(is.na(mark_oral), oral_average, mark_oral)) %>%
1510948121645:select(-oral_average)
1510948135316:# Q2. What is the relationship between age and mark?
1510948135317:studentresult <- mutate(studentresult, age=GetAge(dob))
1510948151187:studentresult <- mutate(studentresult, age=GetAge(dob, year))
1510948229606:GetAge <- function(d, mark.year) {
1510948229607:now <- as.Date(Sys.Date())
1510948229608:then <- as.Date(d, format = "%d-%m-%Y")
1510948229610:result <- now - then
1510948229611:result <- round(as.numeric(result / 365))
1510948229612:year.difference <- year(now) - mark.year
1510948229613:return(result - year.difference)
1510948229613:}
1510948254020:studentresult$age = NULL
1510948262648:studentresult <- mutate(studentresult, age=GetAge(dob, year))
1510948286680:studentresult$age = NULL
1510948307516:studentresult$age=GetAge(studentresult$dob, studentresult$year)
1510948345628:GetAge <- function(d, mark.year) {
1510948345629:now <- as.Date(Sys.Date())
1510948345630:then <- as.Date(d, format = "%d-%m-%Y")
1510948345630:result <- now - then
1510948345630:result <- round(as.numeric(result / 365))
1510948345631:year.difference <- as.integer(year(now)) - as.integer(mark.year)
1510948345631:return(result - year)
1510948345633:}
1510948351575:studentresult$age = NULL
1510948355942:studentresult <- mutate(studentresult, age=GetAge(dob, year))
1510948372677:GetAge(studentresult$dob, studentresult$year)
1510948387040:GetAge <- function(d, mark.year) {
1510948387040:now <- as.Date(Sys.Date())
1510948387041:then <- as.Date(d, format = "%d-%m-%Y")
1510948387041:result <- now - then
1510948387042:result <- round(as.numeric(result / 365))
1510948387042:year.difference <- as.integer(year(now)) - as.integer(mark.year)
1510948387043:return(result - year.difference)
1510948387043:}
1510948390798:GetAge(studentresult$dob, studentresult$year)
1510948421583:d = "10-06-1988"
1510948428294:mark.year=2013
1510948438528:now <- as.Date(Sys.Date())
1510948438529:then <- as.Date(d, format = "%d-%m-%Y")
1510948438530:result <- now - then
1510948438531:result <- round(as.numeric(result / 365))
1510948444596:result
1510948451098:year.difference <- as.integer(year(now)) - as.integer(mark.year)
1510948456728:year.difference
1510948473239:result + year.difference
1510948477465:GetAge <- function(d, mark.year) {
1510948477465:now <- as.Date(Sys.Date())
1510948477466:then <- as.Date(d, format = "%d-%m-%Y")
1510948477467:result <- now - then
1510948477467:result <- round(as.numeric(result / 365))
1510948477468:year.difference <- as.integer(year(now)) - as.integer(mark.year)
1510948477468:return(result + year.difference)
1510948477468:}
1510948485607:GetAge(studentresult$dob, studentresult$year)
1510948500237:studentresult$dob
1510948507205:studentresult$year
1510948512625:studentresult <- mutate(studentresult, age=GetAge(dob, year))
1510948561943:GetAge("10-06-1988", 2015)
1510948588807:GetAge <- function(d, mark.year) {
1510948588810:now <- as.Date(Sys.Date())
1510948588811:then <- as.Date(d, format = "%d-%m-%Y")
1510948588812:result <- now - then
1510948588813:result <- round(as.numeric(result / 365))
1510948588814:year.difference <- as.integer(year(now)) - as.integer(mark.year)
1510948588814:return(result - year.difference)
1510948588816:}
1510948591185:GetAge("10-06-1988", 2015)
1510948615813:GetAge(studentresult$dob, studentresult$year)
1510948630432:debug(GetAge)
1510948634583:GetAge(studentresult$dob, studentresult$year)
1510948649671:result
1510948657764:year.difference
1510948665540:mark.year
1510948674323:as.integer(year(now))
1510948681889:as.integer(year(now)) - as.integer(mark.year)
1510948694051:as.integer(mark.year)
1510948736730:as.integer(as.character(mark.year))
1510948758314:GetAge <- function(d, mark.year) {
1510948758315:now <- as.Date(Sys.Date())
1510948758316:then <- as.Date(d, format = "%d-%m-%Y")
1510948758316:result <- now - then
1510948758317:result <- round(as.numeric(result / 365))
1510948758317:year.difference <- as.integer(year(now)) -
1510948758317:as.integer(as.character(mark.year))
1510948758318:return(result - year.difference)
1510948758318:}
1510948762689:GetAge(studentresult$dob, studentresult$year)
1510948767414:GetAge(studentresult$dob, studentresult$year)
1510948779356:GetAge <- function(d, mark.year) {
1510948779357:now <- as.Date(Sys.Date())
1510948779358:then <- as.Date(d, format = "%d-%m-%Y")
1510948779359:result <- now - then
1510948779361:result <- round(as.numeric(result / 365))
1510948779362:year.difference <- as.integer(year(now)) -
1510948779363:as.integer(as.character(mark.year))
1510948779365:return(result - year.difference)
1510948779365:}
1510948784525:debug(GetAge)
1510948787851:GetAge(studentresult$dob, studentresult$year)
1510948801103:undebug(GetAge)
1510948809499:studentresult <- mutate(studentresult, age=GetAge(dob, year))
1510948881329:GetAge <- function(d, mark.year) {
1510948881331:now <- as.Date(Sys.Date())
1510948881332:then <- as.Date(d, format = "%d-%m-%Y")
1510948881334:result <- now - then
1510948881335:result <- round(as.numeric(result / 365))
1510948881336:year.difference <- as.integer(year(now)) -
1510948881337:as.integer(as.character(mark.year))
1510948881338:return(result - year.difference)
1510948881338:}
1510948881339:# File downloaded manually
1510948881340:studentresult <- read_csv('studentresult.csv')
1510948881361:colnames(studentresult) <- tolower(colnames(studentresult))
1510948881362:studentresult$subject <- as.factor(studentresult$subject)
1510948881363:studentresult$grade <- as.factor(studentresult$grade)
1510948881364:studentresult$year <- as.factor(studentresult$year)
1510948881366:# Getting average of available oral marks by subject.
1510948881366:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) AS oral_average",
1510948881367:"FROM studentresult",
1510948881367:"WHERE mark_oral IS NOT 'NA' GROUP BY subject")
1510948881370:subjectwise.mean <- sqldf(query.1)
1510948881391:# Imputing missing oral marks by average of available oral marks by subject.
1510948881392:studentresult <- studentresult %>%
1510948881394:inner_join(subjectwise.mean, by="subject") %>%
1510948881394:mutate(mark_oral=ifelse(is.na(mark_oral), oral_average, mark_oral)) %>%
1510948881395:select(-oral_average)
1510949036938:GetAge <- function(d, mark.year) {
1510949036939:now <- as.Date(Sys.Date())
1510949036940:then <- as.Date(d, format = "%d-%m-%Y")
1510949036940:result <- now - then
1510949036942:result <- round(as.numeric(result / 365))
1510949036942:year.difference <- as.integer(year(now)) -
1510949036943:as.integer(as.character(mark.year))
1510949036944:return(result - year.difference)
1510949036945:}
1510949036946:# File downloaded manually
1510949036947:studentresult <- read_csv('studentresult.csv')
1510949036971:colnames(studentresult) <- tolower(colnames(studentresult))
1510949036972:studentresult$subject <- as.factor(studentresult$subject)
1510949036973:studentresult$grade <- as.factor(studentresult$grade)
1510949036974:studentresult$year <- as.factor(studentresult$year)
1510949036975:# Getting average of available oral marks by subject.
1510949036976:query.1 <- paste("SELECT subject, ROUND(AVG(mark_oral)) AS oral_average",
1510949036977:"FROM studentresult",
1510949036977:"WHERE mark_oral IS NOT 'NA' GROUP BY subject")
1510949036978:subjectwise.mean <- sqldf(query.1)
1510949037020:# Imputing missing oral marks by average of available oral marks by subject.
1510949037020:studentresult <- studentresult %>%
1510949037022:inner_join(subjectwise.mean, by="subject") %>%
1510949037022:mutate(mark_oral=ifelse(is.na(mark_oral), oral_average, mark_oral)) %>%
1510949037022:select(-oral_average)
1510949037035:# Q1. What are the total marks (oral plus written divided by two) for each
1510949037035:# student for each year?
1510949037037:query.2 <- paste("SELECT name, dob, year, SUM(mark_written) as written_total,",
1510949037037:"SUM(mark_oral) as oral_total",
1510949037038:"FROM studentresult",
1510949037039:"GROUP BY name, year")
1510949037039:student.annual.performance <- sqldf(query.2) %>%
1510949037039:mutate(average_marks = (written_total + oral_total) / 2) %>%
1510949037041:select(-c(written_total, oral_total))
1510949037070:ggplot(student.annual.performance,
1510949037071:aes(factor(year), average_marks, fill = name)) +
1510949037072:geom_bar(stat="identity", position = "dodge") +
1510949037072:scale_fill_brewer(palette = "Set1") +
1510949037073:xlab("Year") + ylab("Average marks")
1510949054119:student.annual.performance <- student.annual.performance %>%
1510949054120:mutate(age=GetAge(dob, year))
1510949075903:qplot(student.annual.performance$age, student.annual.performance$average_marks)
1510949096014:qplot(student.annual.performance$age, student.annual.performance$average_marks, geom = 'point')
1510949105457:qplot(student.annual.performance$age)
1510949111037:View(student.annual.performance)
1510949133138:qplot(student.annual.performance$age)
1510949148933:qplot(student.annual.performance$age)
1510949154489:qplot(student.annual.performance$average_marks)
1510949249144:qplot(x=age, y=average_marks, data=student.annual.performance)
1510949266700:qplot(x=age, y=average_marks, data=student.annual.performance, geom=c('point', 'smooth'))
1510949397120:ggplot(student.annual.performance, aes(age, average_marks))
1510949419694:ggplot(student.annual.performance, aes(age, average_marks)) +
1510949419695:geom_point()
1510949437641:ggplot(student.annual.performance, aes(age, average_marks)) +
1510949437642:geom_point() + geom_smooth()
1510949520423:qplot(x=factor(year), y=average_marks, data=student.annual.performance,
1510949520424:aes(fill=name), geom='blank')
1510949558673:qplot(x=factor(year), y=average_marks, data=student.annual.performance,
1510949558674:aes(fill=name), geom='blank') + geom_bar(stat="identity", position = "dodge")
1510949593553:qplot(x=factor(year), y=average_marks, data=student.annual.performance,
1510949593554:aes(fill=name), geom='blank') + geom_bar(stat="identity", position = "dodge") +
1510949593555:scale_fill_brewer(palette = "Set1") +
1510949593555:xlab("Year") + ylab("Average marks")
1510949625184:?qplot
1510949658592:ggplot(student.annual.performance, aes(factor(year),
1510949658593:average_marks,
1510949658594:fill = name)) +
1510949658594:geom_bar(stat="identity", position = "dodge") +
1510949658594:scale_fill_brewer(palette = "Set1") +
1510949658595:xlab("Year") + ylab("Average marks")
1510949662593:ggplot(student.annual.performance, aes(age, average_marks)) +
1510949662594:geom_point() + geom_smooth()
1510949683363:ggplot(student.annual.performance, aes(age, average_marks)) +
1510949683363:geom_point() + geom_smooth() + xlab('Age') + ylab('Average marks')
1510958810380:query.3 <- paste("SELECT name, AVG(mark_written), AVG(mark_oral)",
1510958810384:"FROM studentresult GROUP BY name")
1510958824204:student.summary <- sqldf(query.3)
1510958826597:View(student.summary)
1510958892320:query.3 <- paste("SELECT name,",
1510958892321:"ROUND(AVG(mark_written), 2) as mark_written_avg,",
1510958892322:"ROUND(AVG(mark_oral), 2) as mark_oral_avg",
1510958892322:"FROM studentresult GROUP BY name")
1510958892323:student.summary <- sqldf(query.3)
1510958986461:student.summary <- melt(student.summary, id.vars='name')
1510960353603:ggplot(student.summary, aes(factor(year),
1510960353606:average_marks,
1510960353606:fill = name)) +
1510960353607:geom_bar(stat="identity", position = "dodge") +
1510960353607:scale_fill_brewer(palette = "Set1")
1510960396254:student.summary <- sqldf(query.3)
1510960412751:ggplot(student.summary, aes(factor(year),
1510960412752:average_marks,
1510960412753:fill = name)) +
1510960412753:geom_bar(stat="identity", position = "dodge") +
1510960412753:scale_fill_brewer(palette = "Set1")
1510960460593:student.summary <- melt(student.summary, id.vars='name')
1510960473348:ggplot(student.summary, aes(factor(variable),
1510960473348:value,
1510960473349:fill = name)) +
1510960473350:geom_bar(stat="identity", position = "dodge") +
1510960473350:scale_fill_brewer(palette = "Set1")
1510960489099:ggplot(student.summary, aes(factor(name),
1510960489100:value,
1510960489102:fill = variable)) +
1510960489103:geom_bar(stat="identity", position = "dodge") +
1510960489104:scale_fill_brewer(palette = "Set1")
1510960649682:ggplot(student.annual.performance, aes(factor(year),
1510960649687:average_marks,
1510960649689:fill = name)) +
1510960649690:geom_bar(stat="identity", position = "dodge") +
1510960649691:scale_fill_brewer(palette = "Set1") +
1510960649691:xlab("Year") + ylab("Average marks")
1510960670081:ggplot(student.annual.performance, aes(factor(year),
1510960670082:average_marks,
1510960670083:fill = name)) +
1510960670084:geom_bar(stat="identity", position = "dodge") +
1510960670085:scale_fill_brewer(palette = "Set1") +
1510960670086:xlab("Year") + ylab("Average marks") + labs(fill='Name')
1510961496821:studentresult <- read.csv('studentresult.csv')
1510961506392:str(studentresult)
1510961516986:colnames(studentresult) <- tolower(colnames(studentresult))
1510961655889:query.1 <- paste("SELECT ROUND(AVG(mark_oral)) FROM studentresult",
1510961655891:"WHERE name = 'John McAuley' AND mark_oral is not 'NA'")
1510961703632:avgmark <- sqldf(query.1)
1510961704792:studentresult$mark_oral <- ifelse(is.na(studentresult$mark_oral),
1510961704792:as.numeric(avgmark), studentresult$mark_oral)
1510961742636:studentresult$age <- getAge(studentresult$dob, studentresult$year)
1510961747513:studentresult$age <- GetAge(studentresult$dob, studentresult$year)
1510961754297:GetAge <- function(d, mark.year) {
1510961754300:now <- as.Date(Sys.Date())
1510961754300:then <- as.Date(d, format = "%d-%m-%Y")
1510961754300:result <- now - then
1510961754301:result <- round(as.numeric(result / 365))
1510961754301:year.difference <- as.integer(year(now)) -
1510961754301:as.integer(as.character(mark.year))
1510961754302:return(result - year.difference)
1510961754302:}
1510961756700:studentresult$age <- GetAge(studentresult$dob, studentresult$year)
1510961843975:studentresult$age <- GetAge(studentresult$dob, studentresult$year)
1510961851487:View(studentresult)
1510961969761:studentresult$age <- GetAge(studentresult$dob, studentresult$year)
1510961971393:View(studentresult)
1510962242251:query.2 <- paste("SELECT name, dob, year, SUM(mark_written) as written_total,",
1510962242253:"SUM(mark_oral) as oral_total",
1510962242254:"FROM studentresult",
1510962242255:"GROUP BY name, year")
1510962242256:student.annual.performance <- sqldf(query.2) %>%
1510962242256:mutate(average_marks = (written_total + oral_total) / 2) %>%
1510962242257:select(-c(written_total, oral_total))
1510962242374:ggplot(student.annual.performance, aes(factor(year),
1510962242375:average_marks,
1510962242376:fill = name)) +
1510962242376:geom_bar(stat="identity", position = "dodge") +
1510962242377:scale_fill_brewer(palette = "Set1") +
1510962242377:xlab("Year") + ylab("Average marks") + labs(fill='Name')
1510962281966:# Q2. What is the relationship between age and mark?
1510962281968:student.annual.performance <- student.annual.performance %>%
1510962281968:mutate(age=GetAge(dob, year))
1510962281973:ggplot(student.annual.performance, aes(age, average_marks)) +
1510962281973:geom_point() + geom_smooth() + xlab('Age') + ylab('Average marks')
1510962304748:# Q3. Did any students do better on their Written compared with their Oral
1510962304749:# (or vice versa)?
1510962304750:query.3 <- paste("SELECT name,",
1510962304750:"ROUND(AVG(mark_written), 2) as mark_written_avg,",
1510962304751:"ROUND(AVG(mark_oral), 2) as mark_oral_avg",
1510962304751:"FROM studentresult GROUP BY name")
1510962304752:student.summary <- sqldf(query.3)
1510962304770:student.summary <- melt(student.summary, id.vars='name')
1510962304772:ggplot(student.summary, aes(factor(name),
1510962304772:value,
1510962304773:fill = variable)) +
1510962304773:geom_bar(stat="identity", position = "dodge") +
1510962304773:scale_fill_brewer(palette = "Set1")
1510962333458:ggplot(student.annual.performance, aes(factor(year),
1510962333460:average_marks,
1510962333461:fill = name)) +
1510962333462:geom_bar(stat="identity", position = "dodge") +
1510962333463:scale_fill_brewer(palette = "Set1") +
1510962333464:xlab("Year") + ylab("Average marks") + labs(fill='Name')
1510962408873:student.annual.performance <- student.annual.performance %>%
1510962408874:mutate(age=GetAge(dob, year))
1510962408882:ggplot(student.annual.performance, aes(age, average_marks)) +
1510962408883:geom_point() + geom_smooth() + xlab('Age') + ylab('Average marks')
1510962441922:ggplot(student.annual.performance, aes(age, average_marks)) +
1510962441922:geom_point() + geom_smooth() + xlab('Age') + ylab('Marks')
1510962485726:ggplot(student.summary, aes(factor(name),
1510962485728:value,
1510962485728:fill = variable)) +
1510962485729:geom_bar(stat="identity", position = "dodge") +
1510962485730:scale_fill_brewer(palette = "Set1")
1510962565382:View(student.summary)
1510962587270:query.3 <- paste("SELECT name,",
1510962587270:"ROUND(AVG(mark_written), 2) as Written,",
1510962587271:"ROUND(AVG(mark_oral), 2) as Oral",
1510962587272:"FROM studentresult GROUP BY name")
1510962587272:student.summary <- sqldf(query.3)
1510962587290:student.summary <- melt(student.summary, id.vars='name')
1510962587291:ggplot(student.summary, aes(factor(name),
1510962587292:value,
1510962587292:fill = variable)) +
1510962587293:geom_bar(stat="identity", position = "dodge") +
1510962587293:scale_fill_brewer(palette = "Set1") +
1510962587294:xlab('Name') + ylab('Average marks') + labs(fill = 'Exam type')
1511000413048:setwd("~/R Projects")
1511000477005:setwd("~/R Projects/Datahack")
1511001956883:require(readr)
1511001957084:weather <- read_csv('Weather.csv')
1511001959717:View(weather)
1511001970594:str(weather)
1511001991584:require(lubridate)
1511001997521:View(weather)
1511002024974:colnames(weather) <- tolower(colnames(weather))
1511002176220:View(weather)
1511002226686:weather$date <- as.Date(weather$date)
1511002234989:View(weather)
1511002241222:r <- read_csv('Weather.csv')
1511002241359:colnames(weather) <- tolower(colnames(weather))
1511002588508:weather <- read_csv('Weather.csv')
1511002590976:colnames(weather) <- tolower(colnames(weather))
1511002629572:?as.Date
1511002687158:weather$date <- as.Date(weather$date, "%d-%m-%Y")
1511002699853:weather <- read_csv('Weather.csv')
1511002699861:colnames(weather) <- tolower(colnames(weather))
1511002706539:weather
1511002709875:weather$date
1511002729462:as.Date("17/11/2016", "%d-%m-%Y")
1511002742511:as.Date("17/11/2016", format="%d-%m-%Y")
1511002746515:as.Date(x="17/11/2016", format="%d-%m-%Y")
1511002769584:as.Date(x="17/11/2016", format="%d/%m/%Y")
1511002778917:weather <- read_csv('Weather.csv')
1511002778926:colnames(weather) <- tolower(colnames(weather))
1511002778926:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511002997244:bike <- read_csv('Bikes.csv')
1511003000085:View(bike)
1511003024677:?read_csv
1511003383247:bikes <- read_csv('Bikes.csv', col_names=c('date', 'bikes'))
1511003386317:View(bikes)
1511003408804:str(bikes)
1511003430997:View(bikes)
1511003443142:bikes <- read_csv('Bikes.csv', col_names=c('date', 'bikes'))
1511003443146:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511003453920:weather <- read_csv('Weather.csv')
1511003453926:colnames(weather) <- tolower(colnames(weather))
1511003453927:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511003453930:bikes <- read_csv('Bikes.csv', col_names=c('date', 'bikes'))
1511003453936:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511003495508:holidays <- read_csv('Holidays.csv')
1511003499619:View(holidays)
1511003627566:View(holidays)
1511003670858:colnames(holidays) <- tolower(colnames(holidays))
1511003726381:?as.Date
1511003764637:holidays$date <- as.Date(holidays$date, origin = '1970-01-01')
1511003766420:View(holidays)
1511003799179:holidays <- read_csv('Holidays.csv')
1511003799191:colnames(holidays) <- tolower(colnames(holidays))
1511003860860:day('2017-11-19')
1511003869341:weekday('2017-11-18')
1511004029492:as.numeric(format('2017-11-18', format = "%u"))
1511004041681:as.numeric(format('2017-11-18', format = "%u"))
1511004080147:x <- 1478822400/3600
1511004081181:x
1511004088328:x <- x / 24
1511004088899:x
1511004113148:as.Date(17116, origin='1970-01-01')
1511004142713:require(dplyr)
1511004166401:3600 * 24
1511004202496:holidays <- holidays %>%
1511004202497:mutate(date = date / 86400) %>%
1511004202498:mutate(date = as.Date(date, origin = '1970-01-01'))
1511004310759:df <- weather %>%
1511004310760:inner_join(bikes, by = 'date') %>%
1511004310761:left_join(holidays, by = 'date')
1511004313266:View(df)
1511004369492:?as.Date
1511004441939:holidays <- read_csv('Holidays.csv')
1511004441942:colnames(holidays) <- tolower(colnames(holidays))
1511004441943:holidays <- holidays %>%
1511004441944:mutate(date = date / 86400) %>%
1511004441944:mutate(date = as.Date(date, origin = '1970-01-01'), tz = 'HST')
1511004451643:df <- weather %>%
1511004451646:inner_join(bikes, by = 'date')
1511004463929:View(holidays)
1511004559282:df <- weather %>%
1511004559282:inner_join(bikes, by = 'date') %>%
1511004559283:left_join(holidays, by = 'date')
1511004561846:View(df)
1511004580965:holidays <- read_csv('Holidays.csv')
1511004580972:colnames(holidays) <- tolower(colnames(holidays))
1511004580973:holidays <- holidays %>%
1511004580974:mutate(date = date / 86400) %>%
1511004580975:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511004582560:View(holidays)
1511004592742:df <- weather %>%
1511004592742:inner_join(bikes, by = 'date') %>%
1511004592743:left_join(holidays, by = 'date')
1511004682305:df <- weather %>%
1511004682307:inner_join(bikes, by = 'date') %>%
1511004682308:left_join(holidays, by = 'date') %>%
1511004682309:mutate(specific = holiday) %>%
1511004682310:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511004684706:View(df)
1511004830187:rm(c(bikes, holidays, weather))
1511004837208:rm(c('bikes', 'holidays', 'weather'))
1511004848286:rm(list=c('bikes', 'holidays', 'weather'))
1511004902466:weather <- read_csv('Weather.csv')
1511004902476:colnames(weather) <- tolower(colnames(weather))
1511004902478:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511004902479:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511004902484:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511004902485:holidays <- read_csv('Holidays.csv')
1511004902489:colnames(holidays) <- tolower(colnames(holidays))
1511004902490:holidays <- holidays %>%
1511004902491:mutate(date = date / 86400) %>%
1511004902491:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511005020638:source(helper.R)
1511005020641:require(dplyr)
1511005020642:require(ggplot2)
1511005020804:require(lubridate)
1511005020805:require(readr)
1511005020806:# 1. Importing the data
1511005020806:weather <- read_csv('Weather.csv')
1511005020813:colnames(weather) <- tolower(colnames(weather))
1511005020814:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511005020816:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511005020825:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511005020826:holidays <- read_csv('Holidays.csv')
1511005020832:colnames(holidays) <- tolower(colnames(holidays))
1511005020832:holidays <- holidays %>%
1511005020833:mutate(date = date / 86400) %>%
1511005020834:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511005020844:# 2. Joining the data
1511005020845:df <- weather %>%
1511005020846:inner_join(bikes, by = 'date') %>%
1511005020846:left_join(holidays, by = 'date') %>%
1511005020848:mutate(specific = holiday) %>%
1511005020848:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511005020859:# rm(list=c('bikes', 'holidays', 'weather'))
1511005042763:source(helper.R)
1511005046771:source('helper.R')
1511005088232:write_csv(df, 'datahack.csv')
1511005338257:InspectScaleVariable(df$prcp)
1511005477110:InspectScaleVariable(df$prcp, label = 'Precipitation', binwidth = 0.5, title = 'Precipitation info')
1511005577949:sum(df$prcp)
1511005590486:sum(is.na(df$prcp))
1511005631414:qplot(x=date, y=prcp, data=df)
1511005785136:sum(is.na(df$snow))
1511005800457:qplot(x=date, y=snow, data=df)
1511005821708:sum(is.na(df$tmax))
1511005873163:qplot(x=date, y=tmax, data=df)
1511005883103:qplot(x=date, y=tmin, data=df)
1511005909672:qplot(x=date, y=tavg, data=df)
1511005922395:qplot(x=date, y=awnd, data=df)
1511005985979:qplot(x=date, y=bikes, data=df)
1511006075899:df <- df %>%
1511006075899:filter(bikes < 50000 | bikes > 0)
1511006092499:qplot(x=date, y=bikes, data=df)
1511006102657:df <- df %>%
1511006102659:filter(bikes < 50000)
1511006131435:df <- df %>%
1511006131436:filter(bikes > 0 & bikes < 50000)
1511006150657:qplot(x=date, y=bikes, data=df)
1511006329358:qplot(x=date, y=awnd, data=df)
1511006370983:df <- df %>%
1511006370984:filter(bikes > 0 & bikes < 50000) %>%
1511006370985:filter(awnd > 0)
1511006382220:qplot(x=date, y=awnd, data=df)
1511006524253:qplot(x=date, y=pcpt, data=df)
1511006530835:qplot(x=date, y=prcp, data=df)
1511006570080:qplot(x=date, y=awnd, data=df)
1511006590925:qplot(x=date, y=snow, data=df)
1511006712505:mean(df$bikes)
1511006765509:qplot(x=month(date), y=snow, data=df)
1511006876882:summarise(group_by(df, month(date)), avg_snow=mean(snow))
1511006899679:filter(df, is.na(snow))
1511007007683:df <- df %>%
1511007007684:filter(bikes > 0 & bikes < 50000) %>%
1511007007685:filter(awnd > 0) %>%
1511007007685:mutate(snow = ifelse(is.na(snow), 0, snow))
1511007029509:qplot(x=date, y=snow, data=df)
1511007074266:qplot(x=date, y=prcp, data=df)
1511007176960:filter(df, is.na(prcp))
1511007187100:qplot(x=date, y=prcp, data=df)
1511007265967:df <- df %>%
1511007265968:filter(bikes > 0 & bikes < 50000) %>%
1511007265969:filter(awnd > 0) %>%
1511007265970:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511007265970:mutate(prcp = ifelse(is.na(prcp), 0, snow))
1511007287032:qplot(x=date, y=tmin, data=df)
1511007551762:df <- df %>%
1511007551763:filter(bikes > 0 & bikes < 50000) %>%
1511007551764:filter(awnd > 0) %>%
1511007551764:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511007551765:mutate(prcp = ifelse(is.na(prcp), 0, snow)) %>%
1511007551765:mutate(previous_day_tmin = lag(tmin)) %>%
1511007551765:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511007551766:ifelse(tmin < 0, previous_day_tmin, tmin))) %>%
1511007551766:mutate(previous_day_tmax = lag(tmax)) %>%
1511007551767:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511007551767:ifelse(tmax < 0, previous_day_tmax, tmax))) %>%
1511007551767:mutate(previous_day_tavg = lag(tavg)) %>%
1511007551768:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511007551768:ifelse(tavg < 0, previous_day_tavg, tavg))) %>%
1511007551768:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg))
1511007560496:qplot(x=date, y=tmin, data=df)
1511007584659:qplot(x=date, y=tmin, data=df)
1511007605935:filter(df, is.na(tmin))
1511007651577:weather <- read_csv('Weather.csv')
1511007651583:colnames(weather) <- tolower(colnames(weather))
1511007651584:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511007651586:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511007651596:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511007651597:holidays <- read_csv('Holidays.csv')
1511007651601:colnames(holidays) <- tolower(colnames(holidays))
1511007651602:holidays <- holidays %>%
1511007651602:mutate(date = date / 86400) %>%
1511007651603:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511007651610:# 2. Joining the data
1511007651611:df <- weather %>%
1511007651612:inner_join(bikes, by = 'date') %>%
1511007651613:left_join(holidays, by = 'date') %>%
1511007651613:mutate(specific = holiday) %>%
1511007651614:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511007701411:qplot(x=date, y=tmax, data=df)
1511007777403:qplot(x=date, y=tavg, data=df)
1511007796317:qplot(x=date, y=tmin, data=df)
1511007818115:qplot(x=date, y=tmax, data=df)
1511007866640:weather <- read_csv('Weather.csv')
1511007866647:colnames(weather) <- tolower(colnames(weather))
1511007866647:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511007866649:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511007866654:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511007866658:holidays <- read_csv('Holidays.csv')
1511007866664:colnames(holidays) <- tolower(colnames(holidays))
1511007866665:holidays <- holidays %>%
1511007866666:mutate(date = date / 86400) %>%
1511007866666:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511007866671:# 2. Joining the data
1511007866672:df <- weather %>%
1511007866673:inner_join(bikes, by = 'date') %>%
1511007866674:left_join(holidays, by = 'date') %>%
1511007866674:mutate(specific = holiday) %>%
1511007866674:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511007866695:# rm(list=c('bikes', 'holidays', 'weather'))
1511007866696:# 3. Outlier treatment
1511007866698:df <- df %>%
1511007866699:filter(bikes > 0 & bikes < 50000) %>%
1511007866699:filter(awnd > 0) %>%
1511007866700:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511007866700:mutate(prcp = ifelse(is.na(prcp), 0, snow)) %>%
1511007866702:mutate(previous_day_tmin = lag(tmin)) %>%
1511007866702:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511007866703:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511007866704:mutate(previous_day_tmax = lag(tmax)) %>%
1511007866706:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511007866707:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511007866709:mutate(previous_day_tavg = lag(tavg)) %>%
1511007866710:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511007866711:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511007866711:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg))
1511007870202:qplot(x=date, y=tmax, data=df)
1511007875118:qplot(x=date, y=tmin, data=df)
1511007879795:qplot(x=date, y=tavg, data=df)
1511007895048:qplot(x=date, y=prcp, data=df)
1511007914254:write_csv(df, 'datahack_clean.csv')
1511007976054:weekdays('2017-11-18')
1511008012802:as.POSIXlt(df$date)$wday
1511008252756:month(df$date)
1511008293998:weather <- read_csv('Weather.csv')
1511008294010:colnames(weather) <- tolower(colnames(weather))
1511008294011:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511008294013:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511008294021:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511008294022:holidays <- read_csv('Holidays.csv')
1511008294026:colnames(holidays) <- tolower(colnames(holidays))
1511008294027:holidays <- holidays %>%
1511008294027:mutate(date = date / 86400) %>%
1511008294028:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511008294035:# 2. Joining the data
1511008294035:df <- weather %>%
1511008294037:inner_join(bikes, by = 'date') %>%
1511008294037:left_join(holidays, by = 'date') %>%
1511008294039:mutate(specific = holiday) %>%
1511008294039:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511008294051:# rm(list=c('bikes', 'holidays', 'weather'))
1511008294052:# 3. Outlier treatment
1511008294052:df <- df %>%
1511008294053:filter(bikes > 0 & bikes < 50000) %>%
1511008294053:filter(awnd > 0) %>%
1511008294053:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511008294054:mutate(prcp = ifelse(is.na(prcp), 0, snow)) %>%
1511008294054:mutate(previous_day_tmin = lag(tmin)) %>%
1511008294054:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511008294056:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511008294056:mutate(previous_day_tmax = lag(tmax)) %>%
1511008294057:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511008294058:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511008294059:mutate(previous_day_tavg = lag(tavg)) %>%
1511008294060:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511008294061:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511008294062:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg)) %>%
1511008294064:mutate(weekday = as.POSIXlt(date)$wday) %>%
1511008294067:mutate(month = month(date))
1511008310917:write_csv(df, 'datahack_clean.csv')
1511008449900:qplot(x=date, y=bikes, data=df)
1511008623906:qplot(x=month, y=bikes, data=df)
1511008632651:qplot(x=month, y=bikes, data=df, geom='boxplot')
1511008642829:qplot(x=month, y=bikes, data=df, group=month, geom='boxplot')
1511008745738:summarise(group_by(df, month), average_bikes=mean(bikes))
1511008758513:month.wise.bikes <- summarise(group_by(df, month), average_bikes=mean(bikes))
1511008789089:qplot(x=month, y=average_bikes, data=month.wise.bikes)
1511008894545:qplot(x=prcp, y=bikes, data=df)
1511008931950:cor(df)
1511008940718:?cor
1511008963425:View(df)
1511008981633:View(select(df, -specific))
1511008988082:cor(select(df, -specific))
1511009014910:cor(select(df, -c(date, specific)))
1511009069488:weather <- read_csv('Weather.csv')
1511009069498:colnames(weather) <- tolower(colnames(weather))
1511009069498:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511009069500:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511009069504:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511009069505:holidays <- read_csv('Holidays.csv')
1511009069514:colnames(holidays) <- tolower(colnames(holidays))
1511009069515:holidays <- holidays %>%
1511009069515:mutate(date = date / 86400) %>%
1511009069516:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511009069521:# 2. Joining the data
1511009069521:df <- weather %>%
1511009069522:inner_join(bikes, by = 'date') %>%
1511009069523:left_join(holidays, by = 'date') %>%
1511009069523:mutate(specific = holiday) %>%
1511009069524:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511009069532:# rm(list=c('bikes', 'holidays', 'weather'))
1511009069533:# 3. Outlier treatment
1511009069533:df <- df %>%
1511009069534:filter(bikes > 0 & bikes < 50000) %>%
1511009069536:filter(awnd > 0) %>%
1511009069537:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511009069537:mutate(prcp = ifelse(is.na(prcp), 0, prcp)) %>%
1511009069538:mutate(previous_day_tmin = lag(tmin)) %>%
1511009069539:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511009069540:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511009069542:mutate(previous_day_tmax = lag(tmax)) %>%
1511009069544:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511009069545:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511009069547:mutate(previous_day_tavg = lag(tavg)) %>%
1511009069548:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511009069548:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511009069549:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg)) %>%
1511009069549:mutate(weekday = as.POSIXlt(date)$wday) %>%
1511009069549:mutate(month = month(date))
1511009077472:cor(select(df, -c(date, specific)))
1511009252417:qplot(x=tmax, y=bikes, data=df)
1511009261479:qplot(x=tavg, y=bikes, data=df)
1511009267699:qplot(x=tmin, y=bikes, data=df)
1511009291867:qplot(x=tmax, y=bikes, data=df)
1511009329984:test.df <- filter(df, tmax < 30)
1511009344810:qplot(x=tmax, y=bikes, data=test.df)
1511009394779:lm(bikes ~ tmax, data = test.df)
1511009405677:summary(lm(bikes ~ tmax, data = test.df))
1511009444366:model.a <- lm(bikes, tmax, data = test.df)
1511009453584:model.a <- lm(bikes ~ tmax, data = test.df)
1511009534869:testing <- read_csv('testing.csv')
1511009534879:colnames(testing) <- tolower(colnames(testing))
1511009571547:predict(model.a, testing)
1511009596782:?predict
1511009611383:predict(model.a, testing)
1511009632337:result <- predict(model.a, testing)
1511009636867:typeof(result)
1511009646334:is.vector(restul)
1511009649033:is.vector(result)
1511009655633:str(result)
1511009665227:is.data.frame(result)
1511009707330:result
1511009750763:result.df <- data.frame(testing$id, result)
1511009754055:View(result.df)
1511009788554:result <- round(predict(model.a, testing))
1511009789916:result.df <- data.frame(testing$id, result)
1511009842955:colnames(result.df) <- c('ID', 'Total')
1511009867157:write_csv(result.df, "Results.csv")
1511009988876:source('helper.R')
1511010115278:GenerateResultsFile(model = model.a)
1511011252203:qplot(x=tmax, y=bikes, data=df)
1511011580380:summary(model.a)
1511011749459:model.a <- lm(bikes ~ tmax, data = df)
1511011759205:summary(model.a)
1511011901730:?lm
1511012628182:model.a <- lm(bikes ~ tmax, data = df, subset = tmax < 30)
1511012628187:model.b <- lm(bikes ~ tmax, data = df, subset = tmax > 30)
1511012630501:summary(model.a)
1511012638314:summary(model.b)
1511012667495:qplot(x=tmax, y=bikes, data=test.df)
1511012684287:qplot(x=tmax, y=bikes, data=subset(df, tmax > 30))
1511012754410:qplot(x=tmax, y=bikes, data=subset(df, tmax > 30), geom='smooth')
1511012826677:df.b <- filter(df, tmax > 30)
1511012850679:cor.test(x=df.b$tmax, y=df.b$bikes)
1511012976012:cor(select(df, -c(date, specific)))
1511013178441:qplot(x=prcp, y=bikes, data=df)
1511013202633:qplot(x=prcp, y=bikes, data=filter(df, prcp > 0))
1511013217179:qplot(x=prcp, y=bikes, data=filter(df, prcp > 10))
1511013222588:qplot(x=prcp, y=bikes, data=filter(df, prcp > 20))
1511013277929:qplot(x=snow, y=bikes, data=df)
1511013289362:qplot(x=snow, y=bikes, data=filter(df, snow > 0))
1511013463115:qplot(x=snow, y=bikes, data=filter(df, snow > 5))
1511013488858:cor.test(x=filter(df, snow > 5)$snow, y=filter(df, snow > 5)$bikes)
1511013679973:qplot(x=tmin, y=bikes, data=df)
1511013743288:cor.test(x=filter(df, tmin > 20)$tmin, y=filter(df, tmin > 20)$bikes)
1511013759431:cor.test(x=filter(df, tmin < 20)$tmin, y=filter(df, tmin < 20)$bikes)
1511013772745:cor.test(x=filter(df, tmin < 18)$tmin, y=filter(df, tmin < 18)$bikes)
1511013781999:cor.test(x=filter(df, tmin < 20)$tmin, y=filter(df, tmin < 20)$bikes)
1511013821775:qplot(x=tavg, y=bikes, data=df)
1511013848367:cor.test(x=filter(df, tavg < 25)$tavg, y=filter(df, tavg < 25)$bikes)
1511013879915:qplot(x=awnd, y=bikes, data=df)
1511013906625:cor.test(df$awnd, df$bikes)
1511013929353:qplot(x=awnd, y=bikes, data=filter(df, awnd > 2.5))
1511013956173:cor.test(filter(df, awnd > 2.5)$awnd, filter(df, awnd > 2.5)$bikes)
1511013969660:cor.test(filter(df, awnd > 3)$awnd, filter(df, awnd > 3)$bikes)
1511014006237:cor.test(filter(df, awnd > 4)$awnd, filter(df, awnd > 4)$bikes)
1511014018949:cor.test(filter(df, awnd > 3.5)$awnd, filter(df, awnd > 3.5)$bikes)
1511014065129:cor.test(filter(df, awnd > 4)$awnd, filter(df, awnd > 4)$bikes)
1511014083643:cor.test(filter(df, awnd > 4)$awnd, filter(df, awnd > 3.5)$bikes)
1511014088145:cor.test(filter(df, awnd > 3.5)$awnd, filter(df, awnd > 3.5)$bikes)
1511014135761:cor.test(filter(df, awnd > 3.2)$awnd, filter(df, awnd > 3.2)$bikes)
1511014140372:cor.test(filter(df, awnd > 3.3)$awnd, filter(df, awnd > 3.3)$bikes)
1511014274320:qplot(x=holiday, y=bikes, data=df, group=holiday, geom='boxplot')
1511014380908:qplot(x=holiday, y=bikes, data=df, group=holiday, geom='boxplot') + facet_grid(. ~ month)
1511014398905:qplot(x=holiday, y=bikes, data=df, group=holiday, geom='boxplot') + facet_wrap(~ month)
1511014511428:cor(select(df, -c(date, specific)))
1511014599542:qplot(x=month, y=tavg, data=df)
1511014625412:qplot(x=month, y=bikes, data=df)
1511014667133:model.a <- lm(bikes ~ tmax + month, data = df, subset = tmax < 30)
1511014686231:summary(model.a)
1511014705691:model.a <- lm(bikes ~ month, data = df, subset = tmax < 30)
1511014710491:summary(model.a)
1511014725476:model.a <- lm(bikes ~ tmax + month, data = df, subset = tmax < 30)
1511014727125:summary(model.a)
1511014797064:qplot(x=weekday, y=bikes, data=df)
1511014823055:qplot(x=weekday, y=bikes, data=df, geom='boxplot', group=weekday)
1511014870525:qplot(x=weekday, y=bikes, data=df, geom='boxplot', group=weekday) + facet_wrap(~ month)
1511015021849:sum(df$holiday)
1511015145770:weather <- read_csv('Weather.csv')
1511015145782:colnames(weather) <- tolower(colnames(weather))
1511015145783:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511015145784:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511015145789:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511015145793:holidays <- read_csv('Holidays.csv')
1511015145797:colnames(holidays) <- tolower(colnames(holidays))
1511015145798:holidays <- holidays %>%
1511015145799:mutate(date = date / 86400) %>%
1511015145800:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511015145805:# 2. Joining the data
1511015145805:df <- weather %>%
1511015145806:inner_join(bikes, by = 'date') %>%
1511015145807:left_join(holidays, by = 'date') %>%
1511015145809:mutate(specific = holiday) %>%
1511015145810:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511015145817:# rm(list=c('bikes', 'holidays', 'weather'))
1511015145818:# 3. Outlier treatment
1511015145819:df <- df %>%
1511015145819:filter(bikes > 0 & bikes < 50000) %>%
1511015145820:filter(awnd > 0) %>%
1511015145820:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511015145820:mutate(prcp = ifelse(is.na(prcp), 0, prcp)) %>%
1511015145821:mutate(previous_day_tmin = lag(tmin)) %>%
1511015145822:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511015145823:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511015145825:mutate(previous_day_tmax = lag(tmax)) %>%
1511015145826:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511015145828:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511015145829:mutate(previous_day_tavg = lag(tavg)) %>%
1511015145830:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511015145831:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511015145832:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg)) %>%
1511015145833:mutate(weekday = (as.POSIXlt(date)$wday + 1) % 7 ) %>%
1511015145833:mutate(month = month(date))
1511015176749:weather <- read_csv('Weather.csv')
1511015176761:colnames(weather) <- tolower(colnames(weather))
1511015176762:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511015176764:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511015176768:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511015176772:holidays <- read_csv('Holidays.csv')
1511015176777:colnames(holidays) <- tolower(colnames(holidays))
1511015176778:holidays <- holidays %>%
1511015176778:mutate(date = date / 86400) %>%
1511015176779:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511015176784:# 2. Joining the data
1511015176784:df <- weather %>%
1511015176785:inner_join(bikes, by = 'date') %>%
1511015176786:left_join(holidays, by = 'date') %>%
1511015176786:mutate(specific = holiday) %>%
1511015176788:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511015176796:# rm(list=c('bikes', 'holidays', 'weather'))
1511015176797:# 3. Outlier treatment
1511015176797:df <- df %>%
1511015176798:filter(bikes > 0 & bikes < 50000) %>%
1511015176798:filter(awnd > 0) %>%
1511015176799:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511015176799:mutate(prcp = ifelse(is.na(prcp), 0, prcp)) %>%
1511015176799:mutate(previous_day_tmin = lag(tmin)) %>%
1511015176800:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511015176800:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511015176801:mutate(previous_day_tmax = lag(tmax)) %>%
1511015176801:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511015176801:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511015176803:mutate(previous_day_tavg = lag(tavg)) %>%
1511015176805:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511015176806:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511015176807:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg)) %>%
1511015176808:mutate(weekday = (as.integer(as.POSIXlt(date)$wday) + 1) % 7 ) %>%
1511015176810:mutate(month = month(date))
1511015719156:as.POSIXlt('2017-11-18')$wday
1511015773160:weather <- read_csv('Weather.csv')
1511015773167:colnames(weather) <- tolower(colnames(weather))
1511015773167:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511015773171:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511015773178:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511015773180:holidays <- read_csv('Holidays.csv')
1511015773184:colnames(holidays) <- tolower(colnames(holidays))
1511015773184:holidays <- holidays %>%
1511015773185:mutate(date = date / 86400) %>%
1511015773186:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511015773190:# 2. Joining the data
1511015773191:df <- weather %>%
1511015773193:inner_join(bikes, by = 'date') %>%
1511015773194:left_join(holidays, by = 'date') %>%
1511015773194:mutate(specific = holiday) %>%
1511015773196:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511015773202:# rm(list=c('bikes', 'holidays', 'weather'))
1511015773204:# 3. Outlier treatment
1511015773205:df <- df %>%
1511015773206:filter(bikes > 0 & bikes < 50000) %>%
1511015773207:filter(awnd > 0) %>%
1511015773208:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511015773208:mutate(prcp = ifelse(is.na(prcp), 0, prcp)) %>%
1511015773208:mutate(previous_day_tmin = lag(tmin)) %>%
1511015773209:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511015773209:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511015773210:mutate(previous_day_tmax = lag(tmax)) %>%
1511015773210:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511015773210:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511015773211:mutate(previous_day_tavg = lag(tavg)) %>%
1511015773212:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511015773213:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511015773213:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg)) %>%
1511015773214:mutate(weekday = as.POSIXlt(date)$wday) %>%
1511015773216:mutate(month = month(date)) %>%
1511015773216:mutate(weekday = ifelse(weekday < 6), weekday + 1, 0)
1511015791224:weather <- read_csv('Weather.csv')
1511015791232:colnames(weather) <- tolower(colnames(weather))
1511015791234:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511015791236:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511015791240:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511015791242:holidays <- read_csv('Holidays.csv')
1511015791245:colnames(holidays) <- tolower(colnames(holidays))
1511015791246:holidays <- holidays %>%
1511015791248:mutate(date = date / 86400) %>%
1511015791249:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511015791255:# 2. Joining the data
1511015791255:df <- weather %>%
1511015791256:inner_join(bikes, by = 'date') %>%
1511015791257:left_join(holidays, by = 'date') %>%
1511015791257:mutate(specific = holiday) %>%
1511015791258:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511015791263:# rm(list=c('bikes', 'holidays', 'weather'))
1511015791264:# 3. Outlier treatment
1511015791265:df <- df %>%
1511015791266:filter(bikes > 0 & bikes < 50000) %>%
1511015791266:filter(awnd > 0) %>%
1511015791266:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511015791267:mutate(prcp = ifelse(is.na(prcp), 0, prcp)) %>%
1511015791267:mutate(previous_day_tmin = lag(tmin)) %>%
1511015791268:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511015791268:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511015791270:mutate(previous_day_tmax = lag(tmax)) %>%
1511015791271:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511015791272:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511015791272:mutate(previous_day_tavg = lag(tavg)) %>%
1511015791273:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511015791274:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511015791275:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg)) %>%
1511015791276:mutate(weekday = as.POSIXlt(date)$wday) %>%
1511015791277:mutate(month = month(date)) %>%
1511015791278:mutate(weekday = ifelse(weekday < 6, weekday + 1, 0))
1511015825601:sum(df$holiday)
1511015841045:qplot(x=weekday, y=bikes, data=df, geom='boxplot', group=weekday) + facet_wrap(~ month)
1511015950684:filter(df, holiday == 1 & weekday %in% c(5, 6))
1511015964336:filter(df, holiday == 1 & weekday %in% c(5, 6))
1511016159145:write_csv(df, 'datahack_clean.csv')
1511016882362:install.packages('randomForest')
1511016895062:install.packages('randomForest')
1511016900963:require(leaps)
1511016900989:require(randomForest)
1511016961411:require(leaps)
1511016961412:require(randomForest)
1511016987408:?tree
1511017085803:?randomForest
1511017393792:weather <- read_csv('Weather.csv')
1511017393801:colnames(weather) <- tolower(colnames(weather))
1511017393802:weather$date <- as.Date(weather$date, "%d/%m/%Y")
1511017393804:bikes <- read_csv('Bikes.csv', col_names = c('date', 'bikes'))
1511017393809:bikes$date <- as.Date(bikes$date, "%d/%m/%Y")
1511017393810:holidays <- read_csv('Holidays.csv')
1511017393819:colnames(holidays) <- tolower(colnames(holidays))
1511017393820:holidays <- holidays %>%
1511017393820:mutate(date = date / 86400) %>%
1511017393821:mutate(date = as.Date(date, origin = '1970-01-01', tz = 'HST'))
1511017393825:# 2. Joining the data
1511017393826:df <- weather %>%
1511017393827:inner_join(bikes, by = 'date') %>%
1511017393827:left_join(holidays, by = 'date') %>%
1511017393828:mutate(specific = holiday) %>%
1511017393828:mutate(holiday = ifelse(is.na(holiday), 0, 1))
1511017393835:# rm(list=c('bikes', 'holidays', 'weather'))
1511017393836:# 3. Outlier treatment
1511017393837:df <- df %>%
1511017393837:filter(bikes > 0 & bikes < 50000) %>%
1511017393839:filter(awnd > 0) %>%
1511017393839:mutate(snow = ifelse(is.na(snow), 0, snow)) %>%
1511017393841:mutate(prcp = ifelse(is.na(prcp), 0, prcp)) %>%
1511017393841:mutate(previous_day_tmin = lag(tmin)) %>%
1511017393842:mutate(tmin = ifelse(is.na(tmin), previous_day_tmin,
1511017393843:ifelse(tmin < -50, previous_day_tmin, tmin))) %>%
1511017393843:mutate(previous_day_tmax = lag(tmax)) %>%
1511017393844:mutate(tmax = ifelse(is.na(tmax), previous_day_tmax,
1511017393844:ifelse(tmax > 50, previous_day_tmax, tmax))) %>%
1511017393844:mutate(previous_day_tavg = lag(tavg)) %>%
1511017393845:mutate(tavg = ifelse(is.na(tavg), previous_day_tavg,
1511017393845:ifelse(tavg > 50, previous_day_tavg, tavg))) %>%
1511017393845:select(-c(previous_day_tmin, previous_day_tmax, previous_day_tavg)) %>%
1511017393846:mutate(weekday = as.POSIXlt(date)$wday) %>%
1511017393846:mutate(month = month(date)) %>%
1511017393847:mutate(weekday = ifelse(weekday < 6, weekday + 1, 0)) %>%
1511017393849:mutate(holiday = ifelse(weekday > 4, 0, holiday))
1511017415807:sum(df$holiday)
1511017482171:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday +
1511017482174:weekday + month, data = df)
1511017490215:GenerateResultsFile(model = model.b)
1511017611490:summary(model.b)
1511017705531:model.b <- lm(bikes ~ snow + tmax + tmin + tavg, data = df)
1511017708850:summary(model.b)
1511017725337:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday +
1511017725337:weekday + month, data = df)
1511017727878:summary(model.b)
1511017743995:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday +
1511017743996:weekday, data = df)
1511017745805:summary(model.b)
1511017756689:summary(model.b)
1511017772085:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511017772085:weekday, data = df)
1511017774155:summary(model.b)
1511017798637:model.b <- lm(bikes ~ prcp + tmax + tmin + tavg + awnd +
1511017798638:weekday, data = df)
1511017803811:summary(model.b)
1511017880769:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511017880770:weekday, data = df)
1511017883116:summary(model.b)
1511017918268:GenerateResultsFile(model = model.b)
1511018281600:qplot(x=holiday, y=bikes, data=df, group=holiday, geom='boxplot') + facet_wrap(~ month)
1511018377282:filter(df, holiday==1 & month==4)
1511019080721:cor.test(x=filter(df, tavg < 25)$tavg, y=filter(df, tavg < 25)$bikes)
1511019119293:cor.test(x=filter(df, tmin < 20)$tmin, y=filter(df, tmin < 20)$bikes)
1511019162267:cor.test(x=filter(df, tmax < 30)$tmax, y=filter(df, tmax < 30)$bikes
1511019164078:)
1511019181260:cor.test(filter(df, awnd > 3.3)$awnd, filter(df, awnd > 3.3)$bikes)
1511019202203:cor.test(x=filter(df, snow > 5)$snow, y=filter(df, snow > 5)$bikes)
1511020262701:xx <- data.frame(1:5, 1:5)
1511020274379:yy <- data.frame(6:10, 6:10)
1511020276310:xx
1511020282834:yy
1511020294351:xx <- data.frame(a=1:5, b=1:5)
1511020295091:xx
1511020302984:yy <- data.frame(a=6:10, b=6:10)
1511020304134:yy
1511020313202:zz <- rbind(xx, yy)
1511020313988:zz
1511020321869:?rbind
1511020970267:result
1511020975081:data.frame(result)
1511021117847:temp.df <- filter(df, tmax < 30)
1511021133906:temp.testing <- filter(testing, tmax < 30)
1511021151397:temp.model <- lm(bikes ~ tmax, data = temp.df)
1511021186608:temp.result <- round(predict(temp.model, temp.testing))
1511021195446:View(temp.df)
1511021217279:View(testing)
1511021243853:temp.result
1511021264063:temp.testing
1511021320214:xx
1511021322249:zz
1511021331465:cbind(zz, 11:20)
1511021337320:cbind(zz, c=11:20)
1511021541700:RunStuff <- function (daf, testing) {
1511021541701:colnames(daf) <- tolower(colnames(daf))
1511021541702:temp.daf <- filter(daf, tmax < 30)
1511021541702:daf <- anti_join(daf, temp.daf, by='date')
1511021541704:snow.daf <- filter(daf, snow > 5)
1511021541705:daf <- anti_join(daf, snow.daf, by='date')
1511021541707:awnd.daf <- filter(daf, awnd > 3.3)
1511021541708:daf <- anti_join(daf, awnd.daf, by='date')
1511021541709:temp.model <- lm(bikes ~ tmax, data = temp.daf)
1511021541709:snow.model <- lm(bikes ~ snow, data = snow.daf)
1511021541711:awnd.model <- lm(bikes ~ awnd, data = awnd.daf)
1511021541711:generic.model <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511021541712:weekday, data = daf)
1511021541713:colnames(testing) <- tolower(colnames(testing))
1511021541714:temp.testing <- filter(testing, tmax < 30)
1511021541715:testing <- anti_join(testing, temp.testing, by='date')
1511021541716:snow.testing <- filter(testing, snow > 5)
1511021541717:testing <- anti_join(testing, snow.testing, by='date')
1511021541718:awnd.testing <- filter(testing, awnd > 3.3)
1511021541719:testing <- anti_join(testing, awnd.testing, by='date')
1511021541722:temp.result <- round(predict(temp.model, temp.testing))
1511021541724:temp.testing <- cbind(temp.testing, total=temp.result)
1511021541724:snow.result <- round(predict(snow.model, snow.testing))
1511021541725:snow.testing <- cbind(snow.testing, total=snow.result)
1511021541726:awnd.result <- round(predict(awnd.model, awnd.testing))
1511021541727:awnd.testing <- cbind(awnd.testing, total=awnd.result)
1511021541728:generic.result <- round(predict(generic.model, testing))
1511021541729:testing <- cbind(testing, total=generic.result)
1511021541730:result <- rbind(temp.result, snow.result, awnd.result, generic.result)
1511021541731:result <- select(result, c(id, total))
1511021541732:colnames(result.df) <- c('ID', 'Total')
1511021541733:write_csv(result.df, "Stuff.csv")
1511021541734:}
1511021550460:testing
1511021564641:RunStuff(daf=df, testing=testing)
1511021576896:RunStuff(daf=df, testing=testing)
1511021604540:l
1511021608369:c
1511021618218:debug(RunStuff)
1511021626348:RunStuff(daf=df, testing=testing)
1511021641350:RunStuff(daf=df, testing=testing)
1511021652512:snow.daf
1511021822987:undebug(RunStuff)
1511021997900:qplot(x=tmin, y=bikes, data=df)
1511022004487:qplot(x=tmax, y=bikes, data=df)
1511022014227:qplot(x=tmax, y=snow, data=df)
1511022063487:cor.test(x=filter(df, tmax < 30)$tmax, y=filter(df, tmax < 30)$bikes)
1511022083484:cor.test(x=filter(df, tmax < 30 & tmax > 10)$tmax, y=filter(df, tmax < 30 & tmax > 10)$bikes)
1511022092090:cor.test(x=filter(df, tmax < 30 & tmax > 5)$tmax, y=filter(df, tmax < 30 & tmax > 5)$bikes)
1511022108796:cor.test(x=filter(df, tmax < 30 & tmax > 0)$tmax, y=filter(df, tmax < 30 & tmax > 0)$bikes)
1511022119368:cor.test(x=filter(df, tmax < 30 & tmax > 2)$tmax, y=filter(df, tmax < 30 & tmax > 2)$bikes)
1511022148668:qplot(x=tmax, y=awnd, data=df)
1511022176643:RunStuff <- function (daf, testing) {
1511022176644:colnames(daf) <- tolower(colnames(daf))
1511022176645:snow.daf <- filter(daf, snow > 5)
1511022176646:daf <- anti_join(daf, snow.daf, by='date')
1511022176646:temp.daf <- filter(daf, tmax < 30)
1511022176646:daf <- anti_join(daf, temp.daf, by='date')
1511022176647:awnd.daf <- filter(daf, awnd > 3.3)
1511022176647:daf <- anti_join(daf, awnd.daf, by='date')
1511022176647:temp.model <- lm(bikes ~ tmax, data = temp.daf)
1511022176648:snow.model <- lm(bikes ~ snow, data = snow.daf)
1511022176648:awnd.model <- lm(bikes ~ awnd, data = awnd.daf)
1511022176648:generic.model <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511022176649:weekday, data = daf)
1511022176650:colnames(testing) <- tolower(colnames(testing))
1511022176652:temp.testing <- filter(testing, tmax < 30)
1511022176653:testing <- anti_join(testing, temp.testing, by='date')
1511022176654:snow.testing <- filter(testing, snow > 5)
1511022176655:testing <- anti_join(testing, snow.testing, by='date')
1511022176657:awnd.testing <- filter(testing, awnd > 3.3)
1511022176657:testing <- anti_join(testing, awnd.testing, by='date')
1511022176659:temp.result <- round(predict(temp.model, temp.testing))
1511022176659:temp.testing <- cbind(temp.testing, total=temp.result)
1511022176660:snow.result <- round(predict(snow.model, snow.testing))
1511022176661:snow.testing <- cbind(snow.testing, total=snow.result)
1511022176662:awnd.result <- round(predict(awnd.model, awnd.testing))
1511022176663:awnd.testing <- cbind(awnd.testing, total=awnd.result)
1511022176664:generic.result <- round(predict(generic.model, testing))
1511022176665:testing <- cbind(testing, total=generic.result)
1511022176666:result <- rbind(temp.result, snow.result, awnd.result, generic.result)
1511022176668:result <- select(result, c(id, total))
1511022176670:colnames(result.df) <- c('ID', 'Total')
1511022176671:write_csv(result.df, "Stuff.csv")
1511022176672:}
1511022182651:RunStuff(daf=df, testing=testing)
1511022230906:Debug(RunStuff())
1511022232712:Debug(RunStuff
1511022234190:)
1511022240668:debug(RunStuff)
1511022244427:RunStuff(daf=df, testing=testing)
1511022258688:RunStuff(daf=df, testing=testing)
1511022283407:colnames(testing)
1511022362039:RunStuff <- function (daf, testing) {
1511022362039:colnames(daf) <- tolower(colnames(daf))
1511022362040:snow.daf <- filter(daf, snow > 5)
1511022362040:daf <- anti_join(daf, snow.daf, by='date')
1511022362041:temp.daf <- filter(daf, tmax < 30)
1511022362041:daf <- anti_join(daf, temp.daf, by='date')
1511022362041:awnd.daf <- filter(daf, awnd > 3.3)
1511022362042:daf <- anti_join(daf, awnd.daf, by='date')
1511022362042:temp.model <- lm(bikes ~ tmax, data = temp.daf)
1511022362043:snow.model <- lm(bikes ~ snow, data = snow.daf)
1511022362043:awnd.model <- lm(bikes ~ awnd, data = awnd.daf)
1511022362044:generic.model <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511022362044:weekday, data = daf)
1511022362045:colnames(testing) <- tolower(colnames(testing))
1511022362045:snow.testing <- filter(testing, snow > 5)
1511022362046:testing <- anti_join(testing, snow.testing, by='id')
1511022362047:temp.testing <- filter(testing, tmax < 30)
1511022362047:testing <- anti_join(testing, temp.testing, by='id')
1511022362048:awnd.testing <- filter(testing, awnd > 3.3)
1511022362048:testing <- anti_join(testing, awnd.testing, by='id')
1511022362049:temp.result <- round(predict(temp.model, temp.testing))
1511022362049:temp.testing <- cbind(temp.testing, total=temp.result)
1511022362050:snow.result <- round(predict(snow.model, snow.testing))
1511022362051:snow.testing <- cbind(snow.testing, total=snow.result)
1511022362055:awnd.result <- round(predict(awnd.model, awnd.testing))
1511022362056:awnd.testing <- cbind(awnd.testing, total=awnd.result)
1511022362057:generic.result <- round(predict(generic.model, testing))
1511022362058:testing <- cbind(testing, total=generic.result)
1511022362059:result <- rbind(temp.result, snow.result, awnd.result, generic.result)
1511022362060:result <- result %>%
1511022362061:select(c(id, total)) %>%
1511022362063:arrange(id)
1511022362063:colnames(result.df) <- c('ID', 'Total')
1511022362065:write_csv(result.df, "Stuff.csv")
1511022362065:}
1511022372896:undebug(RunStuff)
1511022377071:RunStuff(daf=df, testing=testing)
1511022404140:debug(RunStuff)
1511022406517:RunStuff(daf=df, testing=testing)
1511022430501:temp.testing
1511022444290:snow.testing
1511022454362:awnd.testing
1511022458018:temp.testing
1511022463193:testing
1511022488273:result
1511022508094:colnames(result)
1511022520652:result <- rbind(temp.result, snow.result)
1511022527993:result
1511022559548:RunStuff <- function (daf, testing) {
1511022559550:colnames(daf) <- tolower(colnames(daf))
1511022559551:snow.daf <- filter(daf, snow > 5)
1511022559552:daf <- anti_join(daf, snow.daf, by='date')
1511022559553:temp.daf <- filter(daf, tmax < 30)
1511022559554:daf <- anti_join(daf, temp.daf, by='date')
1511022559554:awnd.daf <- filter(daf, awnd > 3.3)
1511022559554:daf <- anti_join(daf, awnd.daf, by='date')
1511022559555:temp.model <- lm(bikes ~ tmax, data = temp.daf)
1511022559555:snow.model <- lm(bikes ~ snow, data = snow.daf)
1511022559556:awnd.model <- lm(bikes ~ awnd, data = awnd.daf)
1511022559557:generic.model <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511022559558:weekday, data = daf)
1511022559558:colnames(testing) <- tolower(colnames(testing))
1511022559560:snow.testing <- filter(testing, snow > 5)
1511022559560:testing <- anti_join(testing, snow.testing, by='id')
1511022559561:temp.testing <- filter(testing, tmax < 30)
1511022559562:testing <- anti_join(testing, temp.testing, by='id')
1511022559563:awnd.testing <- filter(testing, awnd > 3.3)
1511022559565:testing <- anti_join(testing, awnd.testing, by='id')
1511022559567:temp.result <- round(predict(temp.model, temp.testing))
1511022559568:temp.testing <- cbind(temp.testing, total=temp.result)
1511022559568:snow.result <- round(predict(snow.model, snow.testing))
1511022559569:snow.testing <- cbind(snow.testing, total=snow.result)
1511022559571:awnd.result <- round(predict(awnd.model, awnd.testing))
1511022559572:awnd.testing <- cbind(awnd.testing, total=awnd.result)
1511022559573:generic.result <- round(predict(generic.model, testing))
1511022559574:testing <- cbind(testing, total=generic.result)
1511022559575:result <- rbind(temp.testing, snow.testing, awnd.testing, testing)
1511022559576:result <- result %>%
1511022559577:select(c(id, total)) %>%
1511022559577:arrange(id)
1511022559578:colnames(result.df) <- c('ID', 'Total')
1511022559578:write_csv(result.df, "Stuff.csv")
1511022559578:}
1511022562254:RunStuff(daf=df, testing=testing)
1511023558774:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday + weekday + month, data = cleaned_bikes, mtry = 3, importance = T)
1511023573708:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday + weekday + month, data = df, mtry = 3, importance = T)
1511023581461:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday + weekday + month, data = df, mtry = 6, importance = T)
1511023588143:model.rf
1511023808081:predict(model.rf, testing)
1511023823140:GenerateResultsFile(model.rf)
1511023840964:GenerateResultsFile(model.rf)
1511024296328:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday + weekday + month, data = df, mtry = 7, importance = T)
1511024302565:model.rf
1511024304870:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd + holiday + weekday + month, data = df, mtry = 7, importance = T)
1511024308437:model.rf
1511024367972:model.rf <- randomForest(bikes ~ snow + tmax + tmin + tavg + awnd + weekday + factor(month), data = df, mtry = 7, importance = T)
1511024493508:model.rf <- randomForest(bikes ~ snow + tmax + tmin + tavg + awnd + weekday +
1511024493509:month, data = df, mtry = 7, importance = T)
1511024500933:model.rf
1511024652579:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511024652582:weekday, data = df)
1511024666525:predict(model.b, testing)
1511024702821:summary(model.b)
1511024714634:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511024714634:weekday + holiday + month, data = df)
1511024717686:predict(model.b, testing)
1511024724409:summary(model.b)
1511024737349:View(testing)
1511025057357:Ensemble <- function (training) {
1511025057360:model.lm <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025057361:weekday + holiday + month, data = training)
1511025057362:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025057362:holiday + weekday + month,
1511025057364:data = cleaned_bikes, mtry = 3, importance = T)
1511025057364:}
1511025443377:list(1:10)
1511025456511:rep(1:10)
1511025479258:rep(0, 10)
1511025611284:GetEnsemble <- function (training) {
1511025611286:set.seed(10)
1511025611286:model.lm <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025611287:weekday + holiday + month, data = training)
1511025611288:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025611289:holiday + weekday + month, ntree = 1000,
1511025611290:data = training, mtry = 6, importance = T)
1511025611291:actual.y <- training$bikes
1511025611292:result.lm <- predict(model.lm, training)
1511025611292:result.rf <- predict(model.rf, training)
1511025611294:msqs = rep(0, 10)
1511025611294:for (i in 1:10) {
1511025611296:step <- 0.1 * i
1511025611297:ensemble <- (step * result.lm) + ((1 - step) * result.rf)
1511025611299:msqs[i] <- sqrt(power(y, 2) - power(ensemble, 2))
1511025611299:}
1511025611300:return(msqs)
1511025611301:}
1511025625506:GetEnsemble(df)
1511025672420:GetEnsemble <- function (training) {
1511025672420:set.seed(10)
1511025672421:model.lm <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025672422:weekday + holiday + month, data = training)
1511025672422:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025672422:holiday + weekday + month, ntree = 1000,
1511025672423:data = training, mtry = 6, importance = T)
1511025672423:actual.y <- training$bikes
1511025672424:result.lm <- predict(model.lm, training)
1511025672424:result.rf <- predict(model.rf, training)
1511025672425:msqs = rep(0, 10)
1511025672426:for (i in 1:10) {
1511025672427:step <- 0.1 * i
1511025672428:ensemble <- (step * result.lm) + ((1 - step) * result.rf)
1511025672429:msqs[i] <- sqrt(result.lm ^ 2 - result.rf ^ 2)
1511025672430:}
1511025672431:return(msqs)
1511025672432:}
1511025674453:GetEnsemble(df)
1511025712337:GetEnsemble <- function (training) {
1511025712337:set.seed(10)
1511025712338:model.lm <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025712339:weekday + holiday + month, data = training)
1511025712339:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025712340:holiday + weekday + month, ntree = 1000,
1511025712340:data = training, mtry = 6, importance = T)
1511025712341:actual.y <- training$bikes
1511025712341:result.lm <- predict(model.lm, training)
1511025712342:result.rf <- predict(model.rf, training)
1511025712343:msqs = rep(0, 10)
1511025712343:for (i in 1:10) {
1511025712344:step <- 0.1 * i
1511025712345:ensemble <- (step * result.lm) + ((1 - step) * result.rf)
1511025712346:print(sqrt(result.lm ^ 2 - result.rf ^ 2))
1511025712347:}
1511025712348:return(msqs)
1511025712349:}
1511025716204:GetEnsemble(df)
1511025741997:GetEnsemble <- function (training) {
1511025741999:set.seed(10)
1511025742000:model.lm <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025742000:weekday + holiday + month, data = training)
1511025742001:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025742001:holiday + weekday + month, ntree = 1000,
1511025742002:data = training, mtry = 6, importance = T)
1511025742002:actual.y <- training$bikes
1511025742002:result.lm <- predict(model.lm, training)
1511025742003:result.rf <- predict(model.rf, training)
1511025742003:msqs = rep(0, 10)
1511025742004:for (i in 1:10) {
1511025742004:step <- 0.1 * i
1511025742004:ensemble <- (step * result.lm) + ((1 - step) * result.rf)
1511025742005:print(sum(sqrt(result.lm ^ 2 - result.rf ^ 2)))
1511025742005:}
1511025742005:return(msqs)
1511025742006:}
1511025744531:GetEnsemble(df)
1511025818231:model.b <- lm(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025818232:weekday + holiday + month, data = df)
1511025835163:model.rf <- randomForest(bikes ~ prcp + snow + tmax + tmin + tavg + awnd +
1511025835164:holiday + weekday + month, data = df, mtry = 7,
1511025835165:importance = T)
1511026103026:GenerateResultsFile <- function (model.lm, model.rf) {
1511026103029:test.set <- read_csv('testing.csv')
1511026103030:colnames(test.set) <- tolower(colnames(test.set))
1511026103031:result.lm <- round(predict(model.lm, test.set))
1511026103032:result.rf <- round(predict(model.rf, test.set))
1511026103033:result.lm.df <- data.frame(test.set$id, result.lm)
1511026103034:result.rf.df <- data.frame(test.set$id, result.rf)
1511026103037:colnames(result.lm.df) <- c('ID', 'Total')
1511026103040:colnames(result.rf.df) <- c('ID', 'Total')
1511026103042:result.df <- data.frame(test.set$id, 0.1*result.lm.df + 0.9*result.rf.df)
1511026103044:colnames(result.df) <- c('ID', 'Total')
1511026103045:write_csv(result.df, "Results.csv")
1511026103046:}
1511026154765:GenerateResultsFile(model.lm=model.b, model.rf = model.rf)
1511026195444:GenerateResultsFile <- function (model.lm, model.rf) {
1511026195446:test.set <- read_csv('testing.csv')
1511026195446:colnames(test.set) <- tolower(colnames(test.set))
1511026195446:result.lm <- round(predict(model.lm, test.set))
1511026195447:result.rf <- round(predict(model.rf, test.set))
1511026195447:result.lm.df <- data.frame(test.set$id, result.lm)
1511026195448:result.rf.df <- data.frame(test.set$id, result.rf)
1511026195448:colnames(result.lm.df) <- c('ID', 'Total')
1511026195449:colnames(result.rf.df) <- c('ID', 'Total')
1511026195450:result.df <- data.frame(test.set$id, round(0.1*result.lm.df + 0.9*result.rf.df))
1511026195451:colnames(result.df) <- c('ID', 'Total')
1511026195452:write_csv(result.df, "Results.csv")
1511026195452:}
1511026197882:GenerateResultsFile(model.lm=model.b, model.rf = model.rf)
1511090579998:require(readxl)
1511090588594:library(dplyr)
1511115462384:knitr::opts_chunk$set(echo=TRUE)
1511115462391:options(width=40)
1511115462393:require(DT)
1511115462431:require(ggplot2)
1511115462659:require(knitr)
1511115462670:require(readr)
1511115462811:PlotNearestAvailableStations(open.stations)
1511115480812:source("BikeInfo.R")
1511115497001:source("BikeInfo.R")
1511115504556:kable(utilisation.by.size,
1511115504557:caption="Utilisation of bike stations in Dublin - classified by size of
1511115504558:the station.",
1511115504561:format="html")
1511115518112:kable(class.summary,
1511115518113:caption="Summary of bike stations in Dublin (classified by size of
1511115518114:the station.)",
1511115518115:format="html")
1511115524086:PlotNearestAvailableStations(open.stations)
1511115765061:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1511116016754:require(dplyr)
1511116016920:require(ggmap)
1511116017277:require(ggplot2)
1511116017278:require(readr)
1511116017305:require(reshape2)
1511116018296:calendar <- read_csv('gtfs/calendar.txt')
1511116019483:View(calendar)
1511116878778:agencies <- read_csv('gtfs/agency.txt')
1511116878932:calendar <- read_csv('gtfs/calendar.txt')
1511116878936:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1511116878939:routes <- read_csv('gtfs/routes.txt')
1511116878944:shapes <- read_csv('gtfs/shapes.txt')
1511116879284:stop.times <- read_csv('gtfs/stop_times.txt')
1511116881821:stops <- read_csv('gtfs/stops.txt')
1511116881831:trips <- read_csv('gtfs/trips.txt')
1511116881858:# ---- Trimming down ----
1511116881859:# After examining the tables, we can see that some of the tables have variables
1511116881860:# that will not be helpful in the analysis. So, we can remove those variables.
1511116881860:# 1. Dropping agency_id and route_type from routes as they do not vary
1511116881861:# throughout the data.
1511116881861:routes <- select(routes, -c(agency_id, route_type))
1511116881882:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1511116881883:# Also, service_id can be converted to a factor as only 3 possible values are
1511116881884:# there.
1511116881885:trips <- trips %>%
1511116881886:select(-c(trip_headsign, block_id)) %>%
1511116881886:mutate(service_id = factor(service_id))
1511116881965:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1511116881966:# throughout, departure_time because it is same as arrival_time for all the
1511116881968:# rows
1511116881969:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1511116881970:departure_time))
1511116881978:# 4. Dropping start_date and end_date from calendar as they are the same
1511116881979:# across the table - 20130127 and 20131031 respectively. Also, service_id can
1511116881979:# be converted to a factor as only 3 possible values are there.
1511116881980:calendar <- calendar %>%
1511116881980:select(-c(start_date, end_date)) %>%
1511116881981:mutate(service_id=factor(service_id))
1511116886331:PlotTripsByServices(trips)
1511116924341:trips.by.services <- trips %>%
1511116924342:group_by(service_id) %>%
1511116924343:summarise(trip_count=sum(!is.na(trip_id)))
1511116924471:qplot(x=reorder(service_id, -trip_count),
1511116924471:y=trip_count, data = trips.by.services,
1511116924472:fill=service_id, geom = 'blank', main = 'Trips by services') +
1511116924473:geom_bar(stat='identity', position = 'dodge') +
1511116924473:xlab("Services") + ylab('Trips') + labs(fill = 'Service')
1511116936144:PlotTripsByServices <- function (trips) {
1511116936144:trips.by.services <- trips %>%
1511116936145:group_by(service_id) %>%
1511116936146:summarise(trip_count=sum(!is.na(trip_id)))
1511116936146:qplot(x=reorder(service_id, -trip_count),
1511116936146:y=trip_count, data = trips.by.services,
1511116936147:fill=service_id, geom = 'blank', main = 'Trips by services') +
1511116936147:geom_bar(stat='identity', position = 'dodge') +
1511116936148:xlab("Services") + ylab('Trips') + labs(fill = 'Service')
1511116936148:}
1511116936149:PlotTripsByRoutes <- function (trips) {
1511116936150:routes.by.services <- trips %>%
1511116936152:group_by(service_id, route_id) %>%
1511116936152:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511116936154:summarise(route_count=sum(!is.na(route_id)))
1511116936156:qplot(x=reorder(service_id, -route_count),
1511116936156:y=route_count, data=routes.by.services,
1511116936157:fill=service_id, geom='blank', main='Routes by services') +
1511116936157:geom_bar(stat='identity', position='dodge') +
1511116936158:xlab("Routes") + ylab('Trips') + labs(fill = 'Service')
1511116936159:}
1511116940236:PlotTripsByServices(trips)
1511116948137:PlotTripsByRoutes(trips)
1511117397499:stops.and.trips <- stop.times %>%
1511117397499:inner_join(stops, by="stop_id") %>%
1511117397500:select(-c(stop_lat, stop_lon)) %>%
1511117397501:inner_join(trips, by="trip_id")
1511117397910:# Getting area-wise stop counts.
1511117397911:areas.and.stops <- stops.and.trips %>%
1511117397912:group_by(stop_name, stop_id) %>%
1511117397912:summarise(stop_count=sum(!is.na(stop_id))) %>%
1511117397914:summarise(stop_count=sum(!is.na(stop_id)))
1511117401152:vital.stops <- stops.and.trips %>%
1511117401153:group_by(stop_name, service_id, route_id) %>%
1511117401154:summarise(route_count=sum(!is.na(route_id))) %>%
1511117401154:summarise(route_count=sum(!is.na(route_id))) %>%
1511117401154:inner_join(areas.and.stops, by="stop_name") %>%
1511117401155:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1511117401155:mutate(area_importance=round(ifelse(service_id==1, area_importance/5,
1511117401155:ifelse(service_id==2, area_importance/2,
1511117401156:area_importance)), 2))
1511117408647:vital.stops
1511117412703:View(vital.stops)
1511117690122:View(stop.times)
1511117697376:stops.and.trips <- stop.times %>%
1511117697377:inner_join(stops, by = "stop_id") %>%
1511117697378:select(-c(stop_lat, stop_lon)) %>%
1511117697378:inner_join(trips, by = "trip_id") %>%
1511117697378:filter(service_id == 1)
1511117712044:View(stop.times)
1511117734624:View(stops.and.trips)
1511117750773:agencies <- read_csv('gtfs/agency.txt')
1511117750785:calendar <- read_csv('gtfs/calendar.txt')
1511117750793:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1511117750800:routes <- read_csv('gtfs/routes.txt')
1511117750807:shapes <- read_csv('gtfs/shapes.txt')
1511117751106:stop.times <- read_csv('gtfs/stop_times.txt')
1511117754650:stops <- read_csv('gtfs/stops.txt')
1511117754663:trips <- read_csv('gtfs/trips.txt')
1511117754708:# ---- Trimming down ----
1511117754709:# After examining the tables, we can see that some of the tables have variables
1511117754710:# that will not be helpful in the analysis. So, we can remove those variables.
1511117754711:# 1. Dropping agency_id and route_type from routes as they do not vary
1511117754711:# throughout the data.
1511117754711:routes <- select(routes, -c(agency_id, route_type))
1511117754716:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1511117754717:# Also, service_id can be converted to a factor as only 3 possible values are
1511117754718:# there.
1511117754718:trips <- trips %>%
1511117754719:select(-c(trip_headsign, block_id)) %>%
1511117754719:mutate(service_id = factor(service_id))
1511117754731:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1511117754732:# throughout, departure_time because it is same as arrival_time for all the
1511117754733:# rows
1511117754733:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1511117754734:departure_time))
1511117754739:# 4. Dropping start_date and end_date from calendar as they are the same
1511117754740:# across the table - 20130127 and 20131031 respectively. Also, service_id can
1511117754741:# be converted to a factor as only 3 possible values are there.
1511117754742:calendar <- calendar %>%
1511117754742:select(-c(start_date, end_date)) %>%
1511117754742:mutate(service_id=factor(service_id))
1511117754751:# EDA
1511117754751:# 1. Service-wise summary.
1511117754752:# a) How many routes are covered under each service?
1511117754752:# b) How many trips are offered by each service?
1511117754755:PlotTripsByServices <- function (trips) {
1511117754755:trips.by.services <- trips %>%
1511117754756:group_by(service_id) %>%
1511117754756:summarise(trip_count=sum(!is.na(trip_id)))
1511117754757:qplot(x=reorder(service_id, -trip_count),
1511117754757:y=trip_count, data = trips.by.services,
1511117754758:fill=service_id, geom = 'blank', main = 'Trips by services') +
1511117754758:geom_bar(stat='identity', position = 'dodge') +
1511117754759:xlab("Services") + ylab('Trips') + labs(fill = 'Service')
1511117754760:}
1511117754761:PlotTripsByRoutes <- function (trips) {
1511117754762:routes.by.services <- trips %>%
1511117754762:group_by(service_id, route_id) %>%
1511117754763:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511117754764:summarise(route_count=sum(!is.na(route_id)))
1511117754764:qplot(x=reorder(service_id, -route_count),
1511117754765:y=route_count, data=routes.by.services,
1511117754765:fill=service_id, geom = 'blank', main = 'Routes by services') +
1511117754766:geom_bar(stat = 'identity', position = 'dodge') +
1511117754767:xlab("Services") + ylab('Routes') + labs(fill = 'Service')
1511117754768:}
1511117754772:# 2. Stop-wise summary.
1511117754772:# a) How many stops are there? Grouped by stop_ids and stop_names.
1511117754773:# Grouping by stop_names, we can get bus stops clustered in an area.
1511117754774:# b) How vital is an area(How many different routes are there in each area?)
1511117754774:# c) How busy is an area(How many different trips are there in each area?)
1511117754775:# a) How many stops are there?
1511117754775:stop.count <- length(unique(stops$stop_id))
1511117754777:stop.area.count <- length(unique(stops$stop_name))
1511117754779:# Importance and busyness of an area will vary based on the day of the week as
1511117754779:# well. So, while trying to evaluate these, service_id must be factored in.
1511117754780:# Also, how many stops are there in an area will also give a clearer picture.
1511117754781:# b) How vital is an area? (How many different routes are there in each area?)
1511117754782:stops.and.trips <- stop.times %>%
1511117754782:inner_join(stops, by = "stop_id") %>%
1511117754783:select(-c(stop_lat, stop_lon)) %>%
1511117754783:inner_join(trips, by = "trip_id") %>%
1511117754784:filter(service_id == 1)
1511117787529:View(stops.and.trips)
1511117799550:# Getting area-wise stop counts.
1511117799551:areas.and.stops <- stops.and.trips %>%
1511117799552:group_by(stop_name, stop_id) %>%
1511117799554:summarise(stop_count=sum(!is.na(stop_id))) %>%
1511117799555:summarise(stop_count=sum(!is.na(stop_id)))
1511117805477:# We are looking at the importance of an area by looking at how many different
1511117805477:# routes are passing through the area. We divide this by number of stops in the
1511117805478:# area to get area_importance. Now, service_id comes into picture, we need to
1511117805479:# divide area_importance by the number of days the service operates for in
1511117805479:# order to get the importance of an area per service per day.The higher the
1511117805480:# value for this, the more well-connected or important the area is considered.
1511117805480:vital.stops <- stops.and.trips %>%
1511117805480:group_by(stop_name, service_id, route_id) %>%
1511117805481:summarise(route_count=sum(!is.na(route_id))) %>%
1511117805481:summarise(route_count=sum(!is.na(route_id))) %>%
1511117805481:inner_join(areas.and.stops, by="stop_name") %>%
1511117805482:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1511117805482:mutate(area_importance=round(ifelse(service_id==1, area_importance/5,
1511117805484:ifelse(service_id==2, area_importance/2,
1511117805485:area_importance)), 2))
1511117807872:View(vital.stops)
1511117886656:vital.stops <- stops.and.trips %>%
1511117886657:group_by(stop_name, service_id, route_id) %>%
1511117886657:summarise(route_count=sum(!is.na(route_id))) %>%
1511117886658:summarise(route_count=sum(!is.na(route_id))) %>%
1511117886658:inner_join(areas.and.stops, by="stop_name") %>%
1511117886659:mutate(area_importance=round(route_count/stop_count, 2))
1511117888802:View(vital.stops)
1511117954100:vital.stops <- head(vital.stops, 10)
1511117955855:View(vital.stops)
1511117985512:vital.stops <- stops.and.trips %>%
1511117985513:group_by(stop_name, service_id, route_id) %>%
1511117985514:summarise(route_count=sum(!is.na(route_id))) %>%
1511117985514:summarise(route_count=sum(!is.na(route_id))) %>%
1511117985515:inner_join(areas.and.stops, by="stop_name") %>%
1511117985515:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1511117985516:arrange(-area_importance)
1511117985751:vital.stops <- head(vital.stops, 10)
1511117986955:View(vital.stops)
1511118143398:qplot(x=reorder(stop_name, -area_importance),
1511118143401:y=area_importance, data=vital.stops,
1511118143401:fill=stop_name, geom = 'blank', main = 'Vital areas') +
1511118143402:geom_bar(stat = 'identity', position = 'dodge') +
1511118143403:xlab("Area") + ylab('Importance') + labs(fill = 'Importance')
1511118169716:qplot(x=reorder(stop_name, -area_importance),
1511118169717:y=area_importance, data=vital.stops,
1511118169718:geom = 'blank', main = 'Vital areas') +
1511118169719:geom_bar(stat = 'identity', position = 'dodge') +
1511118169719:xlab("Area") + ylab('Importance')
1511118245025:PlotVitalStops <- function (stops.and.trips, areas.and.stops) {
1511118245026:vital.stops <- stops.and.trips %>%
1511118245027:group_by(stop_name, service_id, route_id) %>%
1511118245027:summarise(route_count=sum(!is.na(route_id))) %>%
1511118245027:summarise(route_count=sum(!is.na(route_id))) %>%
1511118245028:inner_join(areas.and.stops, by="stop_name") %>%
1511118245028:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1511118245029:arrange(-area_importance)
1511118245029:vital.stops <- head(vital.stops, 10)
1511118245029:qplot(x=reorder(stop_name, -area_importance),
1511118245030:y=area_importance, data=vital.stops,
1511118245030:geom = 'blank', main = 'Vital areas') +
1511118245030:geom_bar(stat = 'identity', position = 'dodge') +
1511118245031:xlab("Area") + ylab('Importance')
1511118245031:}
1511118792830:vital.stops <- head(vital.stops, 7)
1511118792834:qplot(x=reorder(stop_name, -area_importance),
1511118792835:y=area_importance, data=vital.stops,
1511118792836:geom = 'blank', main = 'Vital areas') +
1511118792838:geom_bar(stat = 'identity', position = 'dodge') +
1511118792839:xlab("Area") + ylab('Importance') + labs(subtitle = "XXX")
1511118848594:vital.stops <- stops.and.trips %>%
1511118848595:group_by(stop_name, service_id, route_id) %>%
1511118848596:summarise(route_count=sum(!is.na(route_id))) %>%
1511118848596:summarise(route_count=sum(!is.na(route_id))) %>%
1511118848597:inner_join(areas.and.stops, by="stop_name") %>%
1511118848597:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1511118848597:arrange(-area_importance)
1511118848778:mean.importance <- mean(vital.stops$area_importance)
1511118848778:sub.title <- paste("Mean area importance is ", as.character(mean.importance))
1511118848779:vital.stops <- head(vital.stops, 7)
1511118848781:qplot(x=reorder(stop_name, -area_importance),
1511118848781:y=area_importance, data=vital.stops,
1511118848781:geom = 'blank', main = 'Vital areas') +
1511118848782:geom_bar(stat = 'identity', position = 'dodge') +
1511118848782:xlab("Area") + ylab('Importance') + labs(subtitle = sub.title)
1511118865826:vital.stops <- stops.and.trips %>%
1511118865827:group_by(stop_name, service_id, route_id) %>%
1511118865828:summarise(route_count=sum(!is.na(route_id))) %>%
1511118865829:summarise(route_count=sum(!is.na(route_id))) %>%
1511118865829:inner_join(areas.and.stops, by="stop_name") %>%
1511118865829:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1511118865832:arrange(-area_importance)
1511118866020:mean.importance <- round(mean(vital.stops$area_importance), 2)
1511118866021:sub.title <- paste("Mean area importance is ", as.character(mean.importance))
1511118866022:vital.stops <- head(vital.stops, 7)
1511118866023:qplot(x=reorder(stop_name, -area_importance),
1511118866023:y=area_importance, data=vital.stops,
1511118866024:geom = 'blank', main = 'Vital areas') +
1511118866024:geom_bar(stat = 'identity', position = 'dodge') +
1511118866024:xlab("Area") + ylab('Importance') + labs(subtitle = sub.title)
1511118936501:busy.stops <- stops.and.trips %>%
1511118936501:group_by(stop_name, service_id) %>%
1511118936502:summarise(trip_count=sum(!is.na(route_id))) %>%
1511118936503:inner_join(areas.and.stops, by="stop_name") %>%
1511118936503:mutate(area_busyness=round(trip_count/stop_count, 2)) %>%
1511118936503:arrange(-area_busyness)
1511118936634:mean.busyness <- round(mean(busy.stops$area_busyness), 2)
1511118936635:sub.title <- paste("Mean area busyness score is ", as.character(mean.busyness))
1511118936635:busy.stops <- head(busy.stops, 7)
1511118936637:qplot(x=reorder(stop_name, -area_busyness),
1511118936637:y=area_busyness, data=busy.stops,
1511118936638:geom = 'blank', main = 'Busy areas') +
1511118936639:geom_bar(stat = 'identity', position = 'dodge') +
1511118936639:xlab("Area") + ylab('Busyness') + labs(subtitle = sub.title)
1511119388201:PlotTripsByRoutes <- function (trips) {
1511119388204:trips.by.routes <- trips %>%
1511119388204:inner_join(routes, by="route_id") %>%
1511119388207:group_by(route_id, route_short_name, route_long_name, service_id) %>%
1511119388207:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511119388209:ungroup()
1511119388209:}
1511119554964:agencies <- read_csv('gtfs/agency.txt')
1511119554973:calendar <- read_csv('gtfs/calendar.txt')
1511119554980:calendar.dates <- read_csv('gtfs/calendar_dates.txt')
1511119554986:routes <- read_csv('gtfs/routes.txt')
1511119554991:shapes <- read_csv('gtfs/shapes.txt')
1511119555152:stop.times <- read_csv('gtfs/stop_times.txt')
1511119556894:stops <- read_csv('gtfs/stops.txt')
1511119556905:trips <- read_csv('gtfs/trips.txt')
1511119556933:# ---- Trimming down ----
1511119556934:# After examining the tables, we can see that some of the tables have variables
1511119556935:# that will not be helpful in the analysis. So, we can remove those variables.
1511119556936:# 1. Dropping agency_id and route_type from routes as they do not vary
1511119556937:# throughout the data.
1511119556938:routes <- select(routes, -c(agency_id, route_type))
1511119556943:# 2. Dropping trip_headsign and block_id from trips as they are NA throughout.
1511119556944:# Also, service_id can be converted to a factor as only 3 possible values are
1511119556945:# there.
1511119556945:trips <- trips %>%
1511119556947:select(-c(trip_headsign, block_id)) %>%
1511119556947:mutate(service_id = factor(service_id))
1511119556963:# 3. Dropping pickup_type and drop_off_type from stop.times as they are 0
1511119556964:# throughout, departure_time because it is same as arrival_time for all the
1511119556965:# rows
1511119556965:stop.times <- select(stop.times, -c(pickup_type, drop_off_type,
1511119556967:departure_time))
1511119556974:# 4. Dropping start_date and end_date from calendar as they are the same
1511119556975:# across the table - 20130127 and 20131031 respectively. Also, service_id can
1511119556976:# be converted to a factor as only 3 possible values are there.
1511119556977:calendar <- calendar %>%
1511119556978:select(-c(start_date, end_date)) %>%
1511119556979:mutate(service_id=factor(service_id))
1511119556991:# EDA
1511119556991:# 1. Service-wise summary.
1511119556992:# a) How many routes are covered under each service?
1511119556993:# b) How many trips are offered by each service?
1511119556993:PlotTripsByServices <- function (trips) {
1511119556993:trips.by.services <- trips %>%
1511119556994:group_by(service_id) %>%
1511119556995:summarise(trip_count=sum(!is.na(trip_id)))
1511119556997:qplot(x=reorder(service_id, -trip_count),
1511119556997:y=trip_count, data = trips.by.services,
1511119556998:fill=service_id, geom = 'blank', main = 'Trips by services') +
1511119556998:geom_bar(stat='identity', position = 'dodge') +
1511119556999:xlab("Services") + ylab('Trips') + labs(fill = 'Service')
1511119557000:}
1511119557002:PlotRoutesByServices <- function (trips) {
1511119557003:routes.by.services <- trips %>%
1511119557004:group_by(service_id, route_id) %>%
1511119557005:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511119557007:summarise(route_count=sum(!is.na(route_id)))
1511119557008:qplot(x=reorder(service_id, -route_count),
1511119557008:y=route_count, data=routes.by.services,
1511119557009:fill=service_id, geom = 'blank', main = 'Routes by services') +
1511119557010:geom_bar(stat = 'identity', position = 'dodge') +
1511119557011:xlab("Services") + ylab('Routes') + labs(fill = 'Service')
1511119557012:}
1511119557013:# 2. Stop-wise summary.
1511119557014:# a) How many stops are there? Grouped by stop_ids and stop_names.
1511119557015:# Grouping by stop_names, we can get bus stops clustered in an area.
1511119557016:# b) How vital is an area(How many different routes are there in each area?)
1511119557017:# c) How busy is an area(How many different trips are there in each area?)
1511119557019:# a) How many stops are there?
1511119557019:stop.count <- length(unique(stops$stop_id))
1511119557020:stop.area.count <- length(unique(stops$stop_name))
1511119557021:# Importance and busyness of an area will vary based on the day of the week as
1511119557022:# well. So, while trying to evaluate these, service_id must be factored in.
1511119557023:# Also, how many stops are there in an area will also give a clearer picture.
1511119557024:# b) How vital is an area? (How many different routes are there in each area?)
1511119557024:stops.and.trips <- stop.times %>%
1511119557026:inner_join(stops, by = "stop_id") %>%
1511119557026:select(-c(stop_lat, stop_lon)) %>%
1511119557026:inner_join(trips, by = "trip_id") %>%
1511119557027:filter(service_id == 1)
1511119557572:# Getting area-wise stop counts.
1511119557573:areas.and.stops <- stops.and.trips %>%
1511119557574:group_by(stop_name, stop_id) %>%
1511119557575:summarise(stop_count=sum(!is.na(stop_id))) %>%
1511119557576:summarise(stop_count=sum(!is.na(stop_id)))
1511119584829:vital.stops <- stops.and.trips %>%
1511119584832:group_by(stop_name, service_id, route_id) %>%
1511119584832:summarise(route_count=sum(!is.na(route_id))) %>%
1511119584834:summarise(route_count=sum(!is.na(route_id))) %>%
1511119584834:inner_join(areas.and.stops, by="stop_name") %>%
1511119584835:mutate(area_importance=round(route_count/stop_count, 2))
1511119591513:busy.stops <- stops.and.trips %>%
1511119591514:group_by(stop_name, service_id) %>%
1511119591515:summarise(trip_count=sum(!is.na(route_id))) %>%
1511119591515:inner_join(areas.and.stops, by="stop_name") %>%
1511119591515:mutate(area_busyness=round(trip_count/stop_count, 2)) %>%
1511119591516:arrange(-area_busyness)
1511119625307:View(vital.stops)
1511119683651:busy.stops <- stops.and.trips %>%
1511119683652:group_by(stop_name, service_id) %>%
1511119683653:summarise(trip_count=sum(!is.na(route_id))) %>%
1511119683654:inner_join(areas.and.stops, by="stop_name") %>%
1511119683654:mutate(area_busyness=round(trip_count/stop_count, 2)) %>%
1511119683655:select(stop_name, area_busyness) %>%
1511119683656:arrange(-area_busyness)
1511119689641:vital.stops <- stops.and.trips %>%
1511119689642:group_by(stop_name, service_id, route_id) %>%
1511119689643:summarise(route_count=sum(!is.na(route_id))) %>%
1511119689643:summarise(route_count=sum(!is.na(route_id))) %>%
1511119689644:inner_join(areas.and.stops, by="stop_name") %>%
1511119689644:mutate(area_importance=round(route_count/stop_count, 2)) %>%
1511119689644:select(stop_name, area_importance) %>%
1511119689645:arrange(-area_importance)
1511119714874:stop.stuff <- inner_join(vital.stops, busy.stops, by='stop_name')
1511119806353:qplot(x = area_importance, y = area_busyness, data = stop.stuff)
1511120432014:sub.title <- paste("Mean area importance score is",
1511120432016:as.character(mean.importance),
1511120432017:"\nMean area busyness score is",
1511120432018:as.character(mean.busyness))
1511120438668:mean.importance <- round(mean(vital.stops$area_importance), 2)
1511120438669:mean.busyness <- round(mean(busy.stops$area_busyness), 2)
1511120438670:sub.title <- paste("Mean area importance score is",
1511120438671:as.character(mean.importance),
1511120438672:"\nMean area busyness score is",
1511120438672:as.character(mean.busyness))
1511120442949:sub.title
1511120467825:mean.importance <- round(mean(vital.stops$area_importance), 2)
1511120467826:mean.busyness <- round(mean(busy.stops$area_busyness), 2)
1511120467827:sub.title <- paste("Mean area importance score is",
1511120467828:as.character(mean.importance),
1511120467829:", mean area busyness score is",
1511120467829:as.character(mean.busyness))
1511120467830:stop.info <- inner_join(vital.stops, busy.stops, by='stop_name')
1511120467831:qplot(x = area_importance, y = area_busyness, data = stop.info,
1511120467833:main = 'Stop connectivity vs busyness') +
1511120467833:geom_bar(stat='identity', position = 'dodge') +
1511120467833:xlab("Area Importance score") + ylab('Area Busyness Score') +
1511120467834:labs(sutitle = sub.title)
1511120483484:mean.importance <- round(mean(vital.stops$area_importance), 2)
1511120483488:mean.busyness <- round(mean(busy.stops$area_busyness), 2)
1511120483489:sub.title <- paste("Mean area importance score is",
1511120483489:as.character(mean.importance),
1511120483490:", mean area busyness score is",
1511120483490:as.character(mean.busyness))
1511120483491:stop.info <- inner_join(vital.stops, busy.stops, by='stop_name')
1511120483493:qplot(x = area_importance, y = area_busyness, data = stop.info,
1511120483493:main = 'Stop connectivity vs busyness') +
1511120483494:xlab("Area Importance score") + ylab('Area Busyness Score') +
1511120483495:labs(sutitle = sub.title)
1511120522535:sub.title
1511120550572:PlotStopImportance(vital.stops, busy.stops)
1511120554207:PlotStopImportance <- function (vital.stops, busy.stops) {
1511120554209:mean.importance <- round(mean(vital.stops$area_importance), 2)
1511120554210:mean.busyness <- round(mean(busy.stops$area_busyness), 2)
1511120554211:sub.title <- paste("Mean area importance score is",
1511120554212:as.character(mean.importance),
1511120554213:", mean area busyness score is",
1511120554214:as.character(mean.busyness))
1511120554214:stop.info <- inner_join(vital.stops, busy.stops, by='stop_name')
1511120554215:qplot(x = area_importance, y = area_busyness, data = stop.info,
1511120554216:main = 'Stop connectivity vs busyness') +
1511120554217:xlab("Area Importance score") + ylab('Area Busyness Score') +
1511120554217:labs(sutitle = 'sub.title')
1511120554217:}
1511120557929:PlotStopImportance(vital.stops, busy.stops)
1511120580910:PlotStopImportance <- function (vital.stops, busy.stops) {
1511120580911:mean.importance <- round(mean(vital.stops$area_importance), 2)
1511120580911:mean.busyness <- round(mean(busy.stops$area_busyness), 2)
1511120580912:sub.title <- paste("Mean area importance score is",
1511120580912:as.character(mean.importance),
1511120580913:", mean area busyness score is",
1511120580913:as.character(mean.busyness))
1511120580913:stop.info <- inner_join(vital.stops, busy.stops, by='stop_name')
1511120580914:qplot(x = area_importance, y = area_busyness, data = stop.info,
1511120580915:main = 'Stop connectivity vs busyness') +
1511120580916:xlab("Area Importance score") + ylab('Area Busyness Score') +
1511120580916:labs(subtitle = sub.title)
1511120580916:}
1511120583543:PlotStopImportance(vital.stops, busy.stops)
1511121173370:trips.by.routes <- trips %>%
1511121173375:inner_join(routes, by="route_id") %>%
1511121173376:group_by(route_id, route_short_name, route_long_name, service_id) %>%
1511121173378:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511121173379:ungroup()
1511121176426:View(trips.by.routes)
1511121368900:trips.by.routes <- trips %>%
1511121368902:inner_join(routes, by="route_id") %>%
1511121368902:group_by(route_id, route_short_name, route_long_name, service_id) %>%
1511121368902:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511121368903:ungroup() %>%
1511121368903:arrange(-trip_count) %>%
1511121368904:select(route_short_name, trip_count)
1511121368934:mean.trip.count <- round(mean(trips.by.routes), 2)
1511121368935:sub.title <- paste("Mean trips per route is", mean.trip.count)
1511121368935:trips.by.routes <- head(trips.by.routes, 10)
1511121368937:qplot(x=reorder(route_short_name, -trip_count),
1511121368937:y=trip_count, data = trips.by.routes,
1511121368940:fill=route_short_name, geom = 'blank', main = 'Trips by services') +
1511121368942:geom_bar(stat='identity', position = 'dodge') +
1511121368943:xlab("Routes") + ylab('Trips') + labs(subtitle = sub.title)
1511121389164:trips.by.routes <- head(trips.by.routes, 10)
1511121389165:qplot(x=reorder(route_short_name, -trip_count),
1511121389166:y=trip_count, data = trips.by.routes,
1511121389168:geom = 'blank', main = 'Trips by services') +
1511121389169:geom_bar(stat='identity', position = 'dodge') +
1511121389169:xlab("Routes") + ylab('Trips') + labs(subtitle = sub.title)
1511121402957:mean.trip.count <- round(mean(trips.by.routes$trip_count), 2)
1511121402958:sub.title <- paste("Mean trips per route is", mean.trip.count)
1511121402959:trips.by.routes <- head(trips.by.routes, 10)
1511121402960:qplot(x=reorder(route_short_name, -trip_count),
1511121402962:y=trip_count, data = trips.by.routes,
1511121402963:geom = 'blank', main = 'Trips by services') +
1511121402964:geom_bar(stat='identity', position = 'dodge') +
1511121402965:xlab("Routes") + ylab('Trips') + labs(subtitle = sub.title)
1511121414132:View(trips.by.routes)
1511121427900:trips.by.routes <- trips %>%
1511121427901:inner_join(routes, by="route_id") %>%
1511121427902:group_by(route_id, route_short_name, route_long_name, service_id) %>%
1511121427902:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511121427903:ungroup() %>%
1511121427903:arrange(-trip_count) %>%
1511121427903:select(route_short_name, trip_count)
1511121427933:mean.trip.count <- round(mean(trips.by.routes$trip_count), 2)
1511121427936:sub.title <- paste("Mean trips per route is", mean.trip.count)
1511121427937:trips.by.routes <- head(trips.by.routes, 10)
1511121427938:qplot(x=reorder(route_short_name, -trip_count),
1511121427939:y=trip_count, data = trips.by.routes,
1511121427940:geom = 'blank', main = 'Trips by services') +
1511121427940:geom_bar(stat='identity', position = 'dodge') +
1511121427941:xlab("Routes") + ylab('Trips') + labs(subtitle = sub.title)
1511121447824:PlotTripsByRoutes <- function (trips, routes) {
1511121447825:trips.by.routes <- trips %>%
1511121447826:inner_join(routes, by="route_id") %>%
1511121447826:group_by(route_id, route_short_name, route_long_name, service_id) %>%
1511121447827:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511121447827:ungroup() %>%
1511121447827:arrange(-trip_count) %>%
1511121447829:select(route_short_name, trip_count)
1511121447829:mean.trip.count <- round(mean(trips.by.routes$trip_count), 2)
1511121447830:sub.title <- paste("Mean trips per route is", mean.trip.count)
1511121447830:trips.by.routes <- head(trips.by.routes, 10)
1511121447830:qplot(x=reorder(route_short_name, -trip_count),
1511121447831:y=trip_count, data = trips.by.routes,
1511121447831:geom = 'blank', main = 'Trips by services') +
1511121447832:geom_bar(stat='identity', position = 'dodge') +
1511121447832:xlab("Routes") + ylab('Trips') + labs(subtitle = sub.title)
1511121447832:}
1511121479351:trips.by.routes <- trips %>%
1511121479352:inner_join(routes, by="route_id") %>%
1511121479352:group_by(route_id, route_short_name, route_long_name) %>%
1511121479353:filter(service_id == 1) %>%
1511121479354:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511121479355:ungroup() %>%
1511121479355:arrange(-trip_count) %>%
1511121479355:select(route_short_name, trip_count)
1511121479414:mean.trip.count <- round(mean(trips.by.routes$trip_count), 2)
1511121479415:sub.title <- paste("Mean trips per route is", mean.trip.count)
1511121479416:trips.by.routes <- head(trips.by.routes, 10)
1511121479417:qplot(x=reorder(route_short_name, -trip_count),
1511121479419:y=trip_count, data = trips.by.routes,
1511121479419:geom = 'blank', main = 'Trips by services') +
1511121479419:geom_bar(stat='identity', position = 'dodge') +
1511121479420:xlab("Routes") + ylab('Trips') + labs(subtitle = sub.title)
1511121489414:PlotTripsByRoutes <- function (trips, routes) {
1511121489414:trips.by.routes <- trips %>%
1511121489415:inner_join(routes, by="route_id") %>%
1511121489416:group_by(route_id, route_short_name, route_long_name) %>%
1511121489416:filter(service_id == 1) %>%
1511121489416:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511121489417:ungroup() %>%
1511121489417:arrange(-trip_count) %>%
1511121489418:select(route_short_name, trip_count)
1511121489418:mean.trip.count <- round(mean(trips.by.routes$trip_count), 2)
1511121489419:sub.title <- paste("Mean trips per route is", mean.trip.count)
1511121489419:trips.by.routes <- head(trips.by.routes, 10)
1511121489420:qplot(x=reorder(route_short_name, -trip_count),
1511121489421:y=trip_count, data = trips.by.routes,
1511121489422:geom = 'blank', main = 'Trips by services') +
1511121489424:geom_bar(stat='identity', position = 'dodge') +
1511121489425:xlab("Routes") + ylab('Trips') + labs(subtitle = sub.title)
1511121489426:}
1511122508633:trips.by.services <- trips %>%
1511122508635:group_by(service_id) %>%
1511122508636:summarise(trip_count=sum(!is.na(trip_id)))
1511122511389:routes.by.services <- trips %>%
1511122511389:group_by(service_id, route_id) %>%
1511122511390:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511122511391:summarise(route_count=sum(!is.na(route_id)))
1511122549646:trips.by.services <- trips %>%
1511122549648:group_by(service_id) %>%
1511122549648:summarise(trip_count=sum(!is.na(trip_id)))
1511122549653:routes.by.services <- trips %>%
1511122549654:group_by(service_id, route_id) %>%
1511122549655:summarise(trip_count=sum(!is.na(trip_id))) %>%
1511122549655:summarise(route_count=sum(!is.na(route_id)))
1511122549679:services.summary <- inner_join(trips.by.services,
1511122549679:routes.by.services,
1511122549680:by='service_id')
1511122635280:View(services.summary)
1511122638359:services.summary <- melt(services.summary, id.vars = service_id)
1511122644381:services.summary <- melt(services.summary, id.vars = 'service_id')
1511122736379:qplot(x=reorder(service_id, -value),
1511122736382:y=value, data=services.summary,
1511122736383:fgeom = 'blank', main = 'Routes and trips by services') +
1511122736385:geom_bar(stat = 'identity', position = 'dodge') +
1511122736386:xlab("Services") + ylab('Count')
1511122745672:qplot(x=reorder(service_id, -value),
1511122745674:y=value, data=services.summary,
1511122745675:geom = 'blank', main = 'Routes and trips by services') +
1511122745676:geom_bar(stat = 'identity', position = 'dodge') +
1511122745677:xlab("Services") + ylab('Count')
1511122779800:qplot(x=reorder(service_id, -value),
1511122779802:y=value, data=services.summary,
1511122779803:geom = 'blank', main = 'Routes and trips by services') +
1511122779804:geom_bar(stat = 'identity', position = 'dodge') +
1511122779804:xlab("Services") + ylab('Count') + facet_grid(. ~ variable)
1511123098419:PlotTripsByRoutes(trips, routes)
1511123213709:# b) Routes by distances covered
1511123213711:# Direction of the trip and service should be factored in before trying to
1511123213711:# find the mean distance covered.
1511123213712:# Distance covered in each shape is summarised.
1511123213712:shapes.and.distances <- shapes %>%
1511123213714:group_by(shape_id) %>%
1511123213714:summarise(total_distance=max(shape_dist_traveled))
1511123213731:routes.and.distances <- trips %>%
1511123213732:inner_join(routes, by='route_id') %>%
1511123213733:inner_join(shapes.and.distances, by='shape_id') %>%
1511123213733:group_by(route_short_name, service_id, direction_id) %>%
1511123213735:summarise(distance_covered=mean(total_distance))
1511123222070:View(routes.and.distances)
1511123270576:shapes.and.distances <- shapes %>%
1511123270577:group_by(shape_id) %>%
1511123270578:summarise(total_distance=max(shape_dist_traveled))
1511123270594:routes.and.distances <- trips %>%
1511123270595:inner_join(routes, by = 'route_id') %>%
1511123270596:inner_join(shapes.and.distances, by = 'shape_id') %>%
1511123270598:group_by(route_short_name, direction_id) %>%
1511123270599:filter(service_id == 1)
1511123270626:summarise(distance_covered=mean(total_distance))
1511123288083:shapes.and.distances <- shapes %>%
1511123288085:group_by(shape_id) %>%
1511123288086:summarise(total_distance=max(shape_dist_traveled))
1511123301159:routes.and.distances <- trips %>%
1511123301160:inner_join(routes, by = 'route_id') %>%
1511123301161:inner_join(shapes.and.distances, by = 'shape_id') %>%
1511123301161:group_by(route_short_name, direction_id) %>%
1511123301161:filter(service_id == 1) %>%
1511123301162:summarise(distance_covered=mean(total_distance))
1511123313878:View(routes.and.distances)
1511123347524:sum(routes.and.distances$direction_id == 1)
1511123351904:sum(routes.and.distances$direction_id == 0)
1511123382654:routes.and.distances
1511123419951:routes.and.distances <- trips %>%
1511123419952:inner_join(routes, by = 'route_id') %>%
1511123419953:inner_join(shapes.and.distances, by = 'shape_id') %>%
1511123419953:group_by(route_short_name, direction_id) %>%
1511123419954:filter(service_id == 1) %>%
1511123419955:summarise(distance_covered = mean(total_distance)) %>%
1511123419955:summarise(distance_covered = mean(distance_covered))
1511123423821:View(routes.and.distances)
1511123441757:routes.and.distances <- trips %>%
1511123441758:inner_join(routes, by = 'route_id') %>%
1511123441759:inner_join(shapes.and.distances, by = 'shape_id') %>%
1511123441759:group_by(route_short_name, direction_id) %>%
1511123441760:filter(service_id == 1) %>%
1511123441760:summarise(distance_covered = mean(total_distance)) %>%
1511123441760:summarise(distance_covered = round(mean(distance_covered), 2))
1511125414382:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1511125414428:colnames(employment.trends) <- tolower(colnames(employment.trends))
1511125414430:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125414431:xlab="Quarterly Figures", ylab="Trend",
1511125414431:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125414432:facet_grid(. ~ sector)
1511125527979:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1511125527986:colnames(employment.trends) <- tolower(colnames(employment.trends))
1511125527987:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125527987:xlab="Quarterly Figures", ylab="Trend",
1511125527988:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125527989:facet_grid(. ~ sector) + theme(axis.text.x = element_text(angle=90))
1511125537711:employment.trends <- read_delim("dublin employment trends.txt", delim=':')
1511125537721:colnames(employment.trends) <- tolower(colnames(employment.trends))
1511125537722:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125537724:xlab="Quarterly Figures", ylab="Trend",
1511125537727:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125537730:facet_grid(. ~ sector) + theme(axis.text.x = element_text(angle=-90))
1511125590970:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125590972:xlab="Quarterly Figures", ylab="Trend",
1511125590973:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125590974:facet_grid(. ~ sector) + theme(axis.text.y = element_text(angle=-45))
1511125624455:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125624458:xlab="Quarterly Figures", ylab="Trend",
1511125624459:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125624460:facet_grid(. ~ sector) + theme(axis.title.y = element_text(angle=90))
1511125639897:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125639900:xlab="Quarterly Figures", ylab="Trend",
1511125639902:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125639904:facet_grid(. ~ sector) + theme(axis.title.y = element_text(angle=45))
1511125656129:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125656131:xlab="Quarterly Figures", ylab="Trend",
1511125656132:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125656133:facet_grid(. ~ sector) + theme(axis.title.y = element_text(angle=-90))
1511125685752:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125685754:xlab="Quarterly Figures", ylab="Trend",
1511125685755:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125685757:facet_grid(. ~ sector) + theme(axis.title.y = element_text(angle=180))
1511125697659:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125697661:xlab="Quarterly Figures", ylab="Trend",
1511125697663:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125697665:facet_grid(. ~ sector) + theme(axis.title.y = element_text(angle=0))
1511125711992:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125711995:xlab="Quarterly Figures", ylab="Trend",
1511125711996:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125711997:facet_grid(. ~ sector) + theme(axis.title.y = element_text(angle=0, hjust=0, vjust=1))
1511125722084:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511125722085:xlab="Quarterly Figures", ylab="Trend",
1511125722086:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511125722087:facet_grid(. ~ sector) + theme(axis.title.y = element_text(angle=0, hjust=1, vjust=0))
1511125745439:?element_text
1511130006827:calendar <- melt(calendar, id.vars = 'service_id')
1511130006943:colnames(calendar) <- c('service_id', 'day', 'availability')
1511130006944:calendar <- calendar %>%
1511130006945:filter(availability == 1) %>%
1511130006946:select(-availability)
1511130028834:route.40d <- routes %>%
1511130028835:filter(route_short_name == '40D') %>%
1511130028836:inner_join(trips, by = 'route_id') %>%
1511130028837:inner_join(stop.times, by = 'trip_id') %>%
1511130028837:inner_join(stops, by = 'stop_id') %>%
1511130028838:inner_join(shapes.and.distances, by = 'shape_id')
1511130033188:route.40d.days <- route.40d %>%
1511130033189:inner_join(calendar, by = 'service_id')
1511130049156:View(route.40d.days)
1511130220743:route.40d <- filter(routes, route_short_name == route.short.name)
1511130227750:route.short.name <- '40D'
1511130229012:route.40d <- filter(routes, route_short_name == route.short.name)
1511130234713:View(route.40d)
1511132053048:route.40d <- routes %>%
1511132053054:filter(route_short_name == '40D') %>%
1511132053055:inner_join(trips, by = 'route_id') %>%
1511132053056:inner_join(stop.times, by = 'trip_id') %>%
1511132053058:inner_join(stops, by = 'stop_id') %>%
1511132053059:inner_join(shapes.and.distances, by = 'shape_id')
1511132057943:route.40d.days <- route.40d %>%
1511132057943:inner_join(calendar, by = 'service_id')
1511132072751:unique(route.40d.days$service_id)
1511132085786:unique(route.40d.days$stop_headsign)
1511132135140:mean.distances.to.fro <- route.40d %>%
1511132135140:group_by(stop_headsign) %>%
1511132135141:summarise(mean_distance = round(mean(total_distance), 2))
1511132138635:mean.times.to.from <- route.40d.trips %>%
1511132138636:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511132144026:route.40d.trips <- route.40d %>%
1511132144026:group_by(stop_headsign, trip_id) %>%
1511132144027:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511132144028:travel_time_in_mins = (end_time-start_time) / 60) %>%
1511132144028:filter(!is.na(travel_time_in_mins))
1511132144064:mean.times.to.from <- route.40d.trips %>%
1511132144065:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511132149386:View(mean.distances.to.fro)
1511132150735:View(mean.times.to.from)
1511132251735:unique(route.40d.days$service_id)
1511132697919:route.40d.trips <- route.40d %>%
1511132697920:group_by(direction_id, stop_headsign, trip_id) %>%
1511132697920:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511132697921:travel_time_in_mins = (end_time-start_time) / 60) %>%
1511132697921:filter(!is.na(travel_time_in_mins))
1511132697950:mean.times.to.from <- route.40d.trips %>%
1511132697950:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)),
1511132697951:mean_distance = round(mean(total_distance), 2))
1511132720624:View(mean.times.to.from)
1511132808432:route.40d.trips <- route.40d %>%
1511132808435:group_by(direction_id, stop_headsign, trip_id) %>%
1511132808436:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511132808437:travel_time_in_mins = (end_time-start_time) / 60,
1511132808438:mean_distance = round(mean(total_distance), 2)) %>%
1511132808440:filter(!is.na(travel_time_in_mins))
1511132808476:mean.times.to.from <- route.40d.trips %>%
1511132808476:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511132816455:View(mean.times.to.from)
1511132841597:View(route.40d.trips)
1511132954399:route.40d.trips <- route.40d %>%
1511132954404:group_by(direction_id, stop_headsign, trip_id) %>%
1511132954405:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511132954405:travel_time_in_mins = (end_time-start_time) / 60,
1511132954406:mean_distance = round(mean(total_distance), 2)) %>%
1511132954406:filter(!is.na(travel_time_in_mins)) %>%
1511132954406:group_by(mean_distance)
1511132954441:mean.times.to.from <- route.40d.trips %>%
1511132954441:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511132957786:View(mean.times.to.from)
1511132978587:route.40d.trips <- route.40d %>%
1511132978588:group_by(direction_id, stop_headsign, trip_id) %>%
1511132978588:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511132978589:travel_time_in_mins = (end_time-start_time) / 60,
1511132978589:mean_distance = round(mean(total_distance), 2)) %>%
1511132978590:filter(!is.na(travel_time_in_mins)) %>%
1511132978590:group_by(direction_id, stop_headsign, mean_distance)
1511132978631:mean.times.to.from <- route.40d.trips %>%
1511132978631:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511132981347:View(mean.times.to.from)
1511133063207:route.40d.trips <- route.40d %>%
1511133063208:group_by(direction_id, stop_headsign, trip_id) %>%
1511133063209:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511133063209:travel_time_in_mins = (end_time-start_time) / 60) %>%
1511133063210:filter(!is.na(travel_time_in_mins)) %>%
1511133063210:summarise(mean_distance = round(mean(total_distance), 2)) %>%
1511133063210:group_by(direction_id, stop_headsign, mean_distance)
1511133063243:mean.times.to.from <- route.40d.trips %>%
1511133063243:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511133121541:route.40d.trips <- route.40d %>%
1511133121542:group_by(direction_id, stop_headsign, trip_id) %>%
1511133121542:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511133121543:travel_time_in_mins = (end_time-start_time) / 60) %>%
1511133121543:filter(!is.na(travel_time_in_mins))
1511133121571:mean.times.to.from <- route.40d.trips %>%
1511133121571:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511133123188:View(mean.times.to.from)
1511133168226:40d.mean.summary <- inner_join(mean.times.to.fro, mean.distances.to.fro, by="stop_headsign")
1511133181433:route.40d.mean.summary <- inner_join(mean.times.to.fro, mean.distances.to.fro,
1511133181433:by="stop_headsign")
1511133186957:mean.times.to.fro <- route.40d.trips %>%
1511133186958:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511133186963:route.40d.mean.summary <- inner_join(mean.times.to.fro, mean.distances.to.fro,
1511133186964:by="stop_headsign")
1511133205486:View(route.40d.mean.summary)
1511133296961:rownames(route.40d.mean.summary) <- route.40d.mean.summary$stop_headsign
1511133308715:route.40d.mean.summary <- data.frame(route.40d.mean.summary)
1511133310430:rownames(route.40d.mean.summary) <- route.40d.mean.summary$stop_headsign
1511133314734:View(route.40d.mean.summary)
1511133348483:route.40d.mean.summary['Parnell St.']
1511133354463:route.40d.mean.summary['Parnell St.',]
1511133363059:route.40d.mean.summary['Parnell St',]
1511133418605:route.40d.mean.summary['Parnell St', 'direction_id']
1511133450127:route.40d.mean.summary <- inner_join(mean.times.to.fro, mean.distances.to.fro,
1511133450130:by="stop_headsign")
1511133453161:rownames(route.40d.mean.summary) <- route.40d.mean.summary$stop_headsign
1511133456650:route.40d.mean.summary['Parnell St', 'direction_id']
1511133464522:route.40d.mean.summary['Parnell St',]
1511133672426:xxx <- group_by(trips, stop_headsign)
1511133678860:xxx <- group_by(trips, by='stop_headsign')
1511133714977:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511133726613:trips
1511133736585:View(xxx)
1511133751322:xxx <- group_by(trips, 'stop_headsign')
1511133769459:xxx <- group_by(stop.times, by='stop_headsign')
1511133804197:xxx <- group_by(stop.times, by=c('trip_id', 'stop_headsign'))
1511133819495:xxx <- group_by(stop.times, 'trip_id', 'stop_headsign')
1511133826376:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511133835243:View(stop.times)
1511133857670:xxx <- group_by(stop.times, 'trip_id', 'stop_headsign')
1511133869220:xxx <- group_by(stop.times, trip_id, stop_headsign)
1511133873669:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511133884656:View(xxx)
1511133913292:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511133919978:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511133931276:xxx <- group_by(stop.times, trip_id, stop_headsign)
1511133938829:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511133944254:View(xxx)
1511133963579:View(routes)
1511133966923:View(stop.times)
1511133995573:xxx <- inner_join(xxx, trips, by='trip_id')
1511133997750:View(xxx)
1511134024960:xxx <- group_by(xxx, route_id)
1511134030120:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511134033697:View(xxx)
1511134059742:xxx <- group_by(stop.times, trip_id, stop_headsign)
1511134061986:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511134072492:xxx <- inner_join(xxx, trips, by='trip_id')
1511134088436:xxx <- group_by(xxx, route_id, stop_headsign)
1511134091144:View(xxx)
1511134099721:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511134111402:xxx <- summarise(xxx, sh_count=sum(!is.na(trip_id)))
1511134122215:xxx <- summarise(xxx, sh_count=sum(!is.na(stop_headsign)))
1511134269975:View(route.40d.days)
1511134291962:unique(route.40d.days$shape_id)
1511137068883:View(trips)
1511137077418:View(route.40d.days)
1511137082867:View(route.40d)
1511137169373:sum(route.40d$stop_sequence==46)
1511137171732:sum(route.40d$stop_sequence==45)
1511137174631:sum(route.40d$stop_sequence==46)
1511137177207:sum(route.40d$stop_sequence==44)
1511137184303:sum(route.40d$stop_sequence==43)
1511137186617:sum(route.40d$stop_sequence==42)
1511137188268:sum(route.40d$stop_sequence==41)
1511137190449:sum(route.40d$stop_sequence==40)
1511137326065:day.wise.40d <- route.40d.days %>%
1511137326066:group_by(day, trip_id) %>%
1511137326067:summarise(trip_count = sum(!is.na(trip_id)))
1511137350194:length(unique(route.40d$trip_id))
1511137365715:View(day.wise.40d)
1511137382591:day.wise.40d <- route.40d.days %>%
1511137382592:group_by(day, trip_id) %>%
1511137382592:summarise(trip_count = sum(!is.na(trip_id))) %>%
1511137382593:summarise(trip_count = sum(!is.na(trip_id)))
1511137384689:View(day.wise.40d)
1511138141023:qplot(x=day, y=trip_count, data = day.wise.40d,
1511138141025:geom = 'blank', main = '40D - Trips per day') +
1511138141025:geom_bar(stat='identity', position = 'dodge') +
1511138141026:xlab("Days") + ylab('Trips')
1511138226497:PlotDayWiseTrips <- function (route.40d.days) {
1511138226497:day.wise.40d <- route.40d.days %>%
1511138226498:group_by(day, trip_id) %>%
1511138226499:summarise(trip_count = sum(!is.na(trip_id))) %>%
1511138226499:summarise(trip_count = sum(!is.na(trip_id)))
1511138226500:qplot(x=day, y=trip_count, data = day.wise.40d,
1511138226501:geom = 'blank', main = '40D - Trips per day') +
1511138226502:geom_bar(stat='identity', position = 'dodge') +
1511138226503:xlab("Days") + ylab('Trips')
1511138226504:}
1511138411074:route.40d <- routes %>%
1511138411075:filter(route_short_name == '40D') %>%
1511138411076:inner_join(trips, by = 'route_id') %>%
1511138411077:inner_join(stop.times, by = 'trip_id') %>%
1511138411078:inner_join(stops, by = 'stop_id') %>%
1511138411078:inner_join(shapes.and.distances, by = 'shape_id') %>%
1511138411079:arrange(route_id, trip_id)
1511138435263:route.40d <- routes %>%
1511138435263:filter(route_short_name == '40D') %>%
1511138435264:inner_join(trips, by = 'route_id') %>%
1511138435265:inner_join(stop.times, by = 'trip_id') %>%
1511138435265:inner_join(stops, by = 'stop_id') %>%
1511138435265:inner_join(shapes.and.distances, by = 'shape_id') %>%
1511138435266:arrange(route_id, trip_id, stop_sequence)
1511138970763:View(route.40d.trips)
1511139037568:route.40d.trips <- route.40d %>%
1511139037570:group_by(direction_id, stop_headsign, trip_id, total_distance) %>%
1511139037571:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511139037572:travel_time_in_mins = (end_time-start_time) / 60) %>%
1511139037573:filter(!is.na(travel_time_in_mins))
1511139116560:View(route.40d.trips)
1511139127977:View(route.40d.trips)
1511139183755:speed.40d <- route.40d.trips %>%
1511139183755:mutate(speed = total_distance / travel_time_in_mins)
1511139198178:speed.40d <- route.40d.trips %>%
1511139198180:mutate(speed = total_distance / as.integer(travel_time_in_mins))
1511139201758:View(speed.40d)
1511139237684:speed.40d <- route.40d.trips %>%
1511139237684:mutate(speed = (total_distance * 18) / (as.integer(travel_time_in_mins) * 5))
1511139246427:speed.40d <- route.40d.trips %>%
1511139246428:mutate(kmph = (total_distance * 18) / (as.integer(travel_time_in_mins) * 5))
1511139250930:View(speed.40d)
1511139321443:speed.40d <- route.40d.trips %>%
1511139321444:mutate(kmph = (total_distance * 3) / (as.integer(travel_time_in_mins) * 50))
1511139336428:speed.40d <- route.40d.trips %>%
1511139336429:mutate(kmph = (total_distance * 3) / (as.integer(travel_time_in_mins) * 50))
1511139431951:speed.40d <- route.40d.trips %>%
1511139431952:mutate(kmph = (total_distance * 3) /
1511139431954:(as.integer(travel_time_in_mins) * 50)) %>%
1511139431955:mutate(kmph = round(kmph, 2))
1511139541654:speed.40d$end_time > '10:00:00'
1511139582560:speed.40d$end_time > strptime('10:00:00')
1511139598617:speed.40d$end_time > strptime('10:00:00', format = '%H:%M:%S')
1511139613288:strptime("10:00:00", format = "%H:%M:%S")
1511139634644:time(strptime("10:00:00", format = "%H:%M:%S"))
1511139640732:require(lubridate)
1511139665178:time_length(strptime("10:00:00", format = "%H:%M:%S"))
1511139876473:qplot(start_time, kmph, data=speed.40d)
1511139964161:route.40d.trips <- route.40d %>%
1511139964162:group_by(service_id, direction_id, stop_headsign, trip_id, total_distance) %>%
1511139964163:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511139964163:travel_time_in_mins = (end_time-start_time) / 60) %>%
1511139964164:filter(!is.na(travel_time_in_mins))
1511139964195:mean.times.to.fro <- route.40d.trips %>%
1511139964196:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511139964211:route.40d.mean.summary <- inner_join(mean.times.to.fro, mean.distances.to.fro,
1511139964212:by="stop_headsign")
1511139964216:route.40d.mean.summary <- data.frame(route.40d.mean.summary)
1511139964217:rownames(route.40d.mean.summary) <- route.40d.mean.summary$stop_headsign
1511139971017:route.40d.trips <- route.40d %>%
1511139971018:group_by(service_id, direction_id, stop_headsign, trip_id, total_distance) %>%
1511139971020:summarise(start_time = min(arrival_time), end_time = max(arrival_time),
1511139971021:travel_time_in_mins = (end_time-start_time) / 60) %>%
1511139971022:filter(!is.na(travel_time_in_mins))
1511139971071:mean.times.to.fro <- route.40d.trips %>%
1511139971072:summarise(mean_travel_time_in_mins=round(mean(travel_time_in_mins)))
1511139971083:route.40d.mean.summary <- inner_join(mean.times.to.fro, mean.distances.to.fro,
1511139971083:by="stop_headsign")
1511139971086:route.40d.mean.summary <- data.frame(route.40d.mean.summary)
1511139981401:speed.40d <- route.40d.trips %>%
1511139981404:mutate(kmph = (total_distance * 3) /
1511139981404:(as.integer(travel_time_in_mins) * 50)) %>%
1511139981406:mutate(kmph = round(kmph, 2))
1511139981425:mutate(time_bucket = ClassifyEndTime(end_time))
1511139986952:speed.40d <- route.40d.trips %>%
1511139986954:mutate(kmph = (total_distance * 3) /
1511139986955:(as.integer(travel_time_in_mins) * 50)) %>%
1511139986956:mutate(kmph = round(kmph, 2))
1511139995957:qplot(start_time, kmph, data=speed.40d)
1511140010166:View(speed.40d)
1511140051573:qplot(start_time, kmph, data=speed.40d) + facet_grid(. ~ service_id)
1511140297498:qplot(end_time, kmph, data=speed.40d) + facet_grid(. ~ service_id)
1511140324729:qplot(start_time, kmph, data=speed.40d) + facet_grid(. ~ service_id)
1511140621792:ClassifyEndTime <- function (start.time) {
1511140621792:start.time <- strptime(as.character(start.time), format = "%H:%M:%S")
1511140621793:bucket <- '6 to 9'
1511140621793:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511140621794:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511140621794:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511140621794:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511140621795:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511140621795:if (start.time < kNineAm)
1511140621797:bucket <- '6 AM to 9 AM'
1511140621797:else if (start.time < kNoon)
1511140621798:bucket <- '9 AM to Noon'
1511140621799:else if (start.time < kThreePm)
1511140621799:bucket <- 'Noon to 3 PM'
1511140621800:else if (start.time < kSixPm)
1511140621800:bucket <- '3 PM to 6 PM'
1511140621800:else if (start.time < kNinePm)
1511140621801:bucket <- '6 PM to 9 PM'
1511140621801:else
1511140621802:bucket <- '9 PM +'
1511140621803:return(bucket)
1511140621804:}
1511140636839:speed.40d <- route.40d.trips %>%
1511140636841:mutate(kmph = (total_distance * 3) /
1511140636842:(as.integer(travel_time_in_mins) * 50)) %>%
1511140636843:mutate(kmph = round(kmph, 2)) %>%
1511140636844:mutate(time_bucket = ClassifyEndTime(start_time)
1511140643314:)
1511140649622:View(speed.40d)
1511140722556:speed.by.time.bucket <- speed.40d %>%
1511140722557:group_by(time_bucket) %>%
1511140722558:summarise(average_kmph = mean(kmph))
1511140725792:View(speed.by.time.bucket)
1511140747021:View(speed.40d)
1511140767591:speed.by.time.bucket <- speed.40d %>%
1511140767592:group_by(service_id, time_bucket) %>%
1511140767593:summarise(average_kmph = mean(kmph))
1511140769563:View(speed.by.time.bucket)
1511140862303:View(calendar)
1511140937145:speed.by.time.bucket <- speed.40d %>%
1511140937147:group_by(service_id, time_bucket) %>%
1511140937148:summarise(average_kmph = mean(kmph)) %>%
1511140937148:mutate(service = ifelse(service_id == 1, 'Service 1 - Weekdays',
1511140937149:ifelse(service_id == 2,
1511140937149:'Service 2 - Sunday & Monday',
1511140937149:'Service 3 - Saturday')))
1511140944926:View(speed.by.time.bucket)
1511141103648:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket,
1511141103649:geom = 'blank', main = '40D - Speed at different times of the day.') +
1511141103649:geom_bar(stat='identity', position = 'dodge') +
1511141103650:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141131135:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket,
1511141131136:geom = 'line', main = '40D - Speed at different times of the day.') +
1511141131137:# geom_bar(stat='identity', position = 'dodge') +
1511141131137:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141153078:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket,
1511141153079:geom = 'point', main = '40D - Speed at different times of the day.') +
1511141153080:# geom_bar(stat='identity', position = 'dodge') +
1511141153082:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141178033:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket,
1511141178034:geom = 'smooth', main = '40D - Speed at different times of the day.') +
1511141178035:# geom_bar(stat='identity', position = 'dodge') +
1511141178035:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141184000:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket,
1511141184001:geom = 'point', main = '40D - Speed at different times of the day.') +
1511141184001:# geom_bar(stat='identity', position = 'dodge') +
1511141184002:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141258687:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket,
1511141258689:geom = 'line', main = '40D - Speed at different times of the day.') +
1511141258689:# geom_bar(stat='identity', position = 'dodge') +
1511141258691:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141267056:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket,
1511141267057:geom = 'line', main = '40D - Speed at different times of the day.') +
1511141267058:# geom_bar(stat='identity', position = 'dodge') +
1511141267058:xlab("Time") + ylab('Speed (in kmph)')
1511141390872:qplot(x=start_time, y=average_kmph, colour=time_bucket, data = speed.by.time.bucket,
1511141390874:geom = 'point', main = '40D - Speed at different times of the day.') +
1511141390874:# geom_bar(stat='identity', position = 'dodge') +
1511141390874:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141416162:View(speed.by.time.bucket)
1511141471177:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141471178:geom = 'line', main = '40D - Speed at different times of the day.') +
1511141471178:# geom_bar(stat='identity', position = 'dodge') +
1511141471179:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141628322:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141628324:geom = 'point', main = '40D - Speed at different times of the day.') +
1511141628325:geom_line(aes(group = 1))
1511141628525:# geom_bar(stat='identity', position = 'dodge') +
1511141628526:xlab("Time") + ylab('Speed (in kmph)')
1511141641690:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141641691:geom = 'point', main = '40D - Speed at different times of the day.') +
1511141641692:geom_line(aes(group = 1)) +
1511141641692:# geom_bar(stat='identity', position = 'dodge') +
1511141641693:xlab("Time") + ylab('Speed (in kmph)')
1511141681637:?geom_line
1511141817026:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141817027:geom = 'point', main = '40D - Speed at different times of the day.') +
1511141817029:geom_line(aes(group = 1, stat='identity', position = 'dodge')) +
1511141817030:# geom_bar(stat='identity', position = 'dodge') +
1511141817031:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141834360:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141834363:geom = 'point', main = '40D - Speed at different times of the day.') +
1511141834363:geom_line(aes(group = 1)) +
1511141834364:# geom_bar(stat='identity', position = 'dodge') +
1511141834365:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141845055:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141845055:geom = 'blank', main = '40D - Speed at different times of the day.') +
1511141845056:geom_line(aes(group = 1)) +
1511141845056:# geom_bar(stat='identity', position = 'dodge') +
1511141845057:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141858983:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141858984:geom = 'blank', main = '40D - Speed at different times of the day.') +
1511141858985:geom_line(aes(group = 1)) +
1511141858988:geom_bar(stat='identity', position = 'dodge') +
1511141858988:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141892777:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141892777:geom = 'blank', main = '40D - Speed at different times of the day.') +
1511141892778:geom_line(aes(group = 1)) +
1511141892779:geom_bar(stat='identity', position = 'dodge', alpha=0.1) +
1511141892779:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511141901162:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511141901162:geom = 'blank', main = '40D - Speed at different times of the day.') +
1511141901163:geom_line(aes(group = 1)) +
1511141901163:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511141901164:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service)
1511142105355:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142105356:geom = 'blank', main = '40D - Speed at different times of the day.') +
1511142105357:geom_line(aes(group = 1)) +
1511142105358:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142105359:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142105361:theme(axis.text.x = element_text(angle=90))
1511142440848:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511142440851:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511142440851:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511142440853:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511142440854:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511142440856:kBucket1 <- '6 AM to 9 AM'
1511142440857:kBucket2 <- '9 AM to Noon'
1511142440858:kBucket3 <- 'Noon to 3 PM'
1511142440860:kBucket4 <- '3 PM to 6 PM'
1511142440860:kBucket5 <- '6 PM to 9 PM'
1511142440861:kBucket6 <- '9 PM +'
1511142449541:ClassifyEndTime <- function (start.time) {
1511142449542:start.time <- strptime(as.character(start.time), format = "%H:%M:%S")
1511142449543:bucket <- '6 to 9'
1511142449543:if (start.time < kNineAm)
1511142449544:bucket <- kBucket1
1511142449544:else if (start.time < kNoon)
1511142449545:bucket <- kBucket2
1511142449546:else if (start.time < kThreePm)
1511142449547:bucket <- kBucket3
1511142449549:else if (start.time < kSixPm)
1511142449550:bucket <- kBucket4
1511142449551:else if (start.time < kNinePm)
1511142449551:bucket <- kBucket5
1511142449552:else
1511142449553:bucket <- kBucket6
1511142449553:return(bucket)
1511142449554:}
1511142455384:speed.40d <- route.40d.trips %>%
1511142455385:mutate(kmph = (total_distance * 3) /
1511142455385:(as.integer(travel_time_in_mins) * 50)) %>%
1511142455386:mutate(kmph = round(kmph, 2)) %>%
1511142455386:mutate(time_bucket = ClassifyEndTime(start_time))
1511142455571:speed.40d$time_bucket <- factor(speed.40d$time_bucket,
1511142455572:levels = c(kBucket1, kBucket2, kBucket3,
1511142455573:kBucket4, kBucket5, kBucket6))
1511142460535:speed.by.time.bucket <- speed.40d %>%
1511142460536:group_by(service_id, time_bucket) %>%
1511142460537:summarise(average_kmph = mean(kmph)) %>%
1511142460538:mutate(service = ifelse(service_id == 1, 'Service 1 - Weekdays',
1511142460538:ifelse(service_id == 2,
1511142460539:'Service 2 - Sunday & Monday',
1511142460542:'Service 3 - Saturday')))
1511142460550:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142460551:geom = 'blank', main = '40D - Speed at different times of the day.') +
1511142460553:geom_line(aes(group = 1)) +
1511142460554:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142460554:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142460555:theme(axis.text.x = element_text(angle=90))
1511142494659:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142494660:geom = 'blank', main = '40D - Mean speed at different times of the day.') +
1511142494661:geom_line(aes(group = 1)) +
1511142494661:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142494661:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142494662:theme(axis.text.x = element_text(angle=90))
1511142527829:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142527831:geom = 'blank', main = '40D - Mean speed at different times of the day.') +
1511142527831:geom_line(aes(group = 1)) +
1511142527834:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142527834:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142527834:theme(axis.text.x = element_text(angle=90)) +
1511142527835:theme(axis.title.y = element_text(angle=0))
1511142763743:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142763748:geom = 'blank', main = '40D - Mean speed at different times of the day.') +
1511142763749:geom_line(aes(group = 1)) +
1511142763750:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142763751:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142763751:theme(axis.text.x = element_text(angle=90)) +
1511142763752:theme(axis.title.y = element_text(angle=0, lineheight = 0))
1511142776812:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142776813:geom = 'blank', main = '40D - Mean speed at different times of the day.') +
1511142776813:geom_line(aes(group = 1)) +
1511142776814:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142776814:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142776814:theme(axis.text.x = element_text(angle=90)) +
1511142776815:theme(axis.title.y = element_text(angle=0, vjust = 0))
1511142781917:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142781921:geom = 'blank', main = '40D - Mean speed at different times of the day.') +
1511142781922:geom_line(aes(group = 1)) +
1511142781923:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142781923:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142781925:theme(axis.text.x = element_text(angle=90)) +
1511142781925:theme(axis.title.y = element_text(angle=0, vjust = 1))
1511142787103:qplot(x=time_bucket, y=average_kmph, data = speed.by.time.bucket, group=time_bucket,
1511142787104:geom = 'blank', main = '40D - Mean speed at different times of the day.') +
1511142787104:geom_line(aes(group = 1)) +
1511142787105:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511142787105:xlab("Time") + ylab('Speed (in kmph)') + facet_grid(. ~ service) +
1511142787106:theme(axis.text.x = element_text(angle=90)) +
1511142787106:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142806348:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511142806350:xlab="Quarterly Figures", ylab="Trend",
1511142806351:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511142806353:facet_grid(. ~ sector) +
1511142806353:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142815833:qplot(x=time, y=trend, data=property.trends, geom="line",
1511142815834:colour=category, xlab="Trend", ylab="Time",
1511142815834:main="Dublin Property Trends: 2007 - 2016") +
1511142815835:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142822765:property.trends <- read_tsv("dublin property trends.txt")
1511142824311:colnames(property.trends) <- tolower(colnames(property.trends))
1511142827481:PlotPropertyTrends <- function (property.trends) {
1511142827481:qplot(x=time, y=trend, data=property.trends, geom="line",
1511142827482:colour=category, xlab="Trend", ylab="Time",
1511142827483:main="Dublin Property Trends: 2007 - 2016") +
1511142827483:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142832141:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511142832141:xlab="Quarterly Figures", ylab="Trend",
1511142832142:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511142832143:facet_grid(. ~ sector) +
1511142832143:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142841781:)
1511142849481:qplot(x=time, y=employment, data=employment.trends, geom="line",
1511142849482:xlab="Quarterly Figures", ylab="Trend",
1511142849483:main="Dublin Employment Trends Per Sector: 2006-2016") +
1511142849483:facet_grid(. ~ sector) +
1511142849483:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142858485:qplot(x=time, y=trend, data=property.trends, geom="line",
1511142858487:colour=category, xlab="Trend", ylab="Time",
1511142858487:main="Dublin Property Trends: 2007 - 2016") +
1511142858488:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142883782:qplot(x=time, y=trend, data=property.trends, geom="line",
1511142883783:colour=category, xlab="Trend", ylab="Time",
1511142883784:main="Dublin Property Trends: 2007 - 2016") +
1511142883784:labs(colour = 'Category')
1511142891389:qplot(x=time, y=trend, data=property.trends, geom="line",
1511142891390:colour=category, xlab="Trend", ylab="Time",
1511142891391:main="Dublin Property Trends: 2007 - 2016") +
1511142891391:labs(colour = 'Category') +
1511142891392:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511142948888:qplot(x=time, y=trend, data=property.trends, geom="line",
1511142948890:colour=category, xlab="Time", ylab="Trend",
1511142948891:main="Dublin Property Trends: 2007 - 2016") +
1511142948892:labs(colour = 'Category') +
1511142948892:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511143031294:day.wise.40d <- route.40d.days %>%
1511143031295:group_by(day, trip_id) %>%
1511143031295:summarise(trip_count = sum(!is.na(trip_id))) %>%
1511143031296:summarise(trip_count = sum(!is.na(trip_id)))
1511143031377:qplot(x=day, y=trip_count, data = day.wise.40d,
1511143031378:geom = 'blank', main = '40D - Trips per day') +
1511143031378:geom_bar(stat='identity', position = 'dodge') +
1511143031379:xlab("Days") + ylab('Trips')
1511143497590:knitr::opts_chunk$set(echo=TRUE)
1511143497592:options(width=40)
1511143497594:require(DT)
1511143497649:require(ggplot2)
1511143497651:require(knitr)
1511143497672:require(readr)
1511143497859:PlotBucketWiseSpeeds(route.40d.trips)
1511143619786:View(speed.40d)
1511143628434:View(route.40d)
1511144074017:require(readODS)
1511144074084:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511144074085:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511144074086:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511144074087:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511144183041:?read.ods
1511144267354:df <- read_ods("pedestrianfootfall2013.ods", range="A5:O30")
1511144276225:View(df)
1511144316831:df <- read_ods("pedestrianfootfall2013.ods", range="A6:O30")
1511144547752:df <- read_ods("pedestrianfootfall2013.ods", range="A1:O100")
1511144620231:?for
1511144624157:;
1511144891492:kColNames = c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511144891494:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511144891494:'sat_out', 'sun_in', 'sun_out')
1511144896340:length(kColNames)
1511144932752:sheet.num = 1
1511144935689:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511144935690:sheet = sheet.num, col_names = kColNames)
1511144941503:append(footfall.data.hundred.rows, sheet)
1511144955204:footfall.data.hundred.rows <- list()
1511144967830:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511144967832:sheet = sheet.num, col_names = kColNames)
1511144973734:append(footfall.data.hundred.rows, sheet)
1511145000285:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511145000287:sheet = sheet.num)
1511145007849:colnames(sheet) <- kColNames
1511145011589:View(sheet)
1511145035850:rownames(sheet)
1511145060444:rownames(sheet) <- rownames(sheet)
1511145072231:sheet[1,]
1511145136520:kEntranceOne <- "O'Connell Street at Clerys"
1511145136521:kEntranceTwo <- "South King St"
1511145235893:which(sheet$time == 'Entrance Name: O'Connell Street at Clerys')
1511145243576:which(sheet$time == "Entrance Name: O'Connell Street at Clerys")
1511145503563:sheet[6:29]
1511145506645:sheet[6:29,]
1511145714094:data.frame()
1511145737385:entrance.one.data <- data.frame()
1511145737388:entrance.two.data <- data.frame()
1511145802332:GetEntranceData <- function (sheet, entrance.name) {
1511145802332:search.string <- paste("Entrance Name:", entrance.name)
1511145802333:index <- which(sheet$time == search.string)
1511145802334:entrance.df <- sheet[index + 3:index + 26, ]
1511145802334:return(entrance.df)
1511145802335:}
1511145806900:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511145806902:sheet = sheet.num)
1511145812514:colnames(sheet) <- kColNames
1511145812514:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511145812516:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511145821069:View(entrance.one.week.data)
1511145829891:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511145854344:entrance.name = kEntranceOne
1511145859119:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511145859119:sheet = sheet.num)
1511145865829:colnames(sheet) <- kColNames
1511145872890:sheet
1511145876845:kEntranceOne
1511145892340:search.string <- paste("Entrance Name:", entrance.name)
1511145894432:search.string
1511145900080:index <- which(sheet$time == search.string)
1511145901890:index
1511145907611:entrance.df <- sheet[index + 3:index + 26, ]
1511145924231:is.data.frame(sheet)
1511145935554:index
1511145949384:sheet[6:29,]
1511145968361:sheet[index + 3:index + 26, ]
1511145985701:xx <- 3
1511145992563:sheet[xx + 3:xx + 26, ]
1511146003140:a <- index + 3
1511146008858:b <- index + 27
1511146011212:b <- index + 26
1511146011653:a
1511146012636:b
1511146019958:sheet[a:b,]
1511146054376:GetEntranceData <- function (sheet, entrance.name) {
1511146054377:search.string <- paste("Entrance Name:", entrance.name)
1511146054377:index <- which(sheet$time == search.string)
1511146054378:start.index <- index + 3
1511146054378:end.index <- index + 26
1511146054378:entrance.df <- sheet[start.index:end.index, ]
1511146054379:return(entrance.df)
1511146054379:}
1511146063075:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511146063076:sheet = sheet.num)
1511146068788:colnames(sheet) <- kColNames
1511146068790:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511146068791:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511146074076:View(entrance.one.week.data)
1511146098034:append(entrance.one.data, entrance.one.week.data)
1511146105105:entrance.one.data <- data.frame()
1511146115525:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511146121491:View(entrance.one.data)
1511146173941:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511146173948:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511146173949:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511146191809:entrance.one.data <- data.frame()
1511146191815:entrance.two.data <- data.frame()
1511146191816:for (sheet.num in 1:52) {
1511146191817:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511146191818:sheet = sheet.num)
1511146191818:colnames(sheet) <- kColNames
1511146191819:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511146191820:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511146191820:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511146191823:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511146191824:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511146191825:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511146191825:}
1511146372513:View(entrance.one.data)
1511146434332:read.ods("pedestrianfootfall2013.ods", range='A1:O100')
1511146451502:read.ods("pedestrianfootfall2013.ods")
1511173155669:require(readODS)
1511173155928:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511173155929:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511173155930:'sat_out', 'sun_in', 'sun_out')
1511173155930:kEntranceOne <- "O'Connell Street at Clerys"
1511173155931:kEntranceTwo <- "South King St"
1511173155932:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511173155932:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511173155933:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511173155934:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511173156612:GetEntranceData <- function (sheet, entrance.name) {
1511173156613:search.string <- paste("Entrance Name:", entrance.name)
1511173156614:index <- which(sheet$time == search.string)
1511173156614:start.index <- index + 3
1511173156615:end.index <- index + 26
1511173156615:entrance.df <- sheet[start.index:end.index, ]
1511173156616:return(entrance.df)
1511173156617:}
1511173156618:entrance.one.data <- data.frame()
1511173156619:entrance.two.data <- data.frame()
1511173156620:for (sheet.num in 1:52) {
1511173156620:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511173156621:sheet = sheet.num)
1511173156621:colnames(sheet) <- kColNames
1511173156621:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511173156622:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511173156623:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511173156624:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511173156625:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511173156626:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511173156626:}
1511174990028:View(entrance.one.data)
1511175047411:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1511175050592:sheet.num = 1
1511175064647:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511175064648:sheet = sheet.num)
1511175080721:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511175080724:sheet = sheet.num, col_names = FALSE)
1511175263026:require(readxl)
1511175283242:x <- read_excel("pedestrianfootfall2013.ods")
1511175673328:as.time
1511175679473:require(lubridate)
1511176009426:week.one.in <- entrance.one.data %>%
1511176009427:select(-c(mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out))
1511176029811:require(dplyr)
1511176032986:week.one.in <- entrance.one.data %>%
1511176032987:select(-c(mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out))
1511176036359:View(week.one.in)
1511176167023:week.one.in <- entrance.one.data %>%
1511176167023:select(-c(mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511176167024:group_by(week_num)
1511176472471:require(reshape2)
1511176480275:week.one.in <- entrance.one.data %>%
1511176480275:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out))
1511176503087:week.one.in <- melt(week.one.in, id.vars = 'week_num')
1511176505239:View(week.one.in)
1511176540316:week.one.in <- entrance.one.data %>%
1511176540316:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out))
1511176540327:week.one.in <- melt(week.one.in, id.vars = 'week_num') %>%
1511176540328:group_by(week_num)
1511176556987:?melt
1511176584225:week.one.in <- entrance.one.data %>%
1511176584226:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511176584226:melt(id.vars = 'week_num') %>%
1511176584227:group_by(week_num)
1511176623838:week.one.in <- entrance.one.data %>%
1511176623839:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511176623840:melt(id.vars = 'week_num') %>%
1511176623840:group_by(week_num) %>%
1511176623840:summarise(weekly_in = sum(value))
1511176634353:week.one.in
1511176661559:week.one.in <- entrance.one.data %>%
1511176661560:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511176661560:melt(id.vars = 'week_num') %>%
1511176661562:group_by(week_num) %>%
1511176661563:mutate(value = as.integer(value)) %>%
1511176661565:summarise(weekly_in = sum(value))
1511176664318:View(week.one.in)
1511176692904:e1.week.one.in <- entrance.one.data %>%
1511176692905:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511176692905:melt(id.vars = 'week_num') %>%
1511176692906:group_by(week_num) %>%
1511176692906:mutate(value = as.integer(value)) %>%
1511176692907:summarise(weekly_in = sum(value))
1511176734759:e1.weekwise.in <- entrance.one.data %>%
1511176734759:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511176734760:melt(id.vars = 'week_num') %>%
1511176734761:group_by(week_num) %>%
1511176734761:mutate(value = as.integer(value)) %>%
1511176734762:summarise(weekly_in = sum(value))
1511176734781:e2.weekwise.in <- entrance.two.data %>%
1511176734781:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511176734783:melt(id.vars = 'week_num') %>%
1511176734783:group_by(week_num) %>%
1511176734785:mutate(value = as.integer(value)) %>%
1511176734785:summarise(weekly_in = sum(value))
1511177082221:GetWeeklyData <- function (entrance.df, direction = 'in') {
1511177082222:out.variables <- c(time, mon_out, tue_out, wed_out, thu_out, fri_out,
1511177082223:sat_out, sun_out)
1511177082223:in.variables <- c(time, mon_in, tue_in, wed_in, thu_in, fri_in, sat_in,
1511177082223:sun_in)
1511177082224:exclude.list <- ifelse(direction == 'in', out.variables, in.variables)
1511177082224:weekwise.in <- entrance.df %>%
1511177082224:select(-exclude.list) %>%
1511177082225:melt(id.vars = 'week_num') %>%
1511177082225:group_by(week_num) %>%
1511177082226:mutate(value = as.integer(value)) %>%
1511177082226:summarise(weekly_in = sum(value))
1511177082227:}
1511177125500:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511177125501:out.variables <- c(time, mon_out, tue_out, wed_out, thu_out, fri_out,
1511177125501:sat_out, sun_out)
1511177125503:in.variables <- c(time, mon_in, tue_in, wed_in, thu_in, fri_in, sat_in,
1511177125505:sun_in)
1511177125506:exclude.list <- ifelse(direction == 'in', out.variables, in.variables)
1511177125507:weekwise.df <- entrance.df %>%
1511177125508:select(-exclude.list) %>%
1511177125508:melt(id.vars = 'week_num') %>%
1511177125509:group_by(week_num) %>%
1511177125509:mutate(value = as.integer(value)) %>%
1511177125510:summarise(weekly_in = sum(value))
1511177125510:return(weekwise.df)
1511177125511:}
1511177136909:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511177167521:select(entrance.one.data, -c('time', 'mon_in'))
1511177176335:select(entrance.one.data, -c(time, mon_in))
1511177250640:?eval
1511177303258:eval('2+2')
1511177307438:eval(2+2)
1511177383797:select(entrance.one.data, -c('time', 'mon_in'))
1511177449938:select(entrance.one.data, -c(1, 2))
1511177460216:select(entrance.one.data, c(1, 2))
1511177532389:x <- 1:15
1511177541956:names(x) <- colnames(entrance.one.data)
1511177546719:x <- 1:16
1511177551432:names(x) <- colnames(entrance.one.data)
1511177552175:x
1511177561233:x['time']
1511177720498:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511177720501:'fri_out', 'sat_out', 'sun_out')
1511177725518:col.nums[out.variables]
1511177728606:col.nums <- 1:16
1511177730514:col.nums[out.variables]
1511177733225:names(col.nums) <- colnames(entrance.df)
1511177769638:names(col.nums) <- colnames(entrance.one.data)
1511177774062:col.nums[out.variables]
1511177781018:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511177781020:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511177781021:'fri_out', 'sat_out', 'sun_out')
1511177781022:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511177781023:'sat_in', 'sun_in')
1511177781024:col.nums <- 1:16
1511177781024:names(col.nums) <- colnames(entrance.df)
1511177781025:exclude.list <- ifelse(direction == 'in',
1511177781027:col.nums[out.variables],
1511177781028:col.nums[in.variables])
1511177781029:weekwise.df <- entrance.df %>%
1511177781029:select(-exclude.list) %>%
1511177781030:melt(id.vars = 'week_num') %>%
1511177781031:group_by(week_num) %>%
1511177781032:mutate(value = as.integer(value)) %>%
1511177781033:summarise(weekly_in = sum(value))
1511177781034:return(weekwise.df)
1511177781035:}
1511177789012:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511177792914:View(e1.weekwise.in)
1511177804344:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, 'out')
1511177811682:View(e1.weekwise.out)
1511177817551:View(e1.weekwise.in)
1511177819710:View(e1.weekwise.out)
1511177842661:e1.weekwise.in <- entrance.one.data %>%
1511177842664:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511177842665:melt(id.vars = 'week_num') %>%
1511177842666:group_by(week_num) %>%
1511177842667:mutate(value = as.integer(value)) %>%
1511177842668:summarise(weekly_in = sum(value))
1511177851069:View(e1.weekwise.in)
1511177853372:View(e1.weekwise.out)
1511177880305:direction = 'in'
1511177885081:out.variables
1511177888501:in.variables
1511177891499:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511177891500:'sat_in', 'sun_in')
1511177892769:col.nums <- 1:16
1511177902160:entrance.df <- entrance.one.data
1511177907648:exclude.list <- ifelse(direction == 'in',
1511177907648:col.nums[out.variables],
1511177907649:col.nums[in.variables])
1511177915769:weekwise.df <- entrance.df %>%
1511177915770:select(-exclude.list)
1511177925509:exclude.list
1511177938929:col.nums[out.variables]
1511177946597:col.nums
1511177952629:names(col.nums) <- colnames(entrance.df)
1511177955691:exclude.list <- ifelse(direction == 'in',
1511177955691:col.nums[out.variables],
1511177955692:col.nums[in.variables])
1511177957703:exclude.list
1511177970114:out.variables
1511177986753:col.nums[out.variables]
1511178000403:exclude.list <- col.nums[out.variables]
1511178003915:exclude.list
1511178008045:weekwise.df <- entrance.df %>%
1511178008046:select(-exclude.list)
1511178018867:direction == 'in'
1511178027922:exclude.list <- ifelse(direction == 'in',
1511178027925:col.nums[out.variables],
1511178027925:col.nums[in.variables])
1511178030800:exclude.list
1511178068190:if (direction == 'in')
1511178068191:exclude.list <- col.nums[out.variables]
1511178068193:else
1511178068194:exclude.list <- col.nums[in.variables]
1511178104781:if (direction == 'in') {
1511178104783:exclude.list <- col.nums[out.variables]
1511178104784:} else {
1511178104784:exclude.list <- col.nums[in.variables]
1511178104786:}
1511178109049:exclude.list
1511178119968:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511178119969:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511178119970:'fri_out', 'sat_out', 'sun_out')
1511178119970:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511178119971:'sat_in', 'sun_in')
1511178119971:col.nums <- 1:16
1511178119972:names(col.nums) <- colnames(entrance.df)
1511178119972:if (direction == 'in') {
1511178119973:exclude.list <- col.nums[out.variables]
1511178119973:} else {
1511178119973:exclude.list <- col.nums[in.variables]
1511178119974:}
1511178119974:weekwise.df <- entrance.df %>%
1511178119974:select(-exclude.list) %>%
1511178119975:melt(id.vars = 'week_num') %>%
1511178119975:group_by(week_num) %>%
1511178119975:mutate(value = as.integer(value)) %>%
1511178119976:summarise(weekly_in = sum(value))
1511178119976:return(weekwise.df)
1511178119976:}
1511178156817:w1.in <- GetWeekwiseData(entrance.one.data)
1511178176882:View(w1.in)
1511178187401:e1.weekwise.in <- entrance.one.data %>%
1511178187402:select(-c(time, mon_out, tue_out, wed_out, thu_out, fri_out, sat_out, sun_out)) %>%
1511178187402:melt(id.vars = 'week_num') %>%
1511178187403:group_by(week_num) %>%
1511178187403:mutate(value = as.integer(value)) %>%
1511178187403:summarise(weekly_in = sum(value))
1511178189370:View(e1.weekwise.in)
1511178211547:e1.out <- GetWeekwiseData(entrance.one.data, 'out')
1511178213196:View(e1.out)
1511178316273:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511178316289:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511178316300:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511178316312:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511178341650:require(dplyr)
1511178341651:require(readODS)
1511178341652:require(reshape2)
1511178341652:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511178341654:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511178341654:'sat_out', 'sun_in', 'sun_out')
1511178341654:kEntranceOne <- "O'Connell Street at Clerys"
1511178341655:kEntranceTwo <- "South King St"
1511178341656:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511178341657:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511178341658:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511178341659:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511178342378:GetEntranceData <- function (sheet, entrance.name) {
1511178342379:search.string <- paste("Entrance Name:", entrance.name)
1511178342382:index <- which(sheet$time == search.string)
1511178342382:start.index <- index + 3
1511178342383:end.index <- index + 26
1511178342384:entrance.df <- sheet[start.index:end.index, ]
1511178342386:return(entrance.df)
1511178342386:}
1511178342389:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511178342390:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511178342390:'fri_out', 'sat_out', 'sun_out')
1511178342391:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511178342391:'sat_in', 'sun_in')
1511178342391:col.nums <- 1:16
1511178342392:names(col.nums) <- colnames(entrance.df)
1511178342392:if (direction == 'in') {
1511178342392:exclude.list <- col.nums[out.variables]
1511178342393:} else {
1511178342393:exclude.list <- col.nums[in.variables]
1511178342393:}
1511178342394:weekwise.df <- entrance.df %>%
1511178342394:select(-exclude.list) %>%
1511178342395:melt(id.vars = 'week_num') %>%
1511178342395:group_by(week_num) %>%
1511178342396:mutate(value = as.integer(value)) %>%
1511178342396:summarise(weekly_in = sum(value))
1511178342399:return(weekwise.df)
1511178342400:}
1511178342402:entrance.one.data <- data.frame()
1511178342403:entrance.two.data <- data.frame()
1511178342404:for (sheet.num in 1:52) {
1511178342405:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511178342405:sheet = sheet.num)
1511178342406:colnames(sheet) <- kColNames
1511178342406:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511178342407:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511178342408:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511178342409:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511178342410:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511178342411:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511178342411:}
1511178637128:# Weekly ins and outs of  both entrances
1511178637131:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511178637157:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511178637168:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511178637184:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511178748101:require(readr)
1511178793847:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511178804038:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511178955324:ReadFromCSVFiles <- function () {
1511178955325:entrance.one.data <- read_csv('entrance_one_data.csv')
1511178955325:entrance.two.data <- read_csv('entrance_two_data.csv')
1511178955326:}
1511179000717:ReadFromCSVFiles <- function () {
1511179000718:entrance.one.data <- read_csv('entrance_one_data.csv')
1511179000719:entrance.two.data <- read_csv('entrance_two_data.csv')
1511179000719:return(entrance.one.data, entrance.two.data)
1511179000719:}
1511179014052:x, y <- ReadFromCSVFiles()
1511179021406:c(x, y) <- ReadFromCSVFiles()
1511179144914:require(dplyr)
1511179144916:require(readODS)
1511179144916:require(readr)
1511179144917:require(reshape2)
1511179144918:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511179144919:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511179144920:'sat_out', 'sun_in', 'sun_out')
1511179144921:kEntranceOne <- "O'Connell Street at Clerys"
1511179144923:kEntranceTwo <- "South King St"
1511179144924:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511179144925:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511179144926:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511179144927:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511179145679:GetEntranceData <- function (sheet, entrance.name) {
1511179145680:search.string <- paste("Entrance Name:", entrance.name)
1511179145680:index <- which(sheet$time == search.string)
1511179145681:start.index <- index + 3
1511179145682:end.index <- index + 26
1511179145682:entrance.df <- sheet[start.index:end.index, ]
1511179145684:return(entrance.df)
1511179145684:}
1511179145686:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511179145687:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511179145688:'fri_out', 'sat_out', 'sun_out')
1511179145688:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511179145690:'sat_in', 'sun_in')
1511179145690:col.nums <- 1:16
1511179145692:names(col.nums) <- colnames(entrance.df)
1511179145693:if (direction == 'in') {
1511179145693:exclude.list <- col.nums[out.variables]
1511179145694:} else {
1511179145695:exclude.list <- col.nums[in.variables]
1511179145696:}
1511179145699:weekwise.df <- entrance.df %>%
1511179145699:select(-exclude.list) %>%
1511179145701:melt(id.vars = 'week_num') %>%
1511179145701:group_by(week_num) %>%
1511179145703:mutate(value = as.integer(value)) %>%
1511179145704:summarise(weekly_in = sum(value))
1511179145706:return(weekwise.df)
1511179145706:}
1511179145708:entrance.one.data <- data.frame()
1511179145709:entrance.two.data <- data.frame()
1511179145710:ReadFromODSFile <- function () {
1511179145711:for (sheet.num in 1:52) {
1511179145711:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511179145712:sheet = sheet.num)
1511179145712:colnames(sheet) <- kColNames
1511179145713:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511179145714:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511179145715:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511179145716:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511179145716:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511179145717:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511179145718:}
1511179145721:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511179145722:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511179145723:}
1511179145724:ReadFromCSVFiles <- function () {
1511179145724:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511179145725:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511179145726:}
1511179145727:# Weekly ins and outs of  both entrances
1511179145728:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511179145755:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511179145763:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511179145772:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511179173089:require(dplyr)
1511179173094:require(readODS)
1511179173095:require(readr)
1511179173096:require(reshape2)
1511179173097:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511179173097:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511179173098:'sat_out', 'sun_in', 'sun_out')
1511179173098:kEntranceOne <- "O'Connell Street at Clerys"
1511179173099:kEntranceTwo <- "South King St"
1511179173099:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511179173100:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511179173101:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511179173101:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511179173718:GetEntranceData <- function (sheet, entrance.name) {
1511179173718:search.string <- paste("Entrance Name:", entrance.name)
1511179173719:index <- which(sheet$time == search.string)
1511179173720:start.index <- index + 3
1511179173721:end.index <- index + 26
1511179173722:entrance.df <- sheet[start.index:end.index, ]
1511179173723:return(entrance.df)
1511179173724:}
1511179173726:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511179173726:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511179173727:'fri_out', 'sat_out', 'sun_out')
1511179173728:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511179173728:'sat_in', 'sun_in')
1511179173729:col.nums <- 1:16
1511179173729:names(col.nums) <- colnames(entrance.df)
1511179173730:if (direction == 'in') {
1511179173730:exclude.list <- col.nums[out.variables]
1511179173730:} else {
1511179173731:exclude.list <- col.nums[in.variables]
1511179173731:}
1511179173732:weekwise.df <- entrance.df %>%
1511179173732:select(-exclude.list) %>%
1511179173732:melt(id.vars = 'week_num') %>%
1511179173733:group_by(week_num) %>%
1511179173733:mutate(value = as.integer(value)) %>%
1511179173734:summarise(weekly_in = sum(value))
1511179173734:return(weekwise.df)
1511179173736:}
1511179173737:entrance.one.data <- data.frame()
1511179173738:entrance.two.data <- data.frame()
1511179173740:ReadFromODSFile <- function () {
1511179173741:for (sheet.num in 1:52) {
1511179173741:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511179173742:sheet = sheet.num)
1511179173742:colnames(sheet) <- kColNames
1511179173743:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511179173744:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511179173745:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511179173745:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511179173746:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511179173747:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511179173747:}
1511179173748:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511179173749:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511179173750:}
1511179173751:ReadFromCSVFiles <- function () {
1511179173752:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511179173752:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511179173753:}
1511179173753:ReadFromCSVFiles()
1511179173783:# Weekly ins and outs of  both entrances
1511179173783:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511179173812:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511179173826:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511179173841:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511179176593:View(e1.weekwise.in)
1511179184456:View(e1.weekwise.in)
1511179185373:View(e1.weekwise.out)
1511179229642:ReadFromODSFile <- function () {
1511179229642:entrance.one.data <<- data.frame()
1511179229643:entrance.two.data <<- data.frame()
1511179229643:for (sheet.num in 1:2) {
1511179229644:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511179229644:sheet = sheet.num)
1511179229645:colnames(sheet) <- kColNames
1511179229645:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511179229645:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511179229646:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511179229646:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511179229647:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511179229649:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511179229650:}
1511179229651:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511179229652:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511179229653:}
1511179245462:require(dplyr)
1511179245463:require(readODS)
1511179245463:require(readr)
1511179245464:require(reshape2)
1511179245465:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511179245466:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511179245467:'sat_out', 'sun_in', 'sun_out')
1511179245468:kEntranceOne <- "O'Connell Street at Clerys"
1511179245468:kEntranceTwo <- "South King St"
1511179245469:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511179245469:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511179245470:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511179245471:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511179246131:GetEntranceData <- function (sheet, entrance.name) {
1511179246131:search.string <- paste("Entrance Name:", entrance.name)
1511179246132:index <- which(sheet$time == search.string)
1511179246134:start.index <- index + 3
1511179246135:end.index <- index + 26
1511179246136:entrance.df <- sheet[start.index:end.index, ]
1511179246136:return(entrance.df)
1511179246137:}
1511179246139:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511179246139:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511179246140:'fri_out', 'sat_out', 'sun_out')
1511179246141:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511179246142:'sat_in', 'sun_in')
1511179246143:col.nums <- 1:16
1511179246144:names(col.nums) <- colnames(entrance.df)
1511179246144:if (direction == 'in') {
1511179246144:exclude.list <- col.nums[out.variables]
1511179246146:} else {
1511179246146:exclude.list <- col.nums[in.variables]
1511179246148:}
1511179246149:weekwise.df <- entrance.df %>%
1511179246150:select(-exclude.list) %>%
1511179246153:melt(id.vars = 'week_num') %>%
1511179246153:group_by(week_num) %>%
1511179246154:mutate(value = as.integer(value)) %>%
1511179246155:summarise(weekly_in = sum(value))
1511179246155:return(weekwise.df)
1511179246157:}
1511179246159:entrance.one.data <- data.frame()
1511179246161:entrance.two.data <- data.frame()
1511179246162:ReadFromODSFile <- function () {
1511179246162:entrance.one.data <<- data.frame()
1511179246163:entrance.two.data <<- data.frame()
1511179246164:for (sheet.num in 1:2) {
1511179246165:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511179246166:sheet = sheet.num)
1511179246166:colnames(sheet) <- kColNames
1511179246169:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511179246169:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511179246172:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511179246172:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511179246173:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511179246174:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511179246176:}
1511179246178:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511179246180:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511179246182:}
1511179250025:ReadFromODSFile()
1511179322811:ReadFromODSFile <- function () {
1511179322812:entrance.one.data <- data.frame()
1511179322812:entrance.two.data <- data.frame()
1511179322813:for (sheet.num in 1:2) {
1511179322813:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511179322813:sheet = sheet.num)
1511179322814:colnames(sheet) <- kColNames
1511179322814:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511179322814:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511179322815:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511179322815:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511179322816:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511179322816:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511179322817:}
1511179322817:entrance.one.data <<- entrance.one.data
1511179322819:entrance.two.data <<- entrance.two.data
1511179322820:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511179322822:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511179322823:}
1511179327795:ReadFromODSFile()
1511179348764:ReadFromODSFile <- function () {
1511179348766:entrance.one.data <- data.frame()
1511179348766:entrance.two.data <- data.frame()
1511179348767:for (sheet.num in 1:52) {
1511179348767:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511179348767:sheet = sheet.num)
1511179348768:colnames(sheet) <- kColNames
1511179348768:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511179348768:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511179348769:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511179348769:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511179348770:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511179348771:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511179348771:}
1511179348772:entrance.one.data <<- entrance.one.data
1511179348772:entrance.two.data <<- entrance.two.data
1511179348773:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511179348773:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511179348773:}
1511179351500:ReadFromODSFile()
1511179658311:ReadFromCSVFiles <- function () {
1511179658314:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511179658314:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511179658316:}
1511179670316:ReadFromCSVFiles()
1511179675266:ReadFromCSVFiles <- function () {
1511179675267:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511179675268:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511179675268:}
1511179676983:ReadFromCSVFiles()
1511179690376:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511179690376:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511179690377:'fri_out', 'sat_out', 'sun_out')
1511179690378:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511179690378:'sat_in', 'sun_in')
1511179690378:col.nums <- 1:16
1511179690379:names(col.nums) <- colnames(entrance.df)
1511179690379:if (direction == 'in') {
1511179690380:exclude.list <- col.nums[out.variables]
1511179690380:} else {
1511179690380:exclude.list <- col.nums[in.variables]
1511179690381:}
1511179690381:weekwise.df <- entrance.df %>%
1511179690381:select(-exclude.list) %>%
1511179690382:melt(id.vars = 'week_num') %>%
1511179690382:group_by(week_num) %>%
1511179690382:mutate(value = as.integer(value)) %>%
1511179690383:summarise(weekly_in = sum(value))
1511179690383:return(weekwise.df)
1511179690385:}
1511179695578:# Weekly ins and outs of  both entrances
1511179695579:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511179695608:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511179695622:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511179695638:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511179730558:require(ggplot2)
1511179760406:qplot(week_num, weekly_in, data=e1.weekwise.in)
1511179775739:qplot(week_num, weekly_in, data=e1.weekwise.in, geom='line')
1511179827957:qplot(week_num, weekly_in, data=e2.weekwise.in, geom='line')
1511179948694:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511179948696:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511179948697:'fri_out', 'sat_out', 'sun_out')
1511179948698:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511179948699:'sat_in', 'sun_in')
1511179948699:col.nums <- 1:16
1511179948700:names(col.nums) <- colnames(entrance.df)
1511179948700:if (direction == 'in') {
1511179948702:exclude.list <- col.nums[out.variables]
1511179948703:} else {
1511179948704:exclude.list <- col.nums[in.variables]
1511179948706:}
1511179948708:weekwise.df <- entrance.df %>%
1511179948709:select(-exclude.list) %>%
1511179948710:melt(id.vars = 'week_num') %>%
1511179948710:group_by(week_num) %>%
1511179948712:mutate(value = as.integer(value))
1511179948712:if (direction == 'in') {
1511179948714:weekwise.df <- summarise(weekwise.df, weekly_in = sum(value))
1511179948715:} else {
1511179948715:weekwise.df <- summarise(weekwise.df, weekly_out = sum(value))
1511179948716:}
1511179953247:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511179953247:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511179953248:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511179953248:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511179980678:;
1511179982790:)
1511179987074:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511179987090:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511179987106:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511179987124:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511180001344:require(dplyr)
1511180001346:require(ggplot2)
1511180001347:require(readODS)
1511180001348:require(readr)
1511180001349:require(reshape2)
1511180001350:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511180001350:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511180001351:'sat_out', 'sun_in', 'sun_out')
1511180001352:kEntranceOne <- "O'Connell Street at Clerys"
1511180001352:kEntranceTwo <- "South King St"
1511180001353:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511180001353:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511180001355:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511180001357:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511180002045:GetEntranceData <- function (sheet, entrance.name) {
1511180002045:search.string <- paste("Entrance Name:", entrance.name)
1511180002047:index <- which(sheet$time == search.string)
1511180002048:start.index <- index + 3
1511180002049:end.index <- index + 26
1511180002050:entrance.df <- sheet[start.index:end.index, ]
1511180002052:return(entrance.df)
1511180002052:}
1511180002054:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511180002054:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511180002056:'fri_out', 'sat_out', 'sun_out')
1511180002057:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511180002058:'sat_in', 'sun_in')
1511180002059:col.nums <- 1:16
1511180002060:names(col.nums) <- colnames(entrance.df)
1511180002060:if (direction == 'in') {
1511180002062:exclude.list <- col.nums[out.variables]
1511180002062:} else {
1511180002064:exclude.list <- col.nums[in.variables]
1511180002064:}
1511180002065:weekwise.df <- entrance.df %>%
1511180002066:select(-exclude.list) %>%
1511180002067:melt(id.vars = 'week_num') %>%
1511180002067:group_by(week_num) %>%
1511180002068:mutate(value = as.integer(value))
1511180002069:if (direction == 'in') {
1511180002070:weekwise.df <- summarise(weekwise.df, weekly_in = sum(value))
1511180002071:} else {
1511180002072:weekwise.df <- summarise(weekwise.df, weekly_out = sum(value))
1511180002074:}
1511180002075:return(weekwise.df)
1511180002076:}
1511180002077:entrance.one.data <- data.frame()
1511180002078:entrance.two.data <- data.frame()
1511180002079:ReadFromODSFile <- function () {
1511180002079:entrance.one.data <- data.frame()
1511180002080:entrance.two.data <- data.frame()
1511180002080:for (sheet.num in 1:52) {
1511180002081:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511180002081:sheet = sheet.num)
1511180002081:colnames(sheet) <- kColNames
1511180002082:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511180002083:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511180002084:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511180002085:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511180002086:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511180002087:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511180002087:}
1511180002089:entrance.one.data <<- entrance.one.data
1511180002090:entrance.two.data <<- entrance.two.data
1511180002091:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511180002092:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511180002093:}
1511180002094:ReadFromCSVFiles <- function () {
1511180002095:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511180002095:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511180002096:}
1511180002097:ReadFromCSVFiles()
1511180002118:# Weekly ins and outs of  both entrances
1511180002119:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511180002150:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511180002165:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511180002181:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511180121874:e1.weekwise <- group_by(e1.weekwise.in, e1.weekwise.out, by='week_num')
1511180138255:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by='week_num')
1511180187759:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511180187760:melt(id.vars = 'week_num')
1511180192047:View(e1.weekwise)
1511180228536:qplot(week_num, value, data=e1.weekwise, geom='line', colour=variable)
1511180269883:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511180269884:melt(id.vars = 'week_num')
1511180330303:qplot(week_num, value, data=e2.weekwise, geom='line', colour=variable)
1511180445911:e1.weekwise <- rbind(e1.weekwise, entrance='e1')
1511180451878:View(e1.weekwise)
1511180464431:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511180464432:melt(id.vars = 'week_num')
1511180472688:e1.weekwise <- cbind(e1.weekwise, entrance='e1')
1511180477822:View(e1.weekwise)
1511180495830:e2.weekwise <- cbind(e2.weekwise, entrance='e2')
1511180519242:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511180522834:View(weekwise)
1511180542306:qplot(week_num, value, data=weekwise, geom='line', colour=variable)
1511180556847:qplot(week_num, value, data=weekwise, geom='line', colour=c(entrance,variable))
1511180650672:qplot(week_num, value, data=weekwise, geom='line', colour=variable) + facet_grid(. ~ entrance)
1511180772348:e1.weekwise <- cbind(e1.weekwise, entrance=kEntranceOne)
1511180772349:e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511180772350:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511180772351:facet_grid(. ~ entrance) +
1511180772352:xlab('Week') + ylab('FootFall') + labs(line = 'Direction') +
1511180772352:labs(title = 'XX')
1511180782974:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511180782977:melt(id.vars = 'week_num')
1511180782978:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511180782979:melt(id.vars = 'week_num')
1511180782981:e1.weekwise <- cbind(e1.weekwise, entrance=kEntranceOne)
1511180782982:e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511180782984:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511180782986:facet_grid(. ~ entrance) +
1511180782988:xlab('Week') + ylab('FootFall') + labs(line = 'Direction') +
1511180782990:labs(title = 'XX')
1511180802214:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511180802215:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511180802216:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511180802217:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511180811709:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511180811712:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511180811712:'sat_out', 'sun_in', 'sun_out')
1511180811713:kEntranceOne <- "O'Connell Street at Clerys"
1511180811714:kEntranceTwo <- "South King St"
1511180811716:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511180811716:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511180811717:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511180811718:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511180812481:GetEntranceData <- function (sheet, entrance.name) {
1511180812481:search.string <- paste("Entrance Name:", entrance.name)
1511180812483:index <- which(sheet$time == search.string)
1511180812484:start.index <- index + 3
1511180812488:end.index <- index + 26
1511180812488:entrance.df <- sheet[start.index:end.index, ]
1511180812490:return(entrance.df)
1511180812491:}
1511180812492:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511180812493:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511180812494:'fri_out', 'sat_out', 'sun_out')
1511180812494:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511180812495:'sat_in', 'sun_in')
1511180812495:col.nums <- 1:16
1511180812496:names(col.nums) <- colnames(entrance.df)
1511180812496:if (direction == 'in') {
1511180812496:exclude.list <- col.nums[out.variables]
1511180812497:} else {
1511180812497:exclude.list <- col.nums[in.variables]
1511180812498:}
1511180812499:weekwise.df <- entrance.df %>%
1511180812500:select(-exclude.list) %>%
1511180812500:melt(id.vars = 'week_num') %>%
1511180812501:group_by(week_num) %>%
1511180812502:mutate(value = as.integer(value))
1511180812504:if (direction == 'in') {
1511180812505:weekwise.df <- summarise(weekwise.df, weekly_in = sum(value))
1511180812506:} else {
1511180812506:weekwise.df <- summarise(weekwise.df, weekly_out = sum(value))
1511180812508:}
1511180812509:return(weekwise.df)
1511180812510:}
1511180812510:entrance.one.data <- data.frame()
1511180812512:entrance.two.data <- data.frame()
1511180812513:ReadFromODSFile <- function () {
1511180812514:entrance.one.data <- data.frame()
1511180812515:entrance.two.data <- data.frame()
1511180812516:for (sheet.num in 1:52) {
1511180812517:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511180812518:sheet = sheet.num)
1511180812518:colnames(sheet) <- kColNames
1511180812518:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511180812520:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511180812520:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511180812522:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511180812522:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511180812524:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511180812525:}
1511180812526:entrance.one.data <<- entrance.one.data
1511180812527:entrance.two.data <<- entrance.two.data
1511180812528:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511180812529:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511180812529:}
1511180812530:ReadFromCSVFiles <- function () {
1511180812531:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511180812532:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511180812533:}
1511180812534:ReadFromCSVFiles()
1511180812562:# Weekly ins and outs of  both entrances
1511180812562:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511180812606:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511180812619:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511180812634:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511180817665:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511180817666:melt(id.vars = 'week_num')
1511180818912:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511180818913:melt(id.vars = 'week_num')
1511180820161:e1.weekwise <- cbind(e1.weekwise, entrance=kEntranceOne)
1511180821462:e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511180824337:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511180824338:facet_grid(. ~ entrance) +
1511180824339:xlab('Week') + ylab('Footfall') + labs(line = 'Direction') +
1511180824339:labs(title = 'XX')
1511180853357:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511180860133:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511180860134:facet_grid(. ~ entrance) +
1511180860134:xlab('Week') + ylab('Footfall') + labs(line = 'Direction') +
1511180860135:labs(title = 'XX')
1511180915644:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511180915646:facet_grid(. ~ entrance) +
1511180915647:xlab('Week') + ylab('Footfall') + labs(line = 'Direction')
1511180943475:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511180943477:facet_grid(. ~ entrance) +
1511180943478:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511180943479:labs(title = 'Footfall over the weeks')
1511181006943:weekwise
1511181014420:str(weekwise)
1511181042916:labels(weekwise$variable) = c('In', 'Out')
1511181105215:weekwise$variable = factor(weekwise$variable, labels = c('In', 'Out'), levels = c('weekly_in', 'weekly_out'))
1511181110094:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511181110097:facet_grid(. ~ entrance) +
1511181110098:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511181110099:labs(title = 'Footfall over the weeks')
1511181159654:ReadFromCSVFiles()
1511181159680:# Weekly ins and outs of  both entrances
1511181159680:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511181159717:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511181159732:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511181159753:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511181159768:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511181159769:melt(id.vars = 'week_num')
1511181159772:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511181159772:melt(id.vars = 'week_num')
1511181159775:e1.weekwise <- cbind(e1.weekwise, entrance=kEntranceOne)
1511181159776:e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511181159777:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511181159778:weekwise$variable = factor(weekwise$variable, labels = c('In', 'Out'),
1511181159778:levels = c('weekly_in', 'weekly_out'))
1511181159779:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511181159779:facet_grid(. ~ entrance) +
1511181159780:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511181159781:labs(title = 'Footfall over the weeks')
1511181242344:PlotWeekWiseComparison()
1511181244128:require(dplyr)
1511181244129:require(ggplot2)
1511181244130:require(readODS)
1511181244130:require(readr)
1511181244132:require(reshape2)
1511181244132:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511181244133:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511181244134:'sat_out', 'sun_in', 'sun_out')
1511181244134:kEntranceOne <- "O'Connell Street at Clerys"
1511181244135:kEntranceTwo <- "South King St"
1511181244135:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511181244136:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511181244137:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511181244137:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511181244825:GetEntranceData <- function (sheet, entrance.name) {
1511181244826:search.string <- paste("Entrance Name:", entrance.name)
1511181244828:index <- which(sheet$time == search.string)
1511181244829:start.index <- index + 3
1511181244831:end.index <- index + 26
1511181244832:entrance.df <- sheet[start.index:end.index, ]
1511181244832:return(entrance.df)
1511181244833:}
1511181244834:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511181244834:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511181244836:'fri_out', 'sat_out', 'sun_out')
1511181244836:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511181244838:'sat_in', 'sun_in')
1511181244838:col.nums <- 1:16
1511181244838:names(col.nums) <- colnames(entrance.df)
1511181244839:if (direction == 'in') {
1511181244841:exclude.list <- col.nums[out.variables]
1511181244843:} else {
1511181244845:exclude.list <- col.nums[in.variables]
1511181244846:}
1511181244847:weekwise.df <- entrance.df %>%
1511181244848:select(-exclude.list) %>%
1511181244848:melt(id.vars = 'week_num') %>%
1511181244849:group_by(week_num) %>%
1511181244850:mutate(value = as.integer(value))
1511181244851:if (direction == 'in') {
1511181244852:weekwise.df <- summarise(weekwise.df, weekly_in = sum(value))
1511181244854:} else {
1511181244855:weekwise.df <- summarise(weekwise.df, weekly_out = sum(value))
1511181244856:}
1511181244858:return(weekwise.df)
1511181244860:}
1511181244861:entrance.one.data <- data.frame()
1511181244862:entrance.two.data <- data.frame()
1511181244863:ReadFromODSFile <- function () {
1511181244864:entrance.one.data <- data.frame()
1511181244864:entrance.two.data <- data.frame()
1511181244865:for (sheet.num in 1:52) {
1511181244865:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511181244865:sheet = sheet.num)
1511181244867:colnames(sheet) <- kColNames
1511181244868:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511181244869:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511181244869:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511181244871:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511181244871:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511181244872:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511181244873:}
1511181244875:entrance.one.data <<- entrance.one.data
1511181244876:entrance.two.data <<- entrance.two.data
1511181244878:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511181244878:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511181244879:}
1511181244880:ReadFromCSVFiles <- function () {
1511181244881:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511181244882:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511181244883:}
1511181244884:PlotWeekWiseComparison <- function () {
1511181244884:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511181244886:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511181244886:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511181244886:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511181244887:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511181244887:melt(id.vars = 'week_num')
1511181244888:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511181244888:melt(id.vars = 'week_num')
1511181244889:e1.weekwise <- cbind(e1.weekwise, entrance=kEntranceOne)
1511181244889:e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511181244890:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511181244891:weekwise$variable = factor(weekwise$variable, labels = c('In', 'Out'),
1511181244892:levels = c('weekly_in', 'weekly_out'))
1511181244893:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511181244894:facet_grid(. ~ entrance) +
1511181244895:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511181244896:labs(title = 'Footfall over the weeks')
1511181244896:}
1511181244898:ReadFromCSVFiles()
1511181244917:# Weekly ins and outs of  both entrances
1511181244917:PlotWeekWiseComparison()
1511181559628:source("Footfall.R")
1511181576933:PlotWeekWiseComparison()
1511181723387:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511181723404:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511181723423:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511181723441:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511181723455:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511181723456:melt(id.vars = 'week_num')
1511181723458:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511181723458:melt(id.vars = 'week_num')
1511181723460:e1.weekwise <- mutate(e1.weekwise, variable=paste0('e1', variable))
1511181723466:e2.weekwise <- mutate(e2.weekwise, variable=paste0('e2', variable))
1511181725961:View(e1.weekwise)
1511181760012:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511181872314:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511181872315:weekwise$variable = factor(weekwise$variable,
1511181872316:labels = c(paste(kEntranceOne, 'In'),
1511181872316:paste(kEntranceOne, 'Out'),
1511181872316:paste(kEntranceTwo, 'In'),
1511181872317:paste(kEntranceTwo, 'Out')),
1511181872317:levels = c('e1_weekly_in', 'e1_weekly_out',
1511181872317:'e2_weekly_in', 'e2_weekly_out'))
1511181876430:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511181876431:facet_grid(. ~ entrance) +
1511181876432:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511181876432:labs(title = 'Footfall over the weeks')
1511182229509:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511182229511:# facet_grid(. ~ entrance) +
1511182229511:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511182229512:labs(title = 'Footfall over the weeks')
1511182238349:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511182238350:# facet_grid(. ~ entrance) +
1511182238350:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511182238351:labs(title = 'Footfall over the weeks')
1511182249505:qplot(week_num, value, data=weekwise, geom='line', colour=variable)
1511182258530:View(weekwise)
1511182269894:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511182271944:View(weekwise)
1511182284431:kEntranceOne <- "O'Connell Street at Clerys"
1511182284433:kEntranceTwo <- "South King St"
1511182289936:weekwise$variable = factor(weekwise$variable,
1511182289937:labels = c(paste(kEntranceOne, 'In'),
1511182289937:paste(kEntranceOne, 'Out'),
1511182289938:paste(kEntranceTwo, 'In'),
1511182289938:paste(kEntranceTwo, 'Out')),
1511182289939:levels = c('e1_weekly_in', 'e1_weekly_out',
1511182289939:'e2_weekly_in', 'e2_weekly_out'))
1511182292161:View(weekwise)
1511182346691:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511182346692:weekwise$variable = factor(weekwise$variable,
1511182346693:levels = c('e1_weekly_in', 'e1_weekly_out',
1511182346693:'e2_weekly_in', 'e2_weekly_out'))
1511182348103:View(weekwise)
1511182359753:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511182368170:str(weekwise)
1511182388654:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511182388655:melt(id.vars = 'week_num')
1511182388659:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511182388660:melt(id.vars = 'week_num')
1511182388662:e1.weekwise <- mutate(e1.weekwise, variable=paste0('e1_', variable))
1511182388665:e2.weekwise <- mutate(e2.weekwise, variable=paste0('e2_', variable))
1511182388676:# e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511182388676:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511182388678:weekwise$variable = factor(weekwise$variable,
1511182388678:labels = c(paste(kEntranceOne, 'In'),
1511182388679:paste(kEntranceOne, 'Out'),
1511182388680:paste(kEntranceTwo, 'In'),
1511182388680:paste(kEntranceTwo, 'Out')),
1511182388681:levels = c('e1_weekly_in', 'e1_weekly_out',
1511182388681:'e2_weekly_in', 'e2_weekly_out'))
1511182390345:View(weekwise)
1511182414043:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511182414061:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511182414073:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511182414088:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511182414105:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511182414106:melt(id.vars = 'week_num')
1511182414110:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511182414110:melt(id.vars = 'week_num')
1511182414112:e1.weekwise <- mutate(e1.weekwise, variable=paste0('e1_', variable))
1511182414117:e2.weekwise <- mutate(e2.weekwise, variable=paste0('e2_', variable))
1511182414121:# e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511182414121:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511182414124:weekwise$variable = factor(weekwise$variable,
1511182414125:labels = c(paste(kEntranceOne, '- In'),
1511182414126:paste(kEntranceOne, '- Out'),
1511182414127:paste(kEntranceTwo, '- In'),
1511182414127:paste(kEntranceTwo, '- Out')),
1511182414128:levels = c('e1_weekly_in', 'e1_weekly_out',
1511182414128:'e2_weekly_in', 'e2_weekly_out'))
1511182414129:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511182414131:# facet_grid(. ~ entrance) +
1511182414131:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511182414132:labs(title = 'Footfall over the weeks')
1511182509401:source("Footfall.R")
1511182514594:PlotWeekWiseComparison()
1511183100772:View(entrance.one.data)
1511183783511:source("BikeInfo.R")
1511183795002:PlotNearestAvailableStations(open.stations)
1511183833276:##3. Dublin Bus
1511183833277:```{r three_base, include=FALSE}
1511183833278:source("DublinBus.R")
1511183840641:```
1511183840643:**3.1 Exploring the Dublin Bus Data**
1511183840643:Here, we are exploring the DublinBus data from January 27, 2013 to October 31, 2013. There are a total of 3 services under DublinBus, with Service 1 operating on the weekdays, Service 2 operating on Sunday and Monday, and Service 3 operating only on Saturday. Firstly, we will explore the data service-wise - How many routes are covered under each service?
1511183840644:**a. How many routes are covered under each service?**
1511183840644:```{r three_one_routes_by_services, echo=FALSE}
1511183840644:PlotRoutesByServices(trips)
1511183841009:```
1511183841009:DublinBus has a coverage of `r I(stop.count)` stops spread over `r I(stop.area.count)` different areas as identified by DublinBus. For further analysis, we will look at service 1 only, to gain a better insight on how DublinBus served the city during the weekdays.
1511183841011:**b. Are the most important areas the busiest ones as well?**
1511183841011:We can examine how vital an area is by examining how many routes cover an area. Dividing this value by the number of stops in the area will give us our area importance score. Similarly, we can examine how busy each area is by finding out how many trips cover an area. Again, dividing this value by the number of stops in the area will give us our area busyness score. Here, we are plotting the area importance score against area busyness score.
1511183841012:```{r three_one_plot_importance_busyness, echo=FALSE}
1511183841013:PlotStopImportance(vital.stops, busy.stops)
1511183841485:```
1511183841485:We can observe that the number of trips per area and the number of routes per area has a positive correlation. The most important/connected an area, the more likely it is to be busier as well.
1511183841486:** . Which are the most important routes?**
1511183841486:```{r three_one_plot_important_routes, echo=FALSE}
1511183841487:PlotTripsByRoutes(trips, routes)
1511183841939:```
1511183841940:**3.2 Exploring 40D route**
1511183841941:40D runs from Tyrrelstown to Parnell St and back.
1511183841941:```{r three_two_summary, echo=FALSE}
1511183841941:kable(route.40d.mean.summary,
1511183841941:caption="Route 40D - A summary",
1511183841942:format="html")
1511183841942:```
1511183841943:```{r three_two_daywise_trips, echo=FALSE}
1511183841945:PlotDayWiseTrips(route.40d.days)
1511183842348:```
1511183842348:As we can see, the frequency over the whole day is lesser in the weekends than in the weekdays. The number of trips in the 40D route is the highest in Mondays owing to the fact that 2 services run on Monday.
1511183842349:The average speed of a bus can be expected to vary over different periods of time and also in different days of the week (in weekends, the traffic may be lesser). So, here, we examine the mean speed in kilometre per hour of a bus in 40D at different time periods of a day across the three services.
1511183842350:```{r three_two_speed_time_buckets, echo=FALSE}
1511183842350:PlotBucketWiseSpeeds(route.40d.trips)
1511183843483:```
1511185601183:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1511185940547:require(rnoaa)
1511185967892:install.packages('rnoaa')
1511192571110:install.packages('readtext')
1511192638529:require(readtext)
1511192672713:history.file <- readtext('history.txt')
1511192674943:View(history.file)
1511192688751:?readtext
1511192779736:history.df <- read.table('history.txt', sep = ':')
1511192817631:history.df <- read.delim('history.txt', sep = ':')
1511192824950:View(history.df)
1511192846719:history.df <- read.delim('history.txt', sep = ':', header = FALSE)
1511192849589:View(history.df)
1511193521859:history.txt <- readLines('history.txt', 'r')
1511193565026:history.txt <- readLines(con = file('history.txt', 'r'))
1511193663960:length(history.txt)
1511193844151:getwd()
1511193910675:kAssignmentDirectory <- paste0("/Users/jayadeepsasikumar/",
1511193910676:"MSc in Data Analytics/Working with Data/",
1511193910677:"Assignments/1")
1511194148453:a <- "abcdabc"
1511194203515:substr('a', a)
1511194219079:'a' %in 'vdva'
1511194223839:'a' %in% 'vdva'
1511194226261:'a' %in% 'avdva'
1511194365951:which('sadad:asdasd' == ':')
1511194473563:connection <- file('history.txt', 'r')
1511194475516:history.txt <- readLines(con = connection)
1511194488007:close(connection)
1511194559599:require(stringr)
1511194586080:str_locate('sadad:asdasd', ':')
1511194590418:str_locate('sadad:asdasd:', ':')
1511194594881:str_locate('sadad:asdasd:asdas', ':')
1511194674347:str_locate('sadad:asdasd:', ':')[1]
1511194710520:str_split()
1511194734832:str_locate('sadad:asdasd:', ':')['start']
1511194741037:str_locate('sadad:asdasd:', ':')$start
1511194744579:str_locate('sadad:asdasd:', ':')
1511194747737:str_locate('sadad:asdasd:', ':')[start]
1511194757204:str_locate('sadad:asdasd:', ':')[1]
1511194783201:history.txt[1]
1511194785161:history.txt[2]
1511194786829:history.txt[3]
1511194792325:history.txt[4]
1511194935965:substr('sadad:asdasd:', 1, 6)
1511194943647:substr('sadad:asdasd:', 6, 8)
1511195058969:history.line <- "1505144035963:del(x)"
1511195063071:colon.index <- str_locate(history.line, ':')[1]
1511195069301:time.component <- substr(history.line, 1, colon.index - 1)
1511195069303:command <- substr(history.line, colon.index + 1, length(history.line))
1511195072125:time.component
1511195093640:command
1511195109971:colon.index
1511195120924:length(history.line)
1511195137390:history.line <- "1505144035963:del(x)"
1511195138312:length(history.line)
1511195153047:str_length(history.line)
1511195165899:time.component <- substr(history.line, 1, colon.index - 1)
1511195165900:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511195168266:time.component
1511195170516:command
1511195264652:setwd.command <- paste('setwd', kAssignmentDirectory)
1511195268643:setwd.command
1511195292431:setwd.command <- paste0('setwd(', kAssignmentDirectory, ')')
1511195294844:setwd.command
1511195668467:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511195668469:"Assignments/1")
1511195668470:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511195671876:setwd.command
1511195727024:history.line <- '1510244118181:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")'
1511195734422:colon.index <- str_locate(history.line, ':')[1]
1511195734423:time.component <- substr(history.line, 1, colon.index - 1)
1511195734423:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511195737014:command
1511195743838:setwd.command
1511195763093:startsWith(command, setwd.command)
1511195798934:startsWith(command, 'setwd')
1511195952478:for (line.num in 1:length(history.txt)) {
1511195952478:history.line <- history.txt[line.num]
1511195952479:colon.index <- str_locate(history.line, ':')[1]
1511195952479:time.component <- substr(history.line, 1, colon.index - 1)
1511195952480:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511195952480:if (startsWith(command, 'setwd')) {
1511195952481:if (startsWith(command, setwd.command)) {
1511195952481:is.assignment.directory <- TRUE
1511195952481:} else {
1511195952482:is.assignment.directory <- FALSE
1511195952482:}
1511195952482:}
1511195952483:if (is.assignment.directory == TRUE) {
1511195952483:rbind(c(time.component, command))
1511195952484:}
1511195952484:}
1511195967665:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511195967666:"Assignments/1")
1511195967667:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511195967668:connection <- file('history.txt', 'r')
1511195967672:history.txt <- readLines(con = connection)
1511195967801:is.assignment.directory <- FALSE
1511195967802:commands.df <- data.frame()
1511195967803:colnames(commands.df) <- c('time', 'command')
1511195967804:for (line.num in 1:length(history.txt)) {
1511195967806:history.line <- history.txt[line.num]
1511195967806:colon.index <- str_locate(history.line, ':')[1]
1511195967808:time.component <- substr(history.line, 1, colon.index - 1)
1511195967808:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511195967809:if (startsWith(command, 'setwd')) {
1511195967810:if (startsWith(command, setwd.command)) {
1511195967811:is.assignment.directory <- TRUE
1511195967812:} else {
1511195967813:is.assignment.directory <- FALSE
1511195967814:}
1511195967815:}
1511195967816:if (is.assignment.directory == TRUE) {
1511195967817:rbind(c(time.component, command))
1511195967817:}
1511195967819:}
1511195968306:close(connection)
1511195996091:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511195996092:"Assignments/1")
1511195996093:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511195996094:connection <- file('history.txt', 'r')
1511195996096:history.txt <- readLines(con = connection)
1511195996196:is.assignment.directory <- FALSE
1511195996196:commands.df <- data.frame()
1511195996198:colnames(commands.df) <- c('time', 'command')
1511195996198:for (line.num in 1:length(history.txt)) {
1511195996199:history.line <- history.txt[line.num]
1511195996199:colon.index <- str_locate(history.line, ':')[1]
1511195996200:time.component <- substr(history.line, 1, colon.index - 1)
1511195996200:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511195996200:if (startsWith(command, 'setwd')) {
1511195996201:if (startsWith(command, setwd.command)) {
1511195996201:is.assignment.directory <- TRUE
1511195996201:} else {
1511195996202:is.assignment.directory <- FALSE
1511195996202:}
1511195996203:}
1511195996203:if (is.assignment.directory == TRUE) {
1511195996203:commands.df <- rbind(commands.df, c(time.component, command))
1511195996204:}
1511195996204:}
1511196002620:close(connection)
1511196057230:warnings()
1511196216067:View(commands.df)
1511196252872:require(readtext)
1511196252873:require(stringr)
1511196252874:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511196252874:"Assignments/1")
1511196252876:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511196252876:connection <- file('history.txt', 'r')
1511196252878:history.txt <- readLines(con = connection)
1511196252983:is.assignment.directory <- FALSE
1511196252983:commands.df <- data.frame()
1511196252984:colnames(commands.df) <- c('time', 'command')
1511196252985:for (line.num in 1:length(history.txt)) {
1511196252986:history.line <- history.txt[line.num]
1511196252986:colon.index <- str_locate(history.line, ':')[1]
1511196252987:time.component <- substr(history.line, 1, colon.index - 1)
1511196252987:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511196252987:if (startsWith(command, 'setwd')) {
1511196252988:if (startsWith(command, setwd.command)) {
1511196252988:is.assignment.directory <- TRUE
1511196252989:} else {
1511196252989:is.assignment.directory <- FALSE
1511196252989:}
1511196252990:}
1511196252990:if (is.assignment.directory == TRUE) {
1511196252991:commands.df <- rbind(commands.df, c(as.character(time.component),
1511196252991:as.character(command)))
1511196252991:}
1511196252992:}
1511196258554:close(connection)
1511196264198:View(commands.df)
1511196277528:commands.df <- data.frame()
1511196277529:colnames(commands.df) <- c('time', 'command')
1511196305805:commands.df <- data.frame(time, command)
1511196312523:commands.df <- data.frame('time', 'command')
1511196316575:View(commands.df)
1511196321923:colnames(commands.df) <- c('time', 'command')
1511196345206:for (line.num in 1:length(history.txt)) {
1511196345206:history.line <- history.txt[line.num]
1511196345207:colon.index <- str_locate(history.line, ':')[1]
1511196345208:time.component <- substr(history.line, 1, colon.index - 1)
1511196345208:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511196345208:if (startsWith(command, 'setwd')) {
1511196345209:if (startsWith(command, setwd.command)) {
1511196345209:is.assignment.directory <- TRUE
1511196345210:} else {
1511196345210:is.assignment.directory <- FALSE
1511196345210:}
1511196345211:}
1511196345212:if (is.assignment.directory == TRUE) {
1511196345213:commands.df <- rbind(commands.df, c(as.character(time.component),
1511196345215:as.character(command)))
1511196345216:}
1511196345217:}
1511196508077:View(commands.df)
1511196535285:warnings()
1511196622071:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511196622073:"Assignments/1")
1511196622074:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511196622075:connection <- file('history.txt', 'r')
1511196622077:history.txt <- readLines(con = connection)
1511196622183:is.assignment.directory <- FALSE
1511196622184:commands.df <- data.frame('time', 'command')
1511196622185:colnames(commands.df) <- c('time', 'command')
1511196622186:commands <- c()
1511196622187:times <- c()
1511196622188:for (line.num in 1:length(history.txt)) {
1511196622189:history.line <- history.txt[line.num]
1511196622189:colon.index <- str_locate(history.line, ':')[1]
1511196622190:time.component <- substr(history.line, 1, colon.index - 1)
1511196622190:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511196622190:if (startsWith(command, 'setwd')) {
1511196622191:if (startsWith(command, setwd.command)) {
1511196622191:is.assignment.directory <- TRUE
1511196622191:} else {
1511196622192:is.assignment.directory <- FALSE
1511196622192:}
1511196622192:}
1511196622193:if (is.assignment.directory == TRUE) {
1511196622193:append(times, time.component)
1511196622194:append(commands, command)
1511196622194:}
1511196622196:}
1511196622622:close(connection)
1511196651391:require(readtext)
1511196651391:require(stringr)
1511196651392:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511196651393:"Assignments/1")
1511196651394:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511196651395:connection <- file('history.txt', 'r')
1511196651396:history.txt <- readLines(con = connection)
1511196651497:is.assignment.directory <- FALSE
1511196651498:commands.df <- data.frame('time', 'command')
1511196651499:colnames(commands.df) <- c('time', 'command')
1511196651500:commands <- c()
1511196651501:times <- c()
1511196651503:for (line.num in 1:length(history.txt)) {
1511196651503:history.line <- history.txt[line.num]
1511196651504:colon.index <- str_locate(history.line, ':')[1]
1511196651505:time.component <- substr(history.line, 1, colon.index - 1)
1511196651506:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511196651507:if (startsWith(command, 'setwd')) {
1511196651507:if (startsWith(command, setwd.command)) {
1511196651507:is.assignment.directory <- TRUE
1511196651508:} else {
1511196651508:is.assignment.directory <- FALSE
1511196651509:}
1511196651509:}
1511196651510:if (is.assignment.directory == TRUE) {
1511196651511:times <- append(times, time.component)
1511196651511:commands <- append(commands, command)
1511196651512:}
1511196651513:}
1511196652256:close(connection)
1511196675214:commands.df(time=times, command=commands)
1511196690598:commands.df <- data.frame(time=times, command=commands)
1511196692541:View(commands.df)
1511197145243:str(commands.df)
1511197180615:commands.df <- data.frame(time=times, command=commands, stringsAsFactors = FALSE)
1511197183828:str(commands.df)
1511197232883:require(lubridate)
1511197274679:as.Date(1507934545242)
1511197293397:as.Date(1507934545242, origin='1970-01-01')
1511197331741:as.Date(1507934545, origin='1970-01-01')
1511197374846:as.Date(1507934545, origin='1900-01-01')
1511197389702:as.Date(1507934545, origin='1900-01-01', tz = 'HST')
1511197403355:x <- as.Date(1507934545, origin='1900-01-01', tz = 'HST')
1511197403923:x
1511197406586:year(x)
1511197455225:x <- as.Date(1507934, origin='1900-01-01', tz = 'HST')
1511197456078:x
1511197466197:View(commands.df)
1511197484149:x <_ 1511185967892
1511197487977:x <- 1511185967892
1511197504102:as.Date(x, origin = '1900-01-01')
1511197509402:as.Date(x, origin = '1970-01-01')
1511197514508:?as.Date
1511197673988:1511185967892/86400
1511197678559:1511185967892/86400000
1511197711049:as.Date(x/1000, origin = '1970-01-01')
1511197721570:as.Date(x/86400000, origin = '1970-01-01')
1511197817981:as.Date(x/86400000, origin = '1970-01-01', format = '%Y-%m-%d %H-%M')
1511197822098:as.Date(x/86400000, origin = '1970-01-01', format = '%Y-%m-%d')
1511197900323:require(dplyr)
1511197937545:commands.df <- commands.df %>%
1511197937548:mutate(date = as.Date(time/86400000, origin = '1970-01-01'))
1511197947447:View(commands.df)
1511197962157:require(lubridate)
1511197965549:commands.df <- commands.df %>%
1511197965550:mutate(date = as.Date(time/86400000, origin = '1970-01-01'))
1511197984763:sum(commands.df$time)
1511198003942:commands.df <- commands.df %>%
1511198003944:mutate(date = as.Date(as.integer(time)/86400000, origin = '1970-01-01'))
1511198022041:1511183841941
1511198025966:x <- 1511183841941
1511198029396:typeof(x)
1511198039105:commands.df <- commands.df %>%
1511198039106:mutate(date = as.Date(as.double(time)/86400000, origin = '1970-01-01'))
1511198041598:View(commands.df)
1511198047734:str(commands.df)
1511198109838:4%3
1511198135489:4%%3
1511198143731:commands.df <- commands.df %>%
1511198143731:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511198143732:mutate(time_component = as.double(time) %% 86400000)
1511198145309:View(commands.df)
1511198184132:?strftime
1511198247713:81745242
1511198260674:81745/86400
1511198280489:x <- 81745242 /1000
1511198285225:x /60
1511198302233:x /60
1511198340456:81745242/1000
1511198346439:x = 81745242/1000
1511198357332:x/60*60
1511198366870:x/(60*60)
1511198406501:49967892/3600000
1511198521721:commands.df <- commands.df %>%
1511198521723:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511198521723:mutate(time_component = as.double(time) %% 86400000) %>%
1511198521724:mutate(time_x = format(as.POSIXct(date) + x / 1000, "%M:%S"))
1511198524408:View(commands.df)
1511198548124:commands.df <- commands.df %>%
1511198548125:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511198548126:mutate(time_component = as.double(time) %% 86400000) %>%
1511198548126:mutate(time_x = format(as.POSIXct(date) + x / 1000, "%H:%M:%S"))
1511198549579:View(commands.df)
1511198713855:?starts_with
1511198779857:?startsWith
1511198830879:commands.df <- commands.df %>%
1511198830880:filter(!startsWith(command, '```'))
1511198857569:commands.df <- commands.df %>%
1511198857570:filter(!startsWith(command, '```')) %>%
1511198857570:filter(!startsWith(command, '#'))
1511198860706:View(commands.df)
1511198892458:commands.df <- commands.df %>%
1511198892459:filter(!startsWith(command, '```')) %>%
1511198892460:filter(!startsWith(command, '#')) %>%
1511198892460:filter(!startsWith(command, '"'))
1511198894884:View(commands.df)
1511198950752:commands.df <- commands.df %>%
1511198950753:filter(!startsWith(command, '```')) %>%
1511198950753:filter(!startsWith(command, '#')) %>%
1511198950754:filter(!startsWith(command, '"')) %>%
1511198950754:filter(!startsWith(command, "'"))
1511198957941:commands.df <- commands.df %>%
1511198957944:filter(!startsWith(command, '```')) %>%
1511198957944:filter(!startsWith(command, '#')) %>%
1511198957944:filter(!startsWith(command, '"')) %>%
1511198957945:filter(!startsWith(command, "'")) %>%
1511198957945:filter(!startsWith(command, '}'))
1511198965259:View(commands.df)
1511199029146:commands.df <- commands.df %>%
1511199029147:filter(!startsWith(command, '```')) %>%
1511199029148:filter(!startsWith(command, '#')) %>%
1511199029148:filter(!startsWith(command, '"')) %>%
1511199029148:filter(!startsWith(command, "'")) %>%
1511199029149:filter(!startsWith(command, '}')) %>%
1511199029149:filter(!startsWith(command, '**'))
1511199089609:help.used
1511199091940:help.used <- sum(startsWith(commands.df$command, '?'))
1511199136483:View(filter(commands.df, startsWith(command, "?")))
1511199178585:sum(startsWith(commands.df$command, 'install.packages'))
1511199188259:View(filter(commands.df, startsWith(command, "install.packages")))
1511199238169:view.used <- sum(startsWith(commands.df$command, 'View'))
1511199280751:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511199280752:sum(startsWith(commands.df$command, 'ggplot'))
1511199380067:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511199380070:sum(startsWith(commands.df$command, 'select')) +
1511199380070:sum(startsWith(commands.df$command, 'mutate')) +
1511199380071:sum(startsWith(commands.df$command, 'arrange')) +
1511199380071:sum(startsWith(commands.df$command, 'summarise')) +
1511199380072:sum(startsWith(commands.df$command, 'inner_join')) +
1511199380072:sum(startsWith(commands.df$command, 'group_by')) +
1511199380072:sum(startsWith(commands.df$command, 'left_join'))
1511199556736:commands.df.2 <- commands.df %>%
1511199556739:mutate(time=time_x) %>%
1511199556739:select(-c(time_component, time_x))
1511199559056:View(commands.df.2)
1511200494426:ClassifyTime <- function (command.time) {
1511200494429:command.time <- strptime(as.character(command.time), format = "%H:%M")
1511200494430:bucket <- kBucket1
1511200494431:if (command.time < kThreeAm)
1511200494431:bucket <- kBucket1
1511200494433:else if (command.time < kSixAm)
1511200494434:bucket <- kBucket2
1511200494435:else if (command.time < kNineAm)
1511200494436:bucket <- kBucket3
1511200494438:else if (command.time < kNoon)
1511200494439:bucket <- kBucket4
1511200494443:else if (command.time < kThreePm)
1511200494444:bucket <- kBucket5
1511200494445:else if (command.time < kSixPm)
1511200494446:bucket <- kBucket6
1511200494447:else if (command.time < kNinePm)
1511200494447:bucket <- kBucket7
1511200494449:else
1511200494449:bucket <- kBucket8
1511200494449:return(bucket)
1511200494450:}
1511200629835:commands.df.2 <- commands.df %>%
1511200629836:mutate(time=time_x) %>%
1511200629836:select(-c(time_component, time_x)) %>%
1511200629837:mutate(time_bucket = ClassifyTime(time))
1511200638309:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511200638312:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511200638312:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511200638313:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511200638314:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511200638315:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511200638316:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511200638317:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511200638318:kBucket1 <- 'Midnight to 3 AM'
1511200638319:kBucket2 <- '3 AM to 6 AM'
1511200638321:kBucket3 <- '6 AM to 9 AM'
1511200638322:kBucket4 <- '9 AM to Noon'
1511200638324:kBucket5 <- 'Noon to 3 PM'
1511200638324:kBucket6 <- '3 PM to 6 PM'
1511200638325:kBucket7 <- '6 PM to 9 PM'
1511200638326:kBucket8 <- '9 PM +'
1511200644138:commands.df.2 <- commands.df %>%
1511200644138:mutate(time=time_x) %>%
1511200644139:select(-c(time_component, time_x)) %>%
1511200644139:mutate(time_bucket = ClassifyTime(time))
1511200684214:View(commands.df.2)
1511200731770:str(commands.df.2)
1511200814474:commands.df.2 <- commands.df %>%
1511200814476:mutate(time=time_x) %>%
1511200814477:select(-c(time_component, time_x)) %>%
1511200814478:mutate(time =  strptime(time, format = "%H:%M:%S")) %>%
1511200814479:mutate(time_bucket = ClassifyTime(time))
1511200915295:ClassifyTime <- function (command.time) {
1511200915297:# command.time <- strptime(as.character(command.time), format = "%H:%M")
1511200915297:bucket <- kBucket1
1511200915298:if (command.time < kThreeAm)
1511200915298:bucket <- kBucket1
1511200915298:else if (command.time < kSixAm)
1511200915299:bucket <- kBucket2
1511200915299:else if (command.time < kNineAm)
1511200915299:bucket <- kBucket3
1511200915300:else if (command.time < kNoon)
1511200915301:bucket <- kBucket4
1511200915302:else if (command.time < kThreePm)
1511200915303:bucket <- kBucket5
1511200915303:else if (command.time < kSixPm)
1511200915305:bucket <- kBucket6
1511200915305:else if (command.time < kNinePm)
1511200915307:bucket <- kBucket7
1511200915307:else
1511200915308:bucket <- kBucket8
1511200915309:return(bucket)
1511200915310:}
1511200920424:commands.df.2 <- commands.df %>%
1511200920425:mutate(time=time_x) %>%
1511200920426:select(-c(time_component, time_x)) %>%
1511200920426:mutate(time_bucket = ClassifyTime(time))
1511200943871:commands.df.2 <- commands.df %>%
1511200943871:mutate(time=time_x) %>%
1511200943872:select(-c(time_component, time_x))
1511200947974:View(commands.df.2)
1511200953773:str(commands.df.2)
1511200962504:View(commands.df.2)
1511201009135:kNinePm
1511201035863:ClassifyTime <- function (command.time) {
1511201035865:command.time <- strptime(as.character(command.time), format = "%H:%M:S")
1511201035865:bucket <- kBucket1
1511201035865:if (command.time < kThreeAm)
1511201035866:bucket <- kBucket1
1511201035866:else if (command.time < kSixAm)
1511201035866:bucket <- kBucket2
1511201035867:else if (command.time < kNineAm)
1511201035867:bucket <- kBucket3
1511201035867:else if (command.time < kNoon)
1511201035868:bucket <- kBucket4
1511201035868:else if (command.time < kThreePm)
1511201035868:bucket <- kBucket5
1511201035869:else if (command.time < kSixPm)
1511201035869:bucket <- kBucket6
1511201035870:else if (command.time < kNinePm)
1511201035870:bucket <- kBucket7
1511201035870:else
1511201035871:bucket <- kBucket8
1511201035871:return(bucket)
1511201035872:}
1511201044721:commands.df.2 <- commands.df %>%
1511201044722:mutate(time=time_x) %>%
1511201044723:select(-c(time_component, time_x)) %>%
1511201044723:mutate(time_bucket = ClassifyTime(time))
1511201070042:x <- "23:45:22"
1511201079121:ClassifyTime(x)
1511201096470:command.time <- x
1511201101335:command.time <- strptime(as.character(command.time), format = "%H:%M:S")
1511201107060:bucket <- kBucket1
1511201111693:command.time
1511201146546:command.time <- strptime(as.character(command.time), format = "%I:%M:S")
1511201149899:command.time
1511201160513:command.time <- x
1511201164045:command.time
1511201172693:?as.Date
1511201199791:?strptime
1511201230979:command.time
1511201243985:strptime(command.time, format = "%H:%M:S")
1511201257650:strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511201276734:strptime(as.character(command.time), format = "%H:%M:S")
1511201298719:strptime(as.character("21:00:00"), format = "%H:%M:S")
1511201309343:strptime(as.character('21:00:00'), format = "%H:%M:S")
1511201323864:strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511201330133:strptime(as.character('21:00:00'), format = "%H:%M:S")
1511201347111:strptime(command.time, format = "%H:%M:%S")
1511201352031:ClassifyTime <- function (command.time) {
1511201352033:command.time <- strptime(command.time, format = "%H:%M:%S")
1511201352033:bucket <- kBucket1
1511201352035:if (command.time < kThreeAm)
1511201352035:bucket <- kBucket1
1511201352035:else if (command.time < kSixAm)
1511201352036:bucket <- kBucket2
1511201352036:else if (command.time < kNineAm)
1511201352036:bucket <- kBucket3
1511201352037:else if (command.time < kNoon)
1511201352038:bucket <- kBucket4
1511201352039:else if (command.time < kThreePm)
1511201352040:bucket <- kBucket5
1511201352041:else if (command.time < kSixPm)
1511201352041:bucket <- kBucket6
1511201352043:else if (command.time < kNinePm)
1511201352044:bucket <- kBucket7
1511201352045:else
1511201352045:bucket <- kBucket8
1511201352046:return(bucket)
1511201352047:}
1511201357460:commands.df.2 <- commands.df %>%
1511201357465:mutate(time=time_x) %>%
1511201357466:select(-c(time_component, time_x)) %>%
1511201357466:mutate(time_bucket = ClassifyTime(time))
1511201362419:View(commands.df.2)
1511201377013:command.time
1511201386560:ClassifyTime(command.time)
1511201463362:ClassifyTime(commands.df.2$time)
1511201802075:ClassifyTime <- function (command.time) {
1511201802079:command.time <- strptime(command.time, format = "%H:%M:%S")
1511201802080:bucket <- kBucket1
1511201802081:bucket <- ifelse(command.time < kThreeAm, kBucket1,
1511201802082:ifelse(command.time < kSixAm, kBucket2,
1511201802082:ifelse(command.time < kNineAm, kBucket3,
1511201802083:ifelse(command.time < kNoon, kBucket4,
1511201802083:ifelse(command.time < kThreePm,
1511201802084:kBucket5,
1511201802084:ifelse(command.time < kSixPm,
1511201802086:kBucket6,
1511201802086:ifelse(command.time < kNinePm,
1511201802087:kBucket7,
1511201802087:kBucket8)))))))
1511201802088:# if (command.time < kThreeAm)
1511201802089:#   bucket <- kBucket1
1511201802090:# else if (command.time < kSixAm)
1511201802090:#   bucket <- kBucket2
1511201802092:# else if (command.time < kNineAm)
1511201802092:#   bucket <- kBucket3
1511201802093:# else if (command.time < kNoon)
1511201802094:#   bucket <- kBucket4
1511201802096:# else if (command.time < kThreePm)
1511201802097:#   bucket <- kBucket5
1511201802098:# else if (command.time < kSixPm)
1511201802099:#   bucket <- kBucket6
1511201802100:# else if (command.time < kNinePm)
1511201802101:#   bucket <- kBucket7
1511201802102:# else
1511201802102:#   bucket <- kBucket8
1511201802103:return(bucket)
1511201802103:}
1511201805655:ClassifyTime(commands.df.2$time)
1511201822373:commands.df.2 <- commands.df %>%
1511201822375:mutate(time=time_x) %>%
1511201822375:select(-c(time_component, time_x)) %>%
1511201822377:mutate(time_bucket = ClassifyTime(time))
1511202110870:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511202213303:commands.df <- commands.df %>%
1511202213305:filter(!startsWith(command, '```')) %>%
1511202213305:filter(!startsWith(command, '#')) %>%
1511202213306:filter(!startsWith(command, '"')) %>%
1511202213306:filter(!startsWith(command, "'")) %>%
1511202213307:filter(!startsWith(command, '}')) %>%
1511202213307:filter(!startsWith(command, '**')) %>%
1511202213307:mutate(previous_command = lag(command)) %>%
1511202213308:filter(!endsWith(previous_command, ',')) %>%
1511202213308:filter(!endsWith(previous_command, '+'))
1511202221168:help.used <- sum(startsWith(commands.df$command, '?'))
1511202221169:view.used <- sum(startsWith(commands.df$command, 'View'))
1511202221170:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511202221171:sum(startsWith(commands.df$command, 'ggplot'))
1511202221172:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511202221173:sum(startsWith(commands.df$command, 'select')) +
1511202221174:sum(startsWith(commands.df$command, 'mutate')) +
1511202221174:sum(startsWith(commands.df$command, 'arrange')) +
1511202221175:sum(startsWith(commands.df$command, 'summarise')) +
1511202221175:sum(startsWith(commands.df$command, 'inner_join')) +
1511202221175:sum(startsWith(commands.df$command, 'group_by')) +
1511202221176:sum(startsWith(commands.df$command, 'left_join'))
1511202221177:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511202229640:commands.df.2 <- commands.df %>%
1511202229643:mutate(time=time_x) %>%
1511202229643:select(-c(time_component, time_x)) %>%
1511202229645:mutate(time_bucket = ClassifyTime(time))
1511202279607:time_bucket_analysis <- commands.df.2 %>%
1511202279608:group_by(time_bucket) %>%
1511202279609:summarise(commands.count = sum(!is.na(command)))
1511202289679:View(time_bucket_analysis)
1511202407225:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511202407228:levels = c(kBucket1, kBucket2, kBucket3,
1511202407229:kBucket4, kBucket5, kBucket6,
1511202407230:kBucket7, kBucket8))
1511202589938:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511202589940:group=time_bucket,
1511202589941:geom = 'blank', main = 'At what time am I least lazy?') +
1511202589942:geom_line(aes(group = 1)) +
1511202589943:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511202589943:xlab("Time") + ylab('R commands run in console') +
1511202589943:theme(axis.text.x = element_text(angle=90)) +
1511202589944:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511202596096:require(ggplot2)
1511202601056:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511202601057:group=time_bucket,
1511202601058:geom = 'blank', main = 'At what time am I least lazy?') +
1511202601058:geom_line(aes(group = 1)) +
1511202601058:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511202601059:xlab("Time") + ylab('R commands run in console') +
1511202601059:theme(axis.text.x = element_text(angle=90)) +
1511202601060:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511202622951:commands.df.2 <- commands.df %>%
1511202622952:mutate(time=time_x) %>%
1511202622952:select(-c(time_component, time_x)) %>%
1511202622953:mutate(time_bucket = ClassifyTime(time))
1511202623079:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511202623079:levels = c(kBucket1, kBucket2, kBucket3,
1511202623081:kBucket4, kBucket5, kBucket6,
1511202623081:kBucket7, kBucket8))
1511202623082:time_bucket_analysis <- commands.df.2 %>%
1511202623082:group_by(time_bucket) %>%
1511202623083:summarise(commands.count = sum(!is.na(command)))
1511202623137:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511202623137:group=time_bucket,
1511202623138:geom = 'blank', main = 'At what time am I least lazy?') +
1511202623139:geom_line(aes(group = 1)) +
1511202623140:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511202623141:xlab("Time") + ylab('R commands run in console') +
1511202623141:theme(axis.text.x = element_text(angle=90)) +
1511202623141:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511202671312:qplot(time, !is.na(command), data=commands.df)
1511202709146:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511202709147:group=time_bucket,
1511202709148:geom = 'blank', main = 'At what time am I least lazy?') +
1511202709150:geom_line(aes(group = 1)) +
1511202709151:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511202709151:xlab("Time") + ylab('R commands run in console') +
1511202709152:theme(axis.text.x = element_text(angle=90)) +
1511202709152:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511202829863:View(time_bucket_analysis)
1511202905838:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511202905839:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511202916744:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511202916747:group=time_bucket,
1511202916748:geom = 'blank', main = 'At what time am I least lazy?') +
1511202916749:geom_line(aes(group = 1)) +
1511202916750:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511202916751:xlab("Time") + ylab('R commands run in console') +
1511202916751:theme(axis.text.x = element_text(angle=90)) +
1511202916752:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511202935553:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511202935554:group=time_bucket,
1511202935555:geom = 'blank', main = 'At what time am I least lazy?') +
1511202935555:geom_line(aes(group = 1)) +
1511202935556:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511202935556:xlab("Time") + ylab('R commands run in console') +
1511202935556:theme(axis.text.x = element_text(angle=90)) +
1511202935557:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511206463815:require(dplyr)
1511206463818:require(lubridate)
1511206463819:require(readtext)
1511206463820:require(stringr)
1511206463821:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511206463822:"Assignments/1")
1511206463823:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511206463824:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511206463825:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511206463826:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511206463827:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511206463828:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511206463829:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511206463831:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511206463834:kBucket1 <- 'Midnight to 3 AM'
1511206463836:kBucket2 <- '3 AM to 6 AM'
1511206463837:kBucket3 <- '6 AM to 9 AM'
1511206463838:kBucket4 <- '9 AM to Noon'
1511206463839:kBucket5 <- 'Noon to 3 PM'
1511206463840:kBucket6 <- '3 PM to 6 PM'
1511206463841:kBucket7 <- '6 PM to 9 PM'
1511206463842:kBucket8 <- '9 PM +'
1511206463843:ClassifyTime <- function (command.time) {
1511206463844:command.time <- strptime(command.time, format = "%H:%M:%S")
1511206463844:bucket <- kBucket1
1511206463845:bucket <- ifelse(command.time < kThreeAm, kBucket1,
1511206463846:ifelse(command.time < kSixAm, kBucket2,
1511206463847:ifelse(command.time < kNineAm, kBucket3,
1511206463847:ifelse(command.time < kNoon, kBucket4,
1511206463848:ifelse(command.time < kThreePm,
1511206463848:kBucket5,
1511206463849:ifelse(command.time < kSixPm,
1511206463850:kBucket6,
1511206463851:ifelse(command.time < kNinePm,
1511206463851:kBucket7,
1511206463852:kBucket8)))))))
1511206463853:return(bucket)
1511206463853:}
1511206463855:PlotCommandsInBuckets <- function (commands.df) {
1511206463856:commands.df.2 <- commands.df %>%
1511206463857:mutate(time=time_x) %>%
1511206463859:select(-c(time_component, time_x)) %>%
1511206463860:mutate(time_bucket = ClassifyTime(time))
1511206463861:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511206463862:levels = c(kBucket1, kBucket2, kBucket3,
1511206463863:kBucket4, kBucket5, kBucket6,
1511206463864:kBucket7, kBucket8))
1511206463866:time_bucket_analysis <- commands.df.2 %>%
1511206463867:group_by(time_bucket) %>%
1511206463868:summarise(commands.count = sum(!is.na(command)))
1511206463870:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511206463870:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511206463872:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511206463873:group=time_bucket,
1511206463874:geom = 'blank', main = 'At what time am I least lazy?') +
1511206463874:geom_line(aes(group = 1)) +
1511206463876:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511206463876:xlab("Time") + ylab('R commands run in console') +
1511206463877:theme(axis.text.x = element_text(angle=90)) +
1511206463878:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511206463880:}
1511206463881:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511206463882:connection <- file('history.txt', 'r')
1511206463883:history.txt <- readLines(con = connection)
1511206464011:is.assignment.directory <- FALSE
1511206464012:commands <- c()
1511206464013:times <- c()
1511206464014:for (line.num in 1:length(history.txt)) {
1511206464014:history.line <- history.txt[line.num]
1511206464015:colon.index <- str_locate(history.line, ':')[1]
1511206464015:time.component <- substr(history.line, 1, colon.index - 1)
1511206464016:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511206464016:if (startsWith(command, 'setwd')) {
1511206464016:if (startsWith(command, setwd.command)) {
1511206464017:is.assignment.directory <- TRUE
1511206464017:} else {
1511206464017:is.assignment.directory <- FALSE
1511206464018:}
1511206464018:}
1511206464018:if (is.assignment.directory == TRUE) {
1511206464019:times <- append(times, time.component)
1511206464019:commands <- append(commands, command)
1511206464019:}
1511206464020:}
1511206465036:close(connection)
1511206465036:commands.df <- data.frame(time=times, command=commands, stringsAsFactors = FALSE)
1511206465038:commands.df <- commands.df %>%
1511206465038:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511206465039:mutate(time_component = as.double(time) %% 86400000) %>%
1511206465040:mutate(time_x = format(as.POSIXct(date) + x / 1000, "%H:%M:%S"))
1511206465055:# Some of the rows can be removed
1511206465056:# Comments, Rmd chunk beginnings etc.
1511206465057:commands.df <- commands.df %>%
1511206465058:filter(!startsWith(command, '```')) %>%
1511206465059:filter(!startsWith(command, '#')) %>%
1511206465060:filter(!startsWith(command, '"')) %>%
1511206465062:filter(!startsWith(command, "'")) %>%
1511206465062:filter(!startsWith(command, '}')) %>%
1511206465063:filter(!startsWith(command, '**')) %>%
1511206465063:mutate(previous_command = lag(command)) %>%
1511206465063:filter(!endsWith(previous_command, ',')) %>%
1511206465064:filter(!endsWith(previous_command, '+'))
1511206465105:help.used <- sum(startsWith(commands.df$command, '?'))
1511206465106:view.used <- sum(startsWith(commands.df$command, 'View'))
1511206465108:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511206465109:sum(startsWith(commands.df$command, 'ggplot'))
1511206465110:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511206465110:sum(startsWith(commands.df$command, 'select')) +
1511206465112:sum(startsWith(commands.df$command, 'mutate')) +
1511206465112:sum(startsWith(commands.df$command, 'arrange')) +
1511206465114:sum(startsWith(commands.df$command, 'summarise')) +
1511206465114:sum(startsWith(commands.df$command, 'inner_join')) +
1511206465116:sum(startsWith(commands.df$command, 'group_by')) +
1511206465116:sum(startsWith(commands.df$command, 'left_join'))
1511206465120:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511206626268:length(history.txt)
1511208778159:PlotCommandsInBuckets(commands.df)
1511208815305:require(dplyr)
1511208815306:require(lubridate)
1511208815306:require(readtext)
1511208815307:require(stringr)
1511208815308:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511208815309:"Assignments/1")
1511208815310:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511208815310:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511208815312:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511208815312:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511208815314:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511208815314:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511208815317:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511208815318:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511208815320:kBucket1 <- 'Midnight to 3 AM'
1511208815321:kBucket2 <- '3 AM to 6 AM'
1511208815322:kBucket3 <- '6 AM to 9 AM'
1511208815322:kBucket4 <- '9 AM to Noon'
1511208815324:kBucket5 <- 'Noon to 3 PM'
1511208815324:kBucket6 <- '3 PM to 6 PM'
1511208815326:kBucket7 <- '6 PM to 9 PM'
1511208815326:kBucket8 <- '9 PM +'
1511208815329:ClassifyTime <- function (command.time) {
1511208815329:# Classifies the time into 8 buckets of 3 hours each and returns it.
1511208815330:#
1511208815331:# Args:
1511208815331:#   command.time: time represented in string in hh:mm:ss format.
1511208815331:#
1511208815332:# Returns:
1511208815332:#   The bucket in which command.time falls.
1511208815332:command.time <- strptime(command.time, format = "%H:%M:%S")
1511208815333:bucket <- kBucket1
1511208815333:# TODO: Normal if elseif else blocks not working. Look into this.
1511208815334:bucket <- ifelse(command.time < kThreeAm,
1511208815336:kBucket1,
1511208815337:ifelse(command.time < kSixAm,
1511208815338:kBucket2,
1511208815339:ifelse(command.time < kNineAm,
1511208815339:kBucket3,
1511208815339:ifelse(command.time < kNoon,
1511208815340:kBucket4,
1511208815340:ifelse(command.time < kThreePm,
1511208815341:kBucket5,
1511208815341:ifelse(command.time < kSixPm,
1511208815341:kBucket6,
1511208815342:ifelse(
1511208815342:command.time < kNinePm,
1511208815342:kBucket7,
1511208815343:kBucket8)))))))
1511208815343:return(bucket)
1511208815343:}
1511208815344:PlotCommandsInBuckets <- function (commands.df) {
1511208815345:# Plots the number of commands run in the console against the time buckets.
1511208815346:#
1511208815346:# Args:
1511208815346:#   commands.df: the data frame containing the relevant commands and time of
1511208815347:#                running.
1511208815347:command.time <- strptime(command.time, format = "%H:%M:%S")
1511208815347:commands.df.2 <- commands.df %>%
1511208815348:mutate(time=time_x) %>%
1511208815348:select(-c(time_component, time_x)) %>%
1511208815348:mutate(time_bucket = ClassifyTime(time))
1511208815349:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511208815349:levels = c(kBucket1, kBucket2, kBucket3,
1511208815350:kBucket4, kBucket5, kBucket6,
1511208815350:kBucket7, kBucket8))
1511208815351:time_bucket_analysis <- commands.df.2 %>%
1511208815351:group_by(time_bucket) %>%
1511208815352:summarise(commands.count = sum(!is.na(command)))
1511208815353:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511208815354:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511208815354:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511208815355:group=time_bucket,
1511208815356:geom = 'blank', main = 'At what time am I least lazy?') +
1511208815356:geom_line(aes(group = 1)) +
1511208815357:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511208815358:xlab("Time") + ylab('R commands run in console') +
1511208815358:theme(axis.text.x = element_text(angle=90)) +
1511208815358:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511208815359:}
1511208815360:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511208815360:connection <- file('history.txt', 'r')
1511208815361:history.txt <- readLines(con = connection)
1511208815472:is.assignment.directory <- FALSE
1511208815473:commands <- c()
1511208815474:times <- c()
1511208815475:# NUmber of lines in the imported file
1511208815476:initial.file.length <- length(history.txt)
1511208815477:# For the analysis, we need to consider only comments run while working on the
1511208815477:# assignment. Throughout the assignment, the working directory has been the
1511208815478:# same. This fact is made use of to identify which are the commands relevant
1511208815479:# to the analysis.
1511208815479:for (line.num in 1:length(history.txt)) {
1511208815479:history.line <- history.txt[line.num]
1511208815480:colon.index <- str_locate(history.line, ':')[1]
1511208815480:time.component <- substr(history.line, 1, colon.index - 1)
1511208815481:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511208815481:if (startsWith(command, 'setwd')) {
1511208815481:if (startsWith(command, setwd.command)) {
1511208815482:is.assignment.directory <- TRUE
1511208815482:} else {
1511208815482:is.assignment.directory <- FALSE
1511208815483:}
1511208815483:}
1511208815484:if (is.assignment.directory == TRUE) {
1511208815484:times <- append(times, time.component)
1511208815484:commands <- append(commands, command)
1511208815485:}
1511208815485:}
1511208816287:close(connection)
1511208816288:commands.df <- data.frame(time = times, command = commands,
1511208816289:stringsAsFactors = FALSE)
1511208816290:commands.df <- commands.df %>%
1511208816291:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511208816291:mutate(time_component = as.double(time) %% 86400000) %>%
1511208816292:mutate(time_x = format(as.POSIXct(date) + x / 1000, "%H:%M:%S"))
1511208816304:# Some of the rows can be removed
1511208816305:# Comments, Rmd chunk beginnings etc.
1511208816305:# Also, multi-line commands are represented as multiple lines in the history
1511208816306:# file. This also needs to be taken care of.
1511208816307:commands.df <- commands.df %>%
1511208816308:filter(!startsWith(command, '```')) %>%
1511208816309:filter(!startsWith(command, '#')) %>%
1511208816309:filter(!startsWith(command, '"')) %>%
1511208816311:filter(!startsWith(command, "'")) %>%
1511208816311:filter(!startsWith(command, '}')) %>%
1511208816312:filter(!startsWith(command, '**')) %>%
1511208816312:mutate(previous_command = lag(command)) %>%
1511208816315:filter(!endsWith(previous_command, ',')) %>%
1511208816316:filter(!endsWith(previous_command, '+'))
1511208816353:final.commands.count <- nrow(commands.df)
1511208816355:help.used <- sum(startsWith(commands.df$command, '?'))
1511208816355:view.used <- sum(startsWith(commands.df$command, 'View'))
1511208816356:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511208816357:sum(startsWith(commands.df$command, 'ggplot'))
1511208816358:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511208816358:sum(startsWith(commands.df$command, 'select')) +
1511208816359:sum(startsWith(commands.df$command, 'mutate')) +
1511208816359:sum(startsWith(commands.df$command, 'arrange')) +
1511208816362:sum(startsWith(commands.df$command, 'summarise')) +
1511208816362:sum(startsWith(commands.df$command, 'inner_join')) +
1511208816364:sum(startsWith(commands.df$command, 'group_by')) +
1511208816364:sum(startsWith(commands.df$command, 'left_join'))
1511208816368:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511208823949:PlotCommandsInBuckets(commands.df)
1511208866034:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511208866036:"Assignments/1")
1511208866037:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511208866038:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511208866039:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511208866041:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511208866042:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511208866044:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511208866047:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511208866049:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511208866050:kBucket1 <- 'Midnight to 3 AM'
1511208866050:kBucket2 <- '3 AM to 6 AM'
1511208866051:kBucket3 <- '6 AM to 9 AM'
1511208866052:kBucket4 <- '9 AM to Noon'
1511208866053:kBucket5 <- 'Noon to 3 PM'
1511208866054:kBucket6 <- '3 PM to 6 PM'
1511208866055:kBucket7 <- '6 PM to 9 PM'
1511208866056:kBucket8 <- '9 PM +'
1511208866057:ClassifyTime <- function (command.time) {
1511208866058:# Classifies the time into 8 buckets of 3 hours each and returns it.
1511208866058:#
1511208866059:# Args:
1511208866060:#   command.time: time represented in string in hh:mm:ss format.
1511208866060:#
1511208866061:# Returns:
1511208866061:#   The bucket in which command.time falls.
1511208866061:command.time <- strptime(command.time, format = "%H:%M:%S")
1511208866062:bucket <- kBucket1
1511208866062:# TODO: Normal if elseif else blocks not working. Look into this.
1511208866063:bucket <- ifelse(command.time < kThreeAm,
1511208866065:kBucket1,
1511208866067:ifelse(command.time < kSixAm,
1511208866067:kBucket2,
1511208866069:ifelse(command.time < kNineAm,
1511208866069:kBucket3,
1511208866072:ifelse(command.time < kNoon,
1511208866072:kBucket4,
1511208866073:ifelse(command.time < kThreePm,
1511208866074:kBucket5,
1511208866075:ifelse(command.time < kSixPm,
1511208866077:kBucket6,
1511208866078:ifelse(
1511208866079:command.time < kNinePm,
1511208866080:kBucket7,
1511208866081:kBucket8)))))))
1511208866082:return(bucket)
1511208866083:}
1511208866086:PlotCommandsInBuckets <- function (commands.df) {
1511208866087:# Plots the number of commands run in the console against the time buckets.
1511208866088:#
1511208866088:# Args:
1511208866091:#   commands.df: the data frame containing the relevant commands and time of
1511208866091:#                running.
1511208866093:command.time <- strptime(command.time, format = "%H:%M:%S")
1511208866094:commands.df.2 <- commands.df %>%
1511208866095:mutate(time=time_x) %>%
1511208866096:select(-c(time_component, time_x)) %>%
1511208866097:mutate(time_bucket = ClassifyTime(time))
1511208866097:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511208866098:levels = c(kBucket1, kBucket2, kBucket3,
1511208866099:kBucket4, kBucket5, kBucket6,
1511208866099:kBucket7, kBucket8))
1511208866100:time_bucket_analysis <- commands.df.2 %>%
1511208866101:group_by(time_bucket) %>%
1511208866102:summarise(commands.count = sum(!is.na(command)))
1511208866102:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511208866103:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511208866104:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511208866105:group=time_bucket,
1511208866106:geom = 'blank', main = 'At what time am I least lazy?') +
1511208866107:geom_line(aes(group = 1)) +
1511208866107:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511208866109:xlab("Time") + ylab('R commands run in console') +
1511208866109:theme(axis.text.x = element_text(angle=90)) +
1511208866111:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511208866111:}
1511208866113:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511208866114:connection <- file('history.txt', 'r')
1511208866115:history.txt <- readLines(con = connection)
1511208866218:is.assignment.directory <- FALSE
1511208866219:commands <- c()
1511208866220:times <- c()
1511208882030:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511208882031:"Assignments/1")
1511208882032:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511208882033:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511208882034:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511208882034:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511208882036:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511208882037:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511208882039:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511208882040:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511208882041:kBucket1 <- 'Midnight to 3 AM'
1511208882042:kBucket2 <- '3 AM to 6 AM'
1511208882043:kBucket3 <- '6 AM to 9 AM'
1511208882044:kBucket4 <- '9 AM to Noon'
1511208882045:kBucket5 <- 'Noon to 3 PM'
1511208882046:kBucket6 <- '3 PM to 6 PM'
1511208882047:kBucket7 <- '6 PM to 9 PM'
1511208882047:kBucket8 <- '9 PM +'
1511208882049:ClassifyTime <- function (command.time) {
1511208882049:# Classifies the time into 8 buckets of 3 hours each and returns it.
1511208882050:#
1511208882051:# Args:
1511208882051:#   command.time: time represented in string in hh:mm:ss format.
1511208882052:#
1511208882052:# Returns:
1511208882053:#   The bucket in which command.time falls.
1511208882055:command.time <- strptime(command.time, format = "%H:%M:%S")
1511208882056:bucket <- kBucket1
1511208882058:# TODO: Normal if elseif else blocks not working. Look into this.
1511208882058:bucket <- ifelse(command.time < kThreeAm,
1511208882059:kBucket1,
1511208882060:ifelse(command.time < kSixAm,
1511208882061:kBucket2,
1511208882061:ifelse(command.time < kNineAm,
1511208882062:kBucket3,
1511208882062:ifelse(command.time < kNoon,
1511208882063:kBucket4,
1511208882063:ifelse(command.time < kThreePm,
1511208882064:kBucket5,
1511208882065:ifelse(command.time < kSixPm,
1511208882066:kBucket6,
1511208882067:ifelse(
1511208882067:command.time < kNinePm,
1511208882068:kBucket7,
1511208882069:kBucket8)))))))
1511208882070:return(bucket)
1511208882070:}
1511208882071:PlotCommandsInBuckets <- function (commands.df) {
1511208882072:# Plots the number of commands run in the console against the time buckets.
1511208882073:#
1511208882073:# Args:
1511208882075:#   commands.df: the data frame containing the relevant commands and time of
1511208882075:#                running.
1511208882077:command.time <- strptime(command.time, format = "%H:%M:%S")
1511208882077:commands.df.2 <- commands.df %>%
1511208882077:mutate(time=time_x) %>%
1511208882078:select(-c(time_component, time_x)) %>%
1511208882078:mutate(time_bucket = ClassifyTime(time))
1511208882080:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511208882081:levels = c(kBucket1, kBucket2, kBucket3,
1511208882082:kBucket4, kBucket5, kBucket6,
1511208882083:kBucket7, kBucket8))
1511208882084:time_bucket_analysis <- commands.df.2 %>%
1511208882085:group_by(time_bucket) %>%
1511208882086:summarise(commands.count = sum(!is.na(command)))
1511208882088:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511208882090:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511208882091:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511208882092:group=time_bucket,
1511208882093:geom = 'blank', main = 'At what time am I least lazy?') +
1511208882094:geom_line(aes(group = 1)) +
1511208882095:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511208882095:xlab("Time") + ylab('R commands run in console') +
1511208882097:theme(axis.text.x = element_text(angle=90)) +
1511208882098:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511208882099:}
1511208882100:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511208882100:connection <- file('history.txt', 'r')
1511208882102:history.txt <- readLines(con = connection)
1511208882210:is.assignment.directory <- FALSE
1511208882211:commands <- c()
1511208882212:times <- c()
1511208892680:initial.file.length <- length(history.txt)
1511208903037:for (line.num in 1:length(history.txt)) {
1511208903038:history.line <- history.txt[line.num]
1511208903039:colon.index <- str_locate(history.line, ':')[1]
1511208903040:time.component <- substr(history.line, 1, colon.index - 1)
1511208903040:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511208903040:if (startsWith(command, 'setwd')) {
1511208903041:if (startsWith(command, setwd.command)) {
1511208903041:is.assignment.directory <- TRUE
1511208903041:} else {
1511208903042:is.assignment.directory <- FALSE
1511208903042:}
1511208903042:}
1511208903043:if (is.assignment.directory == TRUE) {
1511208903043:times <- append(times, time.component)
1511208903043:commands <- append(commands, command)
1511208903044:}
1511208903044:}
1511208903869:close(connection)
1511208903869:commands.df <- data.frame(time = times, command = commands,
1511208903871:stringsAsFactors = FALSE)
1511208917222:commands.df <- commands.df %>%
1511208917223:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511208917223:mutate(time_component = as.double(time) %% 86400000) %>%
1511208917224:mutate(time_x = format(as.POSIXct(date) + x / 1000, "%H:%M:%S"))
1511208937647:commands.df <- data.frame(time = times, command = commands,
1511208937648:stringsAsFactors = FALSE)
1511208949838:commands.df <- commands.df %>%
1511208949839:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511208949840:mutate(time_component = as.double(time) %% 86400000) %>%
1511208949840:mutate(time_x = format(as.POSIXct(date) + time / 1000, "%H:%M:%S"))
1511208969014:commands.df <- data.frame(time = times, command = commands,
1511208969015:stringsAsFactors = FALSE)
1511208974127:commands.df <- commands.df %>%
1511208974128:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511208974128:mutate(time_component = as.double(time) %% 86400000)
1511208975818:View(commands.df)
1511208993834:View(commands.df)
1511209011118:commands.df <- data.frame(time = times, command = commands,
1511209011119:stringsAsFactors = FALSE)
1511209011120:commands.df <- commands.df %>%
1511209011120:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511209011121:mutate(time_component = as.double(time) %% 86400000) %>%
1511209011121:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511209041097:commands.df <- commands.df %>%
1511209041100:filter(!startsWith(command, '```')) %>%
1511209041101:filter(!startsWith(command, '#')) %>%
1511209041102:filter(!startsWith(command, '"')) %>%
1511209041103:filter(!startsWith(command, "'")) %>%
1511209041105:filter(!startsWith(command, '}')) %>%
1511209041105:filter(!startsWith(command, '**')) %>%
1511209041106:mutate(previous_command = lag(command)) %>%
1511209041107:filter(!endsWith(previous_command, ',')) %>%
1511209041107:filter(!endsWith(previous_command, '+'))
1511209041156:final.commands.count <- nrow(commands.df)
1511209047104:elp.used <- sum(startsWith(commands.df$command, '?'))
1511209047105:view.used <- sum(startsWith(commands.df$command, 'View'))
1511209047106:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511209047106:sum(startsWith(commands.df$command, 'ggplot'))
1511209047108:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511209047108:sum(startsWith(commands.df$command, 'select')) +
1511209047109:sum(startsWith(commands.df$command, 'mutate')) +
1511209047110:sum(startsWith(commands.df$command, 'arrange')) +
1511209047110:sum(startsWith(commands.df$command, 'summarise')) +
1511209047111:sum(startsWith(commands.df$command, 'inner_join')) +
1511209047111:sum(startsWith(commands.df$command, 'group_by')) +
1511209047112:sum(startsWith(commands.df$command, 'left_join'))
1511209047115:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511209055413:help.used <- sum(startsWith(commands.df$command, '?'))
1511209055415:view.used <- sum(startsWith(commands.df$command, 'View'))
1511209055416:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511209055417:sum(startsWith(commands.df$command, 'ggplot'))
1511209055418:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511209055418:sum(startsWith(commands.df$command, 'select')) +
1511209055420:sum(startsWith(commands.df$command, 'mutate')) +
1511209055420:sum(startsWith(commands.df$command, 'arrange')) +
1511209055421:sum(startsWith(commands.df$command, 'summarise')) +
1511209055422:sum(startsWith(commands.df$command, 'inner_join')) +
1511209055422:sum(startsWith(commands.df$command, 'group_by')) +
1511209055423:sum(startsWith(commands.df$command, 'left_join'))
1511209055424:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511209069559:PlotCommandsInBuckets(commands.df)
1511209088749:PlotCommandsInBuckets <- function (commands.df) {
1511209088749:# Plots the number of commands run in the console against the time buckets.
1511209088750:#
1511209088751:# Args:
1511209088751:#   commands.df: the data frame containing the relevant commands and time of
1511209088752:#                running.
1511209088752:commands.df.2 <- commands.df %>%
1511209088753:mutate(time=time_x) %>%
1511209088754:select(-c(time_component, time_x)) %>%
1511209088755:mutate(time_bucket = ClassifyTime(time))
1511209088756:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511209088757:levels = c(kBucket1, kBucket2, kBucket3,
1511209088758:kBucket4, kBucket5, kBucket6,
1511209088758:kBucket7, kBucket8))
1511209088759:time_bucket_analysis <- commands.df.2 %>%
1511209088760:group_by(time_bucket) %>%
1511209088761:summarise(commands.count = sum(!is.na(command)))
1511209088762:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511209088763:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511209088763:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511209088765:group=time_bucket,
1511209088765:geom = 'blank', main = 'At what time am I least lazy?') +
1511209088766:geom_line(aes(group = 1)) +
1511209088767:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511209088768:xlab("Time") + ylab('R commands run in console') +
1511209088769:theme(axis.text.x = element_text(angle=90)) +
1511209088771:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511209088773:}
1511209091068:PlotCommandsInBuckets(commands.df)
1511209109139:PlotCommandsInBuckets <- function (commands.df) {
1511209109140:# Plots the number of commands run in the console against the time buckets.
1511209109141:#
1511209109141:# Args:
1511209109141:#   commands.df: the data frame containing the relevant commands and time of
1511209109142:#                running.
1511209109142:commands.df.2 <- commands.df %>%
1511209109142:mutate(time=time_x) %>%
1511209109143:select(-c(time_component, time_x)) %>%
1511209109143:mutate(time_bucket = ClassifyTime(time))
1511209109143:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511209109144:levels = c(kBucket1, kBucket2, kBucket3,
1511209109144:kBucket4, kBucket5, kBucket6,
1511209109145:kBucket7, kBucket8))
1511209109145:time_bucket_analysis <- commands.df.2 %>%
1511209109145:group_by(time_bucket) %>%
1511209109148:summarise(commands.count = sum(!is.na(command)))
1511209109148:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511209109149:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511209109151:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511209109151:group=time_bucket,
1511209109152:geom = 'blank', main = 'At what time am I least lazy?') +
1511209109153:geom_line(aes(group = 1)) +
1511209109155:xlab("Time") + ylab('R commands run in console') +
1511209109156:theme(axis.text.x = element_text(angle=90)) +
1511209109157:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511209109159:}
1511209111415:PlotCommandsInBuckets(commands.df)
1511209147285:View(time_bucket_analysis)
1511209157838:commands.df.2 <- commands.df %>%
1511209157841:mutate(time=time_x) %>%
1511209157841:select(-c(time_component, time_x)) %>%
1511209157841:mutate(time_bucket = ClassifyTime(time))
1511209157970:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511209157970:levels = c(kBucket1, kBucket2, kBucket3,
1511209157971:kBucket4, kBucket5, kBucket6,
1511209157972:kBucket7, kBucket8))
1511209157973:time_bucket_analysis <- commands.df.2 %>%
1511209157973:group_by(time_bucket) %>%
1511209157974:summarise(commands.count = sum(!is.na(command)))
1511209157979:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket2, 0))
1511209157980:time_bucket_analysis <- rbind(time_bucket_analysis, c(kBucket3, 0))
1511209161451:time_bucket_analysis
1511209168513:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511209168514:group=time_bucket,
1511209168515:geom = 'blank', main = 'At what time am I least lazy?') +
1511209168515:geom_line(aes(group = 1)) +
1511209168516:xlab("Time") + ylab('R commands run in console') +
1511209168516:theme(axis.text.x = element_text(angle=90)) +
1511209168516:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511209212410:View(time_bucket_analysis)
1511209248984:PlotCommandsInBuckets <- function (commands.df) {
1511209248988:# Plots the number of commands run in the console against the time buckets.
1511209248989:#
1511209248990:# Args:
1511209248991:#   commands.df: the data frame containing the relevant commands and time of
1511209248992:#                running.
1511209248993:commands.df.2 <- commands.df %>%
1511209248994:mutate(time=time_x) %>%
1511209248994:select(-c(time_component, time_x)) %>%
1511209248997:mutate(time_bucket = ClassifyTime(time))
1511209248997:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511209248998:levels = c(kBucket1, kBucket2, kBucket3,
1511209248999:kBucket4, kBucket5, kBucket6,
1511209249000:kBucket7, kBucket8))
1511209249001:time_bucket_analysis <- commands.df.2 %>%
1511209249001:group_by(time_bucket) %>%
1511209249003:summarise(commands.count = sum(!is.na(command)))
1511209249003:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511209249004:group=time_bucket,
1511209249005:geom = 'blank', main = 'At what time am I least lazy?') +
1511209249006:geom_line(aes(group = 1)) +
1511209249007:geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511209249007:xlab("Time") + ylab('R commands run in console') +
1511209249008:theme(axis.text.x = element_text(angle=90)) +
1511209249009:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511209249009:}
1511209255777:PlotCommandsInBuckets(commands.df)
1511209319216:PlotCommandsInBuckets <- function (commands.df) {
1511209319216:# Plots the number of commands run in the console against the time buckets.
1511209319218:#
1511209319218:# Args:
1511209319220:#   commands.df: the data frame containing the relevant commands and time of
1511209319221:#                running.
1511209319222:commands.df.2 <- commands.df %>%
1511209319223:mutate(time=time_x) %>%
1511209319224:select(-c(time_component, time_x)) %>%
1511209319225:mutate(time_bucket = ClassifyTime(time))
1511209319226:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511209319227:levels = c(kBucket1, kBucket2, kBucket3,
1511209319228:kBucket4, kBucket5, kBucket6,
1511209319228:kBucket7, kBucket8))
1511209319229:time_bucket_analysis <- commands.df.2 %>%
1511209319230:group_by(time_bucket) %>%
1511209319231:summarise(commands.count = sum(!is.na(command)))
1511209319232:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511209319233:group=time_bucket,
1511209319233:geom = 'blank', main = 'At what time am I least lazy?') +
1511209319235:geom_line(aes(group = 1)) +
1511209319236:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511209319238:xlab("Time") + ylab('R commands run in console') +
1511209319239:theme(axis.text.x = element_text(angle=90)) +
1511209319240:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511209319241:}
1511209338015:PlotCommandsInBuckets(commands.df)
1511261637150:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
1511269977770:require(dplyr)
1511269978070:require(lubridate)
1511269978215:require(readtext)
1511269978345:require(stringr)
1511269978354:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511269978355:"Assignments/1")
1511269978356:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511269978360:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511269978361:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511269978361:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511269978363:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511269978365:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511269978366:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511269978367:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511269978368:kBucket1 <- 'Midnight to 3 AM'
1511269978369:kBucket2 <- '3 AM to 6 AM'
1511269978370:kBucket3 <- '6 AM to 9 AM'
1511269978371:kBucket4 <- '9 AM to Noon'
1511269978372:kBucket5 <- 'Noon to 3 PM'
1511269978373:kBucket6 <- '3 PM to 6 PM'
1511269978374:kBucket7 <- '6 PM to 9 PM'
1511269978375:kBucket8 <- '9 PM +'
1511269978376:ClassifyTime <- function (command.time) {
1511269978376:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511269978376:#
1511269978377:# Args:
1511269978377:#   command.time: time represented in string in hh:mm:ss format.
1511269978378:#
1511269978378:# Returns:
1511269978378:#   The bucket in which command.time falls.
1511269978379:command.time <- strptime(command.time, format = "%H:%M:%S")
1511269978379:bucket <- kBucket1
1511269978381:# TODO: Normal if elseif else blocks not working. Look into this.
1511269978382:bucket <- ifelse(command.time < kThreeAm,
1511269978383:kBucket1,
1511269978384:ifelse(command.time < kSixAm,
1511269978385:kBucket2,
1511269978386:ifelse(command.time < kNineAm,
1511269978387:kBucket3,
1511269978387:ifelse(command.time < kNoon,
1511269978387:kBucket4,
1511269978388:ifelse(command.time < kThreePm,
1511269978388:kBucket5,
1511269978389:ifelse(command.time < kSixPm,
1511269978390:kBucket6,
1511269978391:ifelse(
1511269978392:command.time < kNinePm,
1511269978392:kBucket7,
1511269978394:kBucket8)))))))
1511269978395:return(bucket)
1511269978396:}
1511269978398:PlotCommandsInBuckets <- function (commands.df) {
1511269978399:# Plots the number of commands run in the console against the time buckets.
1511269978400:#
1511269978400:# Args:
1511269978401:#   commands.df: the data frame containing the relevant commands and time of
1511269978401:#                running.
1511269978403:commands.df.2 <- commands.df %>%
1511269978403:mutate(time=time_x) %>%
1511269978404:select(-c(time_component, time_x)) %>%
1511269978405:mutate(time_bucket = ClassifyTime(time))
1511269978407:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511269978408:levels = c(kBucket1, kBucket2, kBucket3,
1511269978409:kBucket4, kBucket5, kBucket6,
1511269978410:kBucket7, kBucket8))
1511269978411:time_bucket_analysis <- commands.df.2 %>%
1511269978412:group_by(time_bucket) %>%
1511269978413:summarise(commands.count = sum(!is.na(command)))
1511269978414:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511269978415:group=time_bucket,
1511269978415:geom = 'blank', main = 'At what times am I less lazy?') +
1511269978417:geom_line(aes(group = 1)) +
1511269978418:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511269978419:xlab("Time") + ylab('R commands run in console') +
1511269978420:theme(axis.text.x = element_text(angle=90)) +
1511269978421:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511269978421:}
1511269978422:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511269978423:connection <- file('history.txt', 'r')
1511269978424:history.txt <- readLines(con = connection)
1511269978532:is.assignment.directory <- FALSE
1511269978532:commands <- c()
1511269978533:times <- c()
1511269978534:# NUmber of lines in the imported file
1511269978534:initial.file.length <- length(history.txt)
1511269978535:# For the analysis, we need to consider only comments run while working on the
1511269978535:# assignment. Throughout the assignment, the working directory has been the
1511269978536:# same. This fact is made use of to identify which are the commands relevant
1511269978537:# to the analysis.
1511269978537:for (line.num in 1:length(history.txt)) {
1511269978537:history.line <- history.txt[line.num]
1511269978538:colon.index <- str_locate(history.line, ':')[1]
1511269978538:time.component <- substr(history.line, 1, colon.index - 1)
1511269978539:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511269978539:if (startsWith(command, 'setwd')) {
1511269978539:if (startsWith(command, setwd.command)) {
1511269978540:is.assignment.directory <- TRUE
1511269978540:} else {
1511269978540:is.assignment.directory <- FALSE
1511269978541:}
1511269978541:}
1511269978542:if (is.assignment.directory == TRUE) {
1511269978542:times <- append(times, time.component)
1511269978543:commands <- append(commands, command)
1511269978543:}
1511269978543:}
1511269979449:close(connection)
1511269979449:commands.df <- data.frame(time = times, command = commands,
1511269979450:stringsAsFactors = FALSE)
1511269979452:commands.df <- commands.df %>%
1511269979452:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511269979453:mutate(time_component = as.double(time) %% 86400000) %>%
1511269979453:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511269979565:# Some of the rows can be removed
1511269979565:# Comments, Rmd chunk beginnings etc.
1511269979566:# Also, multi-line commands are represented as multiple lines in the history
1511269979567:# file. This also needs to be taken care of.
1511269979567:commands.df <- commands.df %>%
1511269979567:filter(!startsWith(command, '```')) %>%
1511269979569:filter(!startsWith(command, '#')) %>%
1511269979569:filter(!startsWith(command, '"')) %>%
1511269979570:filter(!startsWith(command, "'")) %>%
1511269979570:filter(!startsWith(command, '}')) %>%
1511269979570:filter(!startsWith(command, '**')) %>%
1511269979571:mutate(previous_command = lag(command)) %>%
1511269979571:filter(!endsWith(previous_command, ',')) %>%
1511269979571:filter(!endsWith(previous_command, '+'))
1511269979605:final.commands.count <- nrow(commands.df)
1511269979606:help.used <- sum(startsWith(commands.df$command, '?'))
1511269979606:view.used <- sum(startsWith(commands.df$command, 'View'))
1511269979607:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511269979608:sum(startsWith(commands.df$command, 'ggplot'))
1511269979609:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511269979609:sum(startsWith(commands.df$command, 'select')) +
1511269979610:sum(startsWith(commands.df$command, 'mutate')) +
1511269979610:sum(startsWith(commands.df$command, 'arrange')) +
1511269979611:sum(startsWith(commands.df$command, 'summarise')) +
1511269979611:sum(startsWith(commands.df$command, 'inner_join')) +
1511269979611:sum(startsWith(commands.df$command, 'group_by')) +
1511269979612:sum(startsWith(commands.df$command, 'left_join'))
1511269979613:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511270053699:View(commands.df)
1511270106309:x <- commands.df %>% group_by(date) %>% summarise(command.count = sum(!is.na(command)))
1511270112209:View(x)
1511270130303:x <- commands.df %>% group_by(date)
1511270131336:x
1511270145309:unique(commands.df$date)
1511270162212:str(commands.df)
1511270215074:x <- commands.df %>%
1511270215075:mutate(date=as.character(date)) %>%
1511270215076:group_by(date) %>%
1511270215076:summarise(command.count = sum(!is.na(command)))
1511270217989:View(x)
1511270257919:View(commands.df)
1511270287608:require(dplyr)
1511270287609:require(lubridate)
1511270287610:require(readtext)
1511270287611:require(stringr)
1511270287612:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511270287613:"Assignments/1")
1511270287614:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511270287614:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511270287616:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511270287616:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511270287618:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511270287618:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511270287622:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511270287624:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511270287625:kBucket1 <- 'Midnight to 3 AM'
1511270287626:kBucket2 <- '3 AM to 6 AM'
1511270287626:kBucket3 <- '6 AM to 9 AM'
1511270287628:kBucket4 <- '9 AM to Noon'
1511270287628:kBucket5 <- 'Noon to 3 PM'
1511270287630:kBucket6 <- '3 PM to 6 PM'
1511270287631:kBucket7 <- '6 PM to 9 PM'
1511270287632:kBucket8 <- '9 PM +'
1511270287633:ClassifyTime <- function (command.time) {
1511270287633:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511270287634:#
1511270287635:# Args:
1511270287636:#   command.time: time represented in string in hh:mm:ss format.
1511270287638:#
1511270287639:# Returns:
1511270287640:#   The bucket in which command.time falls.
1511270287641:command.time <- strptime(command.time, format = "%H:%M:%S")
1511270287642:bucket <- kBucket1
1511270287643:# TODO: Normal if elseif else blocks not working. Look into this.
1511270287643:bucket <- ifelse(command.time < kThreeAm,
1511270287644:kBucket1,
1511270287645:ifelse(command.time < kSixAm,
1511270287646:kBucket2,
1511270287647:ifelse(command.time < kNineAm,
1511270287647:kBucket3,
1511270287648:ifelse(command.time < kNoon,
1511270287648:kBucket4,
1511270287649:ifelse(command.time < kThreePm,
1511270287649:kBucket5,
1511270287650:ifelse(command.time < kSixPm,
1511270287650:kBucket6,
1511270287651:ifelse(
1511270287651:command.time < kNinePm,
1511270287652:kBucket7,
1511270287652:kBucket8)))))))
1511270287653:return(bucket)
1511270287654:}
1511270287655:PlotCommandsInBuckets <- function (commands.df) {
1511270287656:# Plots the number of commands run in the console against the time buckets.
1511270287656:#
1511270287657:# Args:
1511270287657:#   commands.df: the data frame containing the relevant commands and time of
1511270287658:#                running.
1511270287658:commands.df.2 <- commands.df %>%
1511270287658:mutate(time=time_x) %>%
1511270287659:select(-c(time_component, time_x)) %>%
1511270287659:mutate(time_bucket = ClassifyTime(time))
1511270287661:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511270287661:levels = c(kBucket1, kBucket2, kBucket3,
1511270287662:kBucket4, kBucket5, kBucket6,
1511270287663:kBucket7, kBucket8))
1511270287666:time_bucket_analysis <- commands.df.2 %>%
1511270287667:group_by(time_bucket) %>%
1511270287667:summarise(commands.count = sum(!is.na(command)))
1511270287668:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511270287669:group=time_bucket,
1511270287670:geom = 'blank', main = 'At what times am I less lazy?') +
1511270287672:geom_line(aes(group = 1)) +
1511270287673:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511270287675:xlab("Time") + ylab('R commands run in console') +
1511270287676:theme(axis.text.x = element_text(angle=90)) +
1511270287677:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511270287677:}
1511270287679:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511270287680:connection <- file('history.txt', 'r')
1511270287681:history.txt <- readLines(con = connection)
1511270287788:is.assignment.directory <- FALSE
1511270287788:commands <- c()
1511270287789:times <- c()
1511270287790:# NUmber of lines in the imported file
1511270287791:initial.file.length <- length(history.txt)
1511270287792:# For the analysis, we need to consider only comments run while working on the
1511270287792:# assignment. Throughout the assignment, the working directory has been the
1511270287793:# same. This fact is made use of to identify which are the commands relevant
1511270287793:# to the analysis.
1511270287794:for (line.num in 1:length(history.txt)) {
1511270287794:history.line <- history.txt[line.num]
1511270287795:colon.index <- str_locate(history.line, ':')[1]
1511270287795:time.component <- substr(history.line, 1, colon.index - 1)
1511270287795:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511270287796:if (startsWith(command, 'setwd')) {
1511270287796:if (startsWith(command, setwd.command)) {
1511270287796:is.assignment.directory <- TRUE
1511270287797:} else {
1511270287797:is.assignment.directory <- FALSE
1511270287797:}
1511270287798:}
1511270287798:if (is.assignment.directory == TRUE) {
1511270287799:times <- append(times, time.component)
1511270287799:commands <- append(commands, command)
1511270287799:}
1511270287800:}
1511270288760:close(connection)
1511270288760:commands.df <- data.frame(time = times, command = commands,
1511270288761:stringsAsFactors = FALSE)
1511270288762:commands.df <- commands.df %>%
1511270288763:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511270288763:mutate(time_component = as.double(time) %% 86400000) %>%
1511270288763:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511270288780:# Some of the rows can be removed
1511270288781:# Comments, Rmd chunk beginnings etc.
1511270288782:# Also, multi-line commands are represented as multiple lines in the history
1511270288782:# file. This also needs to be taken care of.
1511270288784:commands.df <- commands.df %>%
1511270288785:filter(!startsWith(command, '```')) %>%
1511270288786:filter(!startsWith(command, '#')) %>%
1511270288786:filter(!startsWith(command, '"')) %>%
1511270288789:filter(!startsWith(command, "'")) %>%
1511270288789:filter(!startsWith(command, '}')) %>%
1511270288790:filter(!startsWith(command, '**')) %>%
1511270288790:mutate(previous_command = lag(command)) %>%
1511270288791:filter(!endsWith(previous_command, ',')) %>%
1511270288791:filter(!endsWith(previous_command, '+'))
1511270288842:final.commands.count <- nrow(commands.df)
1511270288843:help.used <- sum(startsWith(commands.df$command, '?'))
1511270288844:view.used <- sum(startsWith(commands.df$command, 'View'))
1511270288844:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511270288845:sum(startsWith(commands.df$command, 'ggplot'))
1511270288846:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511270288846:sum(startsWith(commands.df$command, 'select')) +
1511270288848:sum(startsWith(commands.df$command, 'mutate')) +
1511270288848:sum(startsWith(commands.df$command, 'arrange')) +
1511270288849:sum(startsWith(commands.df$command, 'summarise')) +
1511270288849:sum(startsWith(commands.df$command, 'inner_join')) +
1511270288850:sum(startsWith(commands.df$command, 'group_by')) +
1511270288851:sum(startsWith(commands.df$command, 'left_join'))
1511270288852:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511270288853:x <- commands.df %>%
1511270288853:mutate(date=as.character(date)) %>%
1511270288854:group_by(date) %>%
1511270288855:summarise(command.count = sum(!is.na(command)))
1511270290952:View(x)
1511270296583:qplot(date, command.count, data=x)
1511270308451:require(ggplot2)
1511270311006:qplot(date, command.count, data=x)
1511270345634:qplot(date, command.count, data=x, geom='line')
1511270354854:qplot(date, command.count, data=x, geom='line', group=date)
1511270496953:require(dplyr)
1511270496954:require(ggplot2)
1511270496955:require(lubridate)
1511270496956:require(readtext)
1511270496958:require(stringr)
1511270496959:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511270496961:"Assignments/1")
1511270496962:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511270496963:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511270496964:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511270496966:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511270496967:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511270496968:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511270496969:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511270496970:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511270496971:kBucket1 <- 'Midnight to 3 AM'
1511270496972:kBucket2 <- '3 AM to 6 AM'
1511270496973:kBucket3 <- '6 AM to 9 AM'
1511270496974:kBucket4 <- '9 AM to Noon'
1511270496975:kBucket5 <- 'Noon to 3 PM'
1511270496977:kBucket6 <- '3 PM to 6 PM'
1511270496979:kBucket7 <- '6 PM to 9 PM'
1511270496980:kBucket8 <- '9 PM +'
1511270496981:ClassifyTime <- function (command.time) {
1511270496982:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511270496983:#
1511270496983:# Args:
1511270496984:#   command.time: time represented in string in hh:mm:ss format.
1511270496984:#
1511270496985:# Returns:
1511270496985:#   The bucket in which command.time falls.
1511270496986:command.time <- strptime(command.time, format = "%H:%M:%S")
1511270496986:bucket <- kBucket1
1511270496987:# TODO: Normal if elseif else blocks not working. Look into this.
1511270496989:bucket <- ifelse(command.time < kThreeAm,
1511270496990:kBucket1,
1511270496991:ifelse(command.time < kSixAm,
1511270496991:kBucket2,
1511270496992:ifelse(command.time < kNineAm,
1511270496992:kBucket3,
1511270496993:ifelse(command.time < kNoon,
1511270496993:kBucket4,
1511270496994:ifelse(command.time < kThreePm,
1511270496994:kBucket5,
1511270496994:ifelse(command.time < kSixPm,
1511270496995:kBucket6,
1511270496996:ifelse(
1511270496996:command.time < kNinePm,
1511270496997:kBucket7,
1511270496998:kBucket8)))))))
1511270496998:return(bucket)
1511270496999:}
1511270497001:PlotCommandsInBuckets <- function (commands.df) {
1511270497002:# Plots the number of commands run in the console against the time buckets.
1511270497003:#
1511270497004:# Args:
1511270497005:#   commands.df: the data frame containing the relevant commands and time of
1511270497005:#                running.
1511270497005:commands.df.2 <- commands.df %>%
1511270497006:mutate(time=time_x) %>%
1511270497006:select(-c(time_component, time_x)) %>%
1511270497006:mutate(time_bucket = ClassifyTime(time))
1511270497007:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511270497007:levels = c(kBucket1, kBucket2, kBucket3,
1511270497007:kBucket4, kBucket5, kBucket6,
1511270497008:kBucket7, kBucket8))
1511270497008:time_bucket_analysis <- commands.df.2 %>%
1511270497009:group_by(time_bucket) %>%
1511270497009:summarise(commands.count = sum(!is.na(command)))
1511270497011:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511270497012:group=time_bucket,
1511270497015:geom = 'blank', main = 'At what times am I less lazy?') +
1511270497016:geom_line(aes(group = 1)) +
1511270497017:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511270497017:xlab("Time") + ylab('R commands run in console') +
1511270497019:theme(axis.text.x = element_text(angle=90)) +
1511270497020:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511270497021:}
1511270497021:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511270497022:connection <- file('history.txt', 'r')
1511270497024:history.txt <- readLines(con = connection)
1511270497137:is.assignment.directory <- FALSE
1511270497138:commands <- c()
1511270497138:times <- c()
1511270497139:# NUmber of lines in the imported file
1511270497139:initial.file.length <- length(history.txt)
1511270497140:# For the analysis, we need to consider only comments run while working on the
1511270497140:# assignment. Throughout the assignment, the working directory has been the
1511270497142:# same. This fact is made use of to identify which are the commands relevant
1511270497142:# to the analysis.
1511270497142:for (line.num in 1:length(history.txt)) {
1511270497143:history.line <- history.txt[line.num]
1511270497143:colon.index <- str_locate(history.line, ':')[1]
1511270497144:time.component <- substr(history.line, 1, colon.index - 1)
1511270497144:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511270497144:if (startsWith(command, 'setwd')) {
1511270497145:if (startsWith(command, setwd.command)) {
1511270497145:is.assignment.directory <- TRUE
1511270497146:} else {
1511270497146:is.assignment.directory <- FALSE
1511270497147:}
1511270497147:}
1511270497148:if (is.assignment.directory == TRUE) {
1511270497149:times <- append(times, time.component)
1511270497149:commands <- append(commands, command)
1511270497150:}
1511270497150:}
1511270498106:close(connection)
1511270498107:commands.df <- data.frame(time = times, command = commands,
1511270498107:stringsAsFactors = FALSE)
1511270498108:commands.df <- commands.df %>%
1511270498109:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511270498110:mutate(time_component = as.double(time) %% 86400000) %>%
1511270498111:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511270498130:# Some of the rows can be removed
1511270498130:# Comments, Rmd chunk beginnings etc.
1511270498131:# Also, multi-line commands are represented as multiple lines in the history
1511270498132:# file. This also needs to be taken care of.
1511270498133:commands.df <- commands.df %>%
1511270498134:filter(!startsWith(command, '```')) %>%
1511270498134:filter(!startsWith(command, '#')) %>%
1511270498135:filter(!startsWith(command, '"')) %>%
1511270498135:filter(!startsWith(command, "'")) %>%
1511270498135:filter(!startsWith(command, '}')) %>%
1511270498136:filter(!startsWith(command, '**')) %>%
1511270498136:mutate(previous_command = lag(command)) %>%
1511270498136:filter(!endsWith(previous_command, ',')) %>%
1511270498137:filter(!endsWith(previous_command, '+'))
1511270498171:final.commands.count <- nrow(commands.df)
1511270498172:help.used <- sum(startsWith(commands.df$command, '?'))
1511270498173:view.used <- sum(startsWith(commands.df$command, 'View'))
1511270498174:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511270498175:sum(startsWith(commands.df$command, 'ggplot'))
1511270498176:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511270498176:sum(startsWith(commands.df$command, 'select')) +
1511270498178:sum(startsWith(commands.df$command, 'mutate')) +
1511270498179:sum(startsWith(commands.df$command, 'arrange')) +
1511270498179:sum(startsWith(commands.df$command, 'summarise')) +
1511270498180:sum(startsWith(commands.df$command, 'inner_join')) +
1511270498180:sum(startsWith(commands.df$command, 'group_by')) +
1511270498180:sum(startsWith(commands.df$command, 'left_join'))
1511270498181:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511270498182:x <- commands.df %>%
1511270498183:mutate(date=as.character(date)) %>%
1511270498184:group_by(date) %>%
1511270498185:summarise(command.count = sum(!is.na(command)))
1511270552548:View(commands.df)
1511270626073:require(dplyr)
1511270626074:require(ggplot2)
1511270626075:require(lubridate)
1511270626076:require(readtext)
1511270626076:require(stringr)
1511270626077:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511270626077:"Assignments/1")
1511270626078:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511270626079:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511270626079:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511270626081:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511270626082:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511270626083:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511270626084:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511270626085:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511270626086:kBucket1 <- 'Midnight to 3 AM'
1511270626087:kBucket2 <- '3 AM to 6 AM'
1511270626087:kBucket3 <- '6 AM to 9 AM'
1511270626089:kBucket4 <- '9 AM to Noon'
1511270626089:kBucket5 <- 'Noon to 3 PM'
1511270626090:kBucket6 <- '3 PM to 6 PM'
1511270626091:kBucket7 <- '6 PM to 9 PM'
1511270626092:kBucket8 <- '9 PM +'
1511270626093:ClassifyTime <- function (command.time) {
1511270626094:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511270626095:#
1511270626096:# Args:
1511270626096:#   command.time: time represented in string in hh:mm:ss format.
1511270626098:#
1511270626099:# Returns:
1511270626100:#   The bucket in which command.time falls.
1511270626100:command.time <- strptime(command.time, format = "%H:%M:%S")
1511270626101:bucket <- kBucket1
1511270626101:# TODO: Normal if elseif else blocks not working. Look into this.
1511270626102:bucket <- ifelse(command.time < kThreeAm,
1511270626103:kBucket1,
1511270626104:ifelse(command.time < kSixAm,
1511270626105:kBucket2,
1511270626106:ifelse(command.time < kNineAm,
1511270626107:kBucket3,
1511270626108:ifelse(command.time < kNoon,
1511270626109:kBucket4,
1511270626109:ifelse(command.time < kThreePm,
1511270626110:kBucket5,
1511270626110:ifelse(command.time < kSixPm,
1511270626111:kBucket6,
1511270626112:ifelse(
1511270626113:command.time < kNinePm,
1511270626113:kBucket7,
1511270626115:kBucket8)))))))
1511270626115:return(bucket)
1511270626115:}
1511270626116:PlotCommandsInBuckets <- function (commands.df) {
1511270626117:# Plots the number of commands run in the console against the time buckets.
1511270626118:#
1511270626118:# Args:
1511270626119:#   commands.df: the data frame containing the relevant commands and time of
1511270626119:#                running.
1511270626122:commands.df.2 <- commands.df %>%
1511270626122:mutate(time=time_x) %>%
1511270626123:select(-c(time_component, time_x)) %>%
1511270626123:mutate(time_bucket = ClassifyTime(time))
1511270626125:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511270626125:levels = c(kBucket1, kBucket2, kBucket3,
1511270626126:kBucket4, kBucket5, kBucket6,
1511270626127:kBucket7, kBucket8))
1511270626129:time_bucket_analysis <- commands.df.2 %>%
1511270626129:group_by(time_bucket) %>%
1511270626131:summarise(commands.count = sum(!is.na(command)))
1511270626132:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511270626133:group=time_bucket,
1511270626135:geom = 'blank', main = 'At what times am I less lazy?') +
1511270626136:geom_line(aes(group = 1)) +
1511270626136:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511270626138:xlab("Time") + ylab('R commands run in console') +
1511270626139:theme(axis.text.x = element_text(angle=90)) +
1511270626140:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511270626140:}
1511270626141:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511270626142:connection <- file('history.txt', 'r')
1511270626143:history.txt <- readLines(con = connection)
1511270626260:is.assignment.directory <- FALSE
1511270626260:commands <- c()
1511270626261:times <- c()
1511270626262:# NUmber of lines in the imported file
1511270626262:initial.file.length <- length(history.txt)
1511270626263:# For the analysis, we need to consider only comments run while working on the
1511270626263:# assignment. Throughout the assignment, the working directory has been the
1511270626264:# same. This fact is made use of to identify which are the commands relevant
1511270626265:# to the analysis.
1511270626265:for (line.num in 1:length(history.txt)) {
1511270626265:history.line <- history.txt[line.num]
1511270626266:colon.index <- str_locate(history.line, ':')[1]
1511270626266:time.component <- substr(history.line, 1, colon.index - 1)
1511270626267:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511270626267:if (startsWith(command, 'setwd')) {
1511270626267:if (startsWith(command, setwd.command)) {
1511270626268:is.assignment.directory <- TRUE
1511270626268:} else {
1511270626268:is.assignment.directory <- FALSE
1511270626269:}
1511270626269:}
1511270626269:if (is.assignment.directory == TRUE) {
1511270626270:times <- append(times, time.component)
1511270626270:commands <- append(commands, command)
1511270626271:}
1511270626272:}
1511270627101:close(connection)
1511270627102:commands.df <- data.frame(time = times, command = commands,
1511270627102:stringsAsFactors = FALSE)
1511270627103:commands.df <- commands.df %>%
1511270627104:mutate(date = as.Date(as.double(time) / 86400000, origin = '1970-01-01')) %>%
1511270627105:mutate(time_component = as.double(time) %% 86400000) %>%
1511270627106:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511270627129:# Some of the rows can be removed
1511270627129:# Comments, Rmd chunk beginnings etc.
1511270627131:# Also, multi-line commands are represented as multiple lines in the history
1511270627132:# file. This also needs to be taken care of.
1511270627133:commands.df <- commands.df %>%
1511270627133:filter(!startsWith(command, '```')) %>%
1511270627134:filter(!startsWith(command, '#')) %>%
1511270627135:filter(!startsWith(command, '"')) %>%
1511270627135:filter(!startsWith(command, "'")) %>%
1511270627136:filter(!startsWith(command, '}')) %>%
1511270627136:filter(!startsWith(command, '**')) %>%
1511270627136:mutate(previous_command = lag(command)) %>%
1511270627137:filter(!endsWith(previous_command, ',')) %>%
1511270627137:filter(!endsWith(previous_command, '+'))
1511270627174:final.commands.count <- nrow(commands.df)
1511270627175:help.used <- sum(startsWith(commands.df$command, '?'))
1511270627176:view.used <- sum(startsWith(commands.df$command, 'View'))
1511270627177:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511270627178:sum(startsWith(commands.df$command, 'ggplot'))
1511270627180:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511270627180:sum(startsWith(commands.df$command, 'select')) +
1511270627181:sum(startsWith(commands.df$command, 'mutate')) +
1511270627182:sum(startsWith(commands.df$command, 'arrange')) +
1511270627182:sum(startsWith(commands.df$command, 'summarise')) +
1511270627183:sum(startsWith(commands.df$command, 'inner_join')) +
1511270627183:sum(startsWith(commands.df$command, 'group_by')) +
1511270627183:sum(startsWith(commands.df$command, 'left_join'))
1511270627184:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511270627185:x <- commands.df %>%
1511270627186:mutate(date=as.character(date)) %>%
1511270627186:group_by(date) %>%
1511270627186:summarise(command.count = sum(!is.na(command)))
1511270632611:View(commands.df)
1511270751216:y <- 1511270354854
1511270823487:y.date = as.Date(as.double(y) / 86400000, origin = '1970-01-01')
1511270882974:y.time.component = as.double(y) %% 86400000
1511270918904:time_y = format(as.POSIXct(y.date) + y.time.component / 1000, "%H:%M:%S")
1511270973923:y <- 1511270918904
1511270978704:y.time.component = as.double(y) %% 86400000
1511270982842:time_y = format(as.POSIXct(y.date) + y.time.component / 1000, "%H:%M:%S")
1511270985956:time_y
1511271028191:x = 1
1511271042518:y = 1511271028191
1511271046827:y.time.component = as.double(y) %% 86400000
1511271048954:time_y = format(as.POSIXct(y.date) + y.time.component / 1000, "%H:%M:%S")
1511271050794:time_y
1511271325469:y <- 1511270918904 + 36000000
1511271329898:y.time.component = as.double(y) %% 86400000
1511271332181:time_y = format(as.POSIXct(y.date) + y.time.component / 1000, "%H:%M:%S")
1511271335073:time_y
1511271392595:y <- 1511270918904 + 38700000
1511271394281:y.time.component = as.double(y) %% 86400000
1511271396038:time_y = format(as.POSIXct(y.date) + y.time.component / 1000, "%H:%M:%S")
1511271397256:time_y
1511271456771:y <- 1511270918904 + 38580000
1511271459826:y.time.component = as.double(y) %% 86400000
1511271461847:y <- 1511270918904 + 38580000
1511271464027:y.time.component = as.double(y) %% 86400000
1511271465793:time_y
1511271468944:time_y = format(as.POSIXct(y.date) + y.time.component / 1000, "%H:%M:%S")
1511271469930:time_y
1511271579484:require(dplyr)
1511271579485:require(ggplot2)
1511271579486:require(lubridate)
1511271579487:require(readtext)
1511271579488:require(stringr)
1511271579489:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511271579490:"Assignments/1")
1511271579490:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511271579491:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511271579492:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511271579493:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511271579494:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511271579495:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511271579496:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511271579496:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511271579497:kBucket1 <- 'Midnight to 3 AM'
1511271579498:kBucket2 <- '3 AM to 6 AM'
1511271579500:kBucket3 <- '6 AM to 9 AM'
1511271579502:kBucket4 <- '9 AM to Noon'
1511271579503:kBucket5 <- 'Noon to 3 PM'
1511271579504:kBucket6 <- '3 PM to 6 PM'
1511271579505:kBucket7 <- '6 PM to 9 PM'
1511271579506:kBucket8 <- '9 PM +'
1511271579507:ClassifyTime <- function (command.time) {
1511271579507:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511271579508:#
1511271579509:# Args:
1511271579510:#   command.time: time represented in string in hh:mm:ss format.
1511271579511:#
1511271579512:# Returns:
1511271579513:#   The bucket in which command.time falls.
1511271579513:command.time <- strptime(command.time, format = "%H:%M:%S")
1511271579515:bucket <- kBucket1
1511271579516:# TODO: Normal if elseif else blocks not working. Look into this.
1511271579517:bucket <- ifelse(command.time < kThreeAm,
1511271579520:kBucket1,
1511271579520:ifelse(command.time < kSixAm,
1511271579521:kBucket2,
1511271579522:ifelse(command.time < kNineAm,
1511271579523:kBucket3,
1511271579524:ifelse(command.time < kNoon,
1511271579526:kBucket4,
1511271579527:ifelse(command.time < kThreePm,
1511271579528:kBucket5,
1511271579528:ifelse(command.time < kSixPm,
1511271579530:kBucket6,
1511271579530:ifelse(
1511271579531:command.time < kNinePm,
1511271579532:kBucket7,
1511271579532:kBucket8)))))))
1511271579533:return(bucket)
1511271579533:}
1511271579535:PlotCommandsInBuckets <- function (commands.df) {
1511271579535:# Plots the number of commands run in the console against the time buckets.
1511271579536:#
1511271579536:# Args:
1511271579537:#   commands.df: the data frame containing the relevant commands and time of
1511271579537:#                running.
1511271579537:commands.df.2 <- commands.df %>%
1511271579538:mutate(time=time_x) %>%
1511271579540:select(-c(time_component, time_x)) %>%
1511271579540:mutate(time_bucket = ClassifyTime(time))
1511271579542:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511271579542:levels = c(kBucket1, kBucket2, kBucket3,
1511271579543:kBucket4, kBucket5, kBucket6,
1511271579544:kBucket7, kBucket8))
1511271579545:time_bucket_analysis <- commands.df.2 %>%
1511271579546:group_by(time_bucket) %>%
1511271579547:summarise(commands.count = sum(!is.na(command)))
1511271579548:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511271579550:group=time_bucket,
1511271579551:geom = 'blank', main = 'At what times am I less lazy?') +
1511271579554:geom_line(aes(group = 1)) +
1511271579555:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511271579556:xlab("Time") + ylab('R commands run in console') +
1511271579556:theme(axis.text.x = element_text(angle=90)) +
1511271579557:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511271579557:}
1511271579559:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511271579560:connection <- file('history.txt', 'r')
1511271579561:history.txt <- readLines(con = connection)
1511271579678:is.assignment.directory <- FALSE
1511271579679:commands <- c()
1511271579680:times <- c()
1511271579681:# NUmber of lines in the imported file
1511271579681:initial.file.length <- length(history.txt)
1511271579682:# For the analysis, we need to consider only comments run while working on the
1511271579683:# assignment. Throughout the assignment, the working directory has been the
1511271579684:# same. This fact is made use of to identify which are the commands relevant
1511271579684:# to the analysis.
1511271579685:for (line.num in 1:length(history.txt)) {
1511271579685:history.line <- history.txt[line.num]
1511271579685:colon.index <- str_locate(history.line, ':')[1]
1511271579686:time.component <- substr(history.line, 1, colon.index - 1)
1511271579686:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511271579687:if (startsWith(command, 'setwd')) {
1511271579687:if (startsWith(command, setwd.command)) {
1511271579687:is.assignment.directory <- TRUE
1511271579688:} else {
1511271579688:is.assignment.directory <- FALSE
1511271579688:}
1511271579689:}
1511271579689:if (is.assignment.directory == TRUE) {
1511271579690:times <- append(times, time.component)
1511271579690:commands <- append(commands, command)
1511271579691:}
1511271579691:}
1511271580510:close(connection)
1511271580510:commands.df <- data.frame(time = times, command = commands,
1511271580511:stringsAsFactors = FALSE)
1511271580512:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511271580513:# between the time in the file and the actual time, could be an issue of not
1511271580514:# using the proper timezone. For now, adding an appropriate value of 38580000
1511271580514:# milliseconds to the value in the history file. This equates to 10 hours and
1511271580514:# 43 minutes.
1511271580515:commands.df <- commands.df %>%
1511271580516:mutate(date = as.Date((as.double(time) + 38580000) / 86400000,
1511271580517:origin = '1970-01-01')) %>%
1511271580518:mutate(time_component = as.double(time) %% 86400000) %>%
1511271580518:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511271580537:# Some of the rows can be removed
1511271580537:# Comments, Rmd chunk beginnings etc.
1511271580538:# Also, multi-line commands are represented as multiple lines in the history
1511271580538:# file. This also needs to be taken care of.
1511271580539:commands.df <- commands.df %>%
1511271580539:filter(!startsWith(command, '```')) %>%
1511271580540:filter(!startsWith(command, '#')) %>%
1511271580540:filter(!startsWith(command, '"')) %>%
1511271580541:filter(!startsWith(command, "'")) %>%
1511271580541:filter(!startsWith(command, '}')) %>%
1511271580541:filter(!startsWith(command, '**')) %>%
1511271580542:mutate(previous_command = lag(command)) %>%
1511271580542:filter(!endsWith(previous_command, ',')) %>%
1511271580542:filter(!endsWith(previous_command, '+'))
1511271580580:final.commands.count <- nrow(commands.df)
1511271580580:help.used <- sum(startsWith(commands.df$command, '?'))
1511271580581:view.used <- sum(startsWith(commands.df$command, 'View'))
1511271580582:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511271580583:sum(startsWith(commands.df$command, 'ggplot'))
1511271580585:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511271580586:sum(startsWith(commands.df$command, 'select')) +
1511271580587:sum(startsWith(commands.df$command, 'mutate')) +
1511271580587:sum(startsWith(commands.df$command, 'arrange')) +
1511271580588:sum(startsWith(commands.df$command, 'summarise')) +
1511271580589:sum(startsWith(commands.df$command, 'inner_join')) +
1511271580589:sum(startsWith(commands.df$command, 'group_by')) +
1511271580589:sum(startsWith(commands.df$command, 'left_join'))
1511271580590:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511271580591:x <- commands.df %>%
1511271580592:mutate(date=as.character(date)) %>%
1511271580593:group_by(date) %>%
1511271580593:summarise(command.count = sum(!is.na(command)))
1511271595203:PlotCommandsInBuckets(commands.df)
1511271663876:qplot(date, command.count, data=x)
1511271673619:View(commands.df)
1511271676296:View(x)
1511271952653:require(dplyr)
1511271952654:require(ggplot2)
1511271952655:require(lubridate)
1511271952655:require(readtext)
1511271952657:require(stringr)
1511271952658:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511271952658:"Assignments/1")
1511271952660:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511271952661:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511271952663:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511271952664:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511271952665:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511271952666:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511271952666:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511271952667:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511271952667:kBucket1 <- 'Midnight to 3 AM'
1511271952668:kBucket2 <- '3 AM to 6 AM'
1511271952668:kBucket3 <- '6 AM to 9 AM'
1511271952669:kBucket4 <- '9 AM to Noon'
1511271952669:kBucket5 <- 'Noon to 3 PM'
1511271952670:kBucket6 <- '3 PM to 6 PM'
1511271952670:kBucket7 <- '6 PM to 9 PM'
1511271952670:kBucket8 <- '9 PM +'
1511271952671:ClassifyTime <- function (command.time) {
1511271952671:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511271952672:#
1511271952672:# Args:
1511271952672:#   command.time: time represented in string in hh:mm:ss format.
1511271952673:#
1511271952673:# Returns:
1511271952673:#   The bucket in which command.time falls.
1511271952674:command.time <- strptime(command.time, format = "%H:%M:%S")
1511271952674:bucket <- kBucket1
1511271952674:# TODO: Normal if elseif else blocks not working. Look into this.
1511271952675:bucket <- ifelse(command.time < kThreeAm,
1511271952675:kBucket1,
1511271952675:ifelse(command.time < kSixAm,
1511271952676:kBucket2,
1511271952676:ifelse(command.time < kNineAm,
1511271952676:kBucket3,
1511271952677:ifelse(command.time < kNoon,
1511271952677:kBucket4,
1511271952677:ifelse(command.time < kThreePm,
1511271952678:kBucket5,
1511271952678:ifelse(command.time < kSixPm,
1511271952678:kBucket6,
1511271952679:ifelse(
1511271952679:command.time < kNinePm,
1511271952679:kBucket7,
1511271952680:kBucket8)))))))
1511271952680:return(bucket)
1511271952681:}
1511271952681:PlotCommandsInBuckets <- function (commands.df) {
1511271952682:# Plots the number of commands run in the console against the time buckets.
1511271952683:#
1511271952684:# Args:
1511271952684:#   commands.df: the data frame containing the relevant commands and time of
1511271952684:#                running.
1511271952685:commands.df.2 <- commands.df %>%
1511271952685:mutate(time=time_x) %>%
1511271952685:select(-c(time_component, time_x)) %>%
1511271952686:mutate(time_bucket = ClassifyTime(time))
1511271952686:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511271952686:levels = c(kBucket1, kBucket2, kBucket3,
1511271952687:kBucket4, kBucket5, kBucket6,
1511271952687:kBucket7, kBucket8))
1511271952688:time_bucket_analysis <- commands.df.2 %>%
1511271952688:group_by(time_bucket) %>%
1511271952689:summarise(commands.count = sum(!is.na(command)))
1511271952690:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511271952690:group=time_bucket,
1511271952691:geom = 'blank', main = 'At what times am I less lazy?') +
1511271952691:geom_line(aes(group = 1)) +
1511271952691:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511271952692:xlab("Time") + ylab('R commands run in console') +
1511271952692:theme(axis.text.x = element_text(angle=90)) +
1511271952693:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511271952693:}
1511271952694:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511271952694:connection <- file('history.txt', 'r')
1511271952695:history.txt <- readLines(con = connection)
1511271952815:is.assignment.directory <- FALSE
1511271952816:commands <- c()
1511271952817:times <- c()
1511271952817:# NUmber of lines in the imported file
1511271952819:initial.file.length <- length(history.txt)
1511271952819:# For the analysis, we need to consider only comments run while working on the
1511271952820:# assignment. Throughout the assignment, the working directory has been the
1511271952820:# same. This fact is made use of to identify which are the commands relevant
1511271952821:# to the analysis.
1511271952821:for (line.num in 1:length(history.txt)) {
1511271952821:history.line <- history.txt[line.num]
1511271952822:colon.index <- str_locate(history.line, ':')[1]
1511271952822:time.component <- substr(history.line, 1, colon.index - 1)
1511271952822:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511271952823:if (startsWith(command, 'setwd')) {
1511271952823:if (startsWith(command, setwd.command)) {
1511271952823:is.assignment.directory <- TRUE
1511271952824:} else {
1511271952824:if (!startsWith(command, 'setwd.command')) {
1511271952824:is.assignment.directory <- FALSE
1511271952825:}
1511271952825:}
1511271952826:}
1511271952826:if (is.assignment.directory == TRUE) {
1511271952826:times <- append(times, time.component)
1511271952827:commands <- append(commands, command)
1511271952827:}
1511271952828:}
1511271953997:close(connection)
1511271953997:commands.df <- data.frame(time = times, command = commands,
1511271953998:stringsAsFactors = FALSE)
1511271953999:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511271953999:# between the time in the file and the actual time, could be an issue of not
1511271954000:# using the proper timezone. For now, adding an appropriate value of 38580000
1511271954001:# milliseconds to the value in the history file. This equates to 10 hours and
1511271954002:# 43 minutes.
1511271954002:commands.df <- commands.df %>%
1511271954003:mutate(date = as.Date((as.double(time) + 38580000) / 86400000,
1511271954004:origin = '1970-01-01')) %>%
1511271954004:mutate(time_component = as.double(time) %% 86400000) %>%
1511271954005:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511271954023:# Some of the rows can be removed
1511271954024:# Comments, Rmd chunk beginnings etc.
1511271954025:# Also, multi-line commands are represented as multiple lines in the history
1511271954025:# file. This also needs to be taken care of.
1511271954027:commands.df <- commands.df %>%
1511271954027:filter(!startsWith(command, '```')) %>%
1511271954028:filter(!startsWith(command, '#')) %>%
1511271954029:filter(!startsWith(command, '"')) %>%
1511271954029:filter(!startsWith(command, "'")) %>%
1511271954030:filter(!startsWith(command, '}')) %>%
1511271954030:filter(!startsWith(command, '**')) %>%
1511271954031:mutate(previous_command = lag(command)) %>%
1511271954031:filter(!endsWith(previous_command, ',')) %>%
1511271954031:filter(!endsWith(previous_command, '+'))
1511271954077:final.commands.count <- nrow(commands.df)
1511271954078:help.used <- sum(startsWith(commands.df$command, '?'))
1511271954079:view.used <- sum(startsWith(commands.df$command, 'View'))
1511271954079:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511271954080:sum(startsWith(commands.df$command, 'ggplot'))
1511271954081:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511271954081:sum(startsWith(commands.df$command, 'select')) +
1511271954082:sum(startsWith(commands.df$command, 'mutate')) +
1511271954083:sum(startsWith(commands.df$command, 'arrange')) +
1511271954084:sum(startsWith(commands.df$command, 'summarise')) +
1511271954085:sum(startsWith(commands.df$command, 'inner_join')) +
1511271954085:sum(startsWith(commands.df$command, 'group_by')) +
1511271954086:sum(startsWith(commands.df$command, 'left_join'))
1511271954087:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511271954088:x <- commands.df %>%
1511271954089:mutate(date=as.character(date)) %>%
1511271954089:group_by(date) %>%
1511271954090:summarise(command.count = sum(!is.na(command)))
1511272163349:require(dplyr)
1511272163350:require(ggplot2)
1511272163351:require(lubridate)
1511272163352:require(readtext)
1511272163353:require(stringr)
1511272163355:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511272163355:"Assignments/1")
1511272163356:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511272163357:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511272163357:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511272163358:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511272163359:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511272163360:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511272163361:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511272163362:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511272163363:kBucket1 <- 'Midnight to 3 AM'
1511272163364:kBucket2 <- '3 AM to 6 AM'
1511272163364:kBucket3 <- '6 AM to 9 AM'
1511272163366:kBucket4 <- '9 AM to Noon'
1511272163366:kBucket5 <- 'Noon to 3 PM'
1511272163369:kBucket6 <- '3 PM to 6 PM'
1511272163369:kBucket7 <- '6 PM to 9 PM'
1511272163371:kBucket8 <- '9 PM +'
1511272163371:ClassifyTime <- function (command.time) {
1511272163372:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511272163372:#
1511272163373:# Args:
1511272163373:#   command.time: time represented in string in hh:mm:ss format.
1511272163373:#
1511272163374:# Returns:
1511272163375:#   The bucket in which command.time falls.
1511272163375:command.time <- strptime(command.time, format = "%H:%M:%S")
1511272163376:bucket <- kBucket1
1511272163376:# TODO: Normal if elseif else blocks not working. Look into this.
1511272163376:bucket <- ifelse(command.time < kThreeAm,
1511272163379:kBucket1,
1511272163379:ifelse(command.time < kSixAm,
1511272163379:kBucket2,
1511272163380:ifelse(command.time < kNineAm,
1511272163380:kBucket3,
1511272163381:ifelse(command.time < kNoon,
1511272163381:kBucket4,
1511272163381:ifelse(command.time < kThreePm,
1511272163382:kBucket5,
1511272163382:ifelse(command.time < kSixPm,
1511272163383:kBucket6,
1511272163383:ifelse(
1511272163383:command.time < kNinePm,
1511272163384:kBucket7,
1511272163384:kBucket8)))))))
1511272163384:return(bucket)
1511272163385:}
1511272163385:PlotCommandsInBuckets <- function (commands.df) {
1511272163386:# Plots the number of commands run in the console against the time buckets.
1511272163387:#
1511272163387:# Args:
1511272163388:#   commands.df: the data frame containing the relevant commands and time of
1511272163388:#                running.
1511272163388:commands.df.2 <- commands.df %>%
1511272163389:mutate(time=time_x) %>%
1511272163389:select(-c(time_component, time_x)) %>%
1511272163389:mutate(time_bucket = ClassifyTime(time))
1511272163390:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511272163390:levels = c(kBucket1, kBucket2, kBucket3,
1511272163390:kBucket4, kBucket5, kBucket6,
1511272163391:kBucket7, kBucket8))
1511272163392:time_bucket_analysis <- commands.df.2 %>%
1511272163392:group_by(time_bucket) %>%
1511272163393:summarise(commands.count = sum(!is.na(command)))
1511272163394:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511272163396:group=time_bucket,
1511272163397:geom = 'blank', main = 'At what times am I less lazy?') +
1511272163398:geom_line(aes(group = 1)) +
1511272163399:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511272163400:xlab("Time") + ylab('R commands run in console') +
1511272163401:theme(axis.text.x = element_text(angle=90)) +
1511272163402:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511272163402:}
1511272163405:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511272163406:connection <- file('history.txt', 'r')
1511272163407:history.txt <- readLines(con = connection)
1511272163529:is.assignment.directory <- FALSE
1511272163529:commands <- c()
1511272163530:times <- c()
1511272163531:# NUmber of lines in the imported file
1511272163532:initial.file.length <- length(history.txt)
1511272163532:# For the analysis, we need to consider only comments run while working on the
1511272163533:# assignment. Throughout the assignment, the working directory has been the
1511272163534:# same. This fact is made use of to identify which are the commands relevant
1511272163534:# to the analysis.
1511272163535:for (line.num in 1:length(history.txt)) {
1511272163535:history.line <- history.txt[line.num]
1511272163535:colon.index <- str_locate(history.line, ':')[1]
1511272163536:time.component <- substr(history.line, 1, colon.index - 1)
1511272163536:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511272163536:if (startsWith(command, 'setwd')) {
1511272163537:if (startsWith(command, setwd.command)) {
1511272163537:is.assignment.directory <- TRUE
1511272163538:} else {
1511272163538:if (!startsWith(command, 'setwd.command')) {
1511272163538:is.assignment.directory <- FALSE
1511272163539:}
1511272163539:}
1511272163540:}
1511272163540:if (is.assignment.directory == TRUE) {
1511272163540:times <- append(times, time.component)
1511272163541:commands <- append(commands, command)
1511272163542:}
1511272163543:}
1511272164558:close(connection)
1511272164558:commands.df <- data.frame(time = times, command = commands,
1511272164559:stringsAsFactors = FALSE)
1511272164561:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511272164561:# between the time in the file and the actual time, could be an issue of not
1511272164564:# using the proper timezone. For now, adding an appropriate value of 38580000
1511272164565:# milliseconds to the value in the history file. This equates to 10 hours and
1511272164566:# 43 minutes.
1511272164566:commands.df <- commands.df %>%
1511272164567:mutate(date = as.Date((as.double(time)) / 86400000,
1511272164568:origin = '1970-01-01')) %>%
1511272164569:mutate(time_component = as.double(time) %% 86400000) %>%
1511272164570:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511272164590:# Some of the rows can be removed
1511272164591:# Comments, Rmd chunk beginnings etc.
1511272164592:# Also, multi-line commands are represented as multiple lines in the history
1511272164592:# file. This also needs to be taken care of.
1511272164593:commands.df <- commands.df %>%
1511272164593:filter(!startsWith(command, '```')) %>%
1511272164595:filter(!startsWith(command, '#')) %>%
1511272164596:filter(!startsWith(command, '"')) %>%
1511272164596:filter(!startsWith(command, "'")) %>%
1511272164597:filter(!startsWith(command, '}')) %>%
1511272164598:filter(!startsWith(command, '**')) %>%
1511272164599:mutate(previous_command = lag(command)) %>%
1511272164599:filter(!endsWith(previous_command, ',')) %>%
1511272164602:filter(!endsWith(previous_command, '+'))
1511272164646:final.commands.count <- nrow(commands.df)
1511272164646:help.used <- sum(startsWith(commands.df$command, '?'))
1511272164647:view.used <- sum(startsWith(commands.df$command, 'View'))
1511272164648:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511272164649:sum(startsWith(commands.df$command, 'ggplot'))
1511272164650:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511272164650:sum(startsWith(commands.df$command, 'select')) +
1511272164651:sum(startsWith(commands.df$command, 'mutate')) +
1511272164651:sum(startsWith(commands.df$command, 'arrange')) +
1511272164651:sum(startsWith(commands.df$command, 'summarise')) +
1511272164652:sum(startsWith(commands.df$command, 'inner_join')) +
1511272164652:sum(startsWith(commands.df$command, 'group_by')) +
1511272164652:sum(startsWith(commands.df$command, 'left_join'))
1511272164654:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511272164656:x <- commands.df %>%
1511272164656:mutate(date=as.character(date)) %>%
1511272164657:group_by(date) %>%
1511272164657:summarise(command.count = sum(!is.na(command)))
1511272166771:View(commands.df)
1511272401677:x <- 1
1511272782443:require(dplyr)
1511272782444:require(ggplot2)
1511272782445:require(lubridate)
1511272782445:require(readtext)
1511272782447:require(stringr)
1511272782447:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511272782448:"Assignments/1")
1511272782449:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511272782449:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511272782450:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511272782451:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511272782452:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511272782453:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511272782454:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511272782455:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511272782457:kBucket1 <- 'Midnight to 3 AM'
1511272782458:kBucket2 <- '3 AM to 6 AM'
1511272782459:kBucket3 <- '6 AM to 9 AM'
1511272782460:kBucket4 <- '9 AM to Noon'
1511272782461:kBucket5 <- 'Noon to 3 PM'
1511272782462:kBucket6 <- '3 PM to 6 PM'
1511272782463:kBucket7 <- '6 PM to 9 PM'
1511272782464:kBucket8 <- '9 PM +'
1511272782465:ClassifyTime <- function (command.time) {
1511272782466:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511272782467:#
1511272782467:# Args:
1511272782468:#   command.time: time represented in string in hh:mm:ss format.
1511272782469:#
1511272782470:# Returns:
1511272782471:#   The bucket in which command.time falls.
1511272782472:command.time <- strptime(command.time, format = "%H:%M:%S")
1511272782473:bucket <- kBucket1
1511272782474:# TODO: Normal if elseif else blocks not working. Look into this.
1511272782474:bucket <- ifelse(command.time < kThreeAm,
1511272782475:kBucket1,
1511272782475:ifelse(command.time < kSixAm,
1511272782476:kBucket2,
1511272782476:ifelse(command.time < kNineAm,
1511272782477:kBucket3,
1511272782478:ifelse(command.time < kNoon,
1511272782478:kBucket4,
1511272782479:ifelse(command.time < kThreePm,
1511272782480:kBucket5,
1511272782480:ifelse(command.time < kSixPm,
1511272782482:kBucket6,
1511272782482:ifelse(
1511272782484:command.time < kNinePm,
1511272782484:kBucket7,
1511272782486:kBucket8)))))))
1511272782486:return(bucket)
1511272782487:}
1511272782488:PlotCommandsInBuckets <- function (commands.df) {
1511272782489:# Plots the number of commands run in the console against the time buckets.
1511272782489:#
1511272782490:# Args:
1511272782490:#   commands.df: the data frame containing the relevant commands and time of
1511272782491:#                running.
1511272782491:commands.df.2 <- commands.df %>%
1511272782491:mutate(time=time_x) %>%
1511272782492:select(-c(time_component, time_x)) %>%
1511272782492:mutate(time_bucket = ClassifyTime(time))
1511272782493:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511272782493:levels = c(kBucket1, kBucket2, kBucket3,
1511272782493:kBucket4, kBucket5, kBucket6,
1511272782494:kBucket7, kBucket8))
1511272782495:time_bucket_analysis <- commands.df.2 %>%
1511272782495:group_by(time_bucket) %>%
1511272782495:summarise(commands.count = sum(!is.na(command)))
1511272782496:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511272782496:group=time_bucket,
1511272782500:geom = 'blank', main = 'At what times am I less lazy?') +
1511272782500:geom_line(aes(group = 1)) +
1511272782501:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511272782502:xlab("Time") + ylab('R commands run in console') +
1511272782503:theme(axis.text.x = element_text(angle=90)) +
1511272782503:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511272782505:}
1511272782507:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511272782508:connection <- file('history.txt', 'r')
1511272782512:history.txt <- readLines(con = connection)
1511272782637:is.assignment.directory <- FALSE
1511272782638:commands <- c()
1511272782639:times <- c()
1511272782640:# NUmber of lines in the imported file
1511272782641:initial.file.length <- length(history.txt)
1511272782642:# For the analysis, we need to consider only comments run while working on the
1511272782642:# assignment. Throughout the assignment, the working directory has been the
1511272782643:# same. This fact is made use of to identify which are the commands relevant
1511272782643:# to the analysis.
1511272782644:for (line.num in 1:length(history.txt)) {
1511272782644:history.line <- history.txt[line.num]
1511272782645:colon.index <- str_locate(history.line, ':')[1]
1511272782645:time.component <- substr(history.line, 1, colon.index - 1)
1511272782645:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511272782646:if (startsWith(command, 'setwd')) {
1511272782646:if (startsWith(command, setwd.command)) {
1511272782647:is.assignment.directory <- TRUE
1511272782647:} else {
1511272782647:if (!startsWith(command, 'setwd.command')) {
1511272782648:is.assignment.directory <- FALSE
1511272782648:}
1511272782649:}
1511272782649:}
1511272782650:if (is.assignment.directory == TRUE) {
1511272782651:times <- append(times, time.component)
1511272782652:commands <- append(commands, command)
1511272782652:}
1511272782653:}
1511272783917:close(connection)
1511272783917:commands.df <- data.frame(time = times, command = commands,
1511272783918:stringsAsFactors = FALSE)
1511272783919:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511272783919:# between the time in the file and the actual time, could be an issue of not
1511272783920:# using the proper timezone. For now, adding an appropriate value of 38580000
1511272783921:# milliseconds to the value in the history file. This equates to 10 hours and
1511272783921:# 43 minutes.
1511272783922:commands.df <- commands.df %>%
1511272783922:mutate(date = as.Date((as.double(time)) / 86400000,
1511272783924:origin = '1970-01-01')) %>%
1511272783924:mutate(time_component = as.double(time) %% 86400000) %>%
1511272783925:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511272783944:# Some of the rows can be removed
1511272783944:# Comments, Rmd chunk beginnings etc.
1511272783945:# Also, multi-line commands are represented as multiple lines in the history
1511272783945:# file. This also needs to be taken care of.
1511272783946:commands.df <- commands.df %>%
1511272783946:filter(!startsWith(command, '```')) %>%
1511272783948:filter(!startsWith(command, '#')) %>%
1511272783948:filter(!startsWith(command, '"')) %>%
1511272783950:filter(!startsWith(command, "'")) %>%
1511272783950:filter(!startsWith(command, '}')) %>%
1511272783951:filter(!startsWith(command, '**')) %>%
1511272783952:mutate(previous_command = lag(command)) %>%
1511272783952:filter(!endsWith(previous_command, ',')) %>%
1511272783953:filter(!endsWith(previous_command, '+'))
1511272783991:final.commands.count <- nrow(commands.df)
1511272783992:help.used <- sum(startsWith(commands.df$command, '?'))
1511272783993:view.used <- sum(startsWith(commands.df$command, 'View'))
1511272783993:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511272783994:sum(startsWith(commands.df$command, 'ggplot'))
1511272783995:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511272783995:sum(startsWith(commands.df$command, 'select')) +
1511272783997:sum(startsWith(commands.df$command, 'mutate')) +
1511272783997:sum(startsWith(commands.df$command, 'arrange')) +
1511272783997:sum(startsWith(commands.df$command, 'summarise')) +
1511272783998:sum(startsWith(commands.df$command, 'inner_join')) +
1511272783998:sum(startsWith(commands.df$command, 'group_by')) +
1511272783998:sum(startsWith(commands.df$command, 'left_join'))
1511272783999:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511272784000:x <- commands.df %>%
1511272784001:mutate(date=as.character(date)) %>%
1511272784001:group_by(date) %>%
1511272784002:summarise(command.count = sum(!is.na(command)))
1511275273324:require(dplyr)
1511275273326:require(ggplot2)
1511275273326:require(lubridate)
1511275273328:require(readtext)
1511275273328:require(stringr)
1511275273330:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511275273331:"Assignments/1")
1511275273333:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511275273334:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511275273334:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511275273335:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511275273336:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511275273337:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511275273338:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511275273339:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511275273340:kBucket1 <- 'Midnight to 3 AM'
1511275273340:kBucket2 <- '3 AM to 6 AM'
1511275273342:kBucket3 <- '6 AM to 9 AM'
1511275273342:kBucket4 <- '9 AM to Noon'
1511275273345:kBucket5 <- 'Noon to 3 PM'
1511275273345:kBucket6 <- '3 PM to 6 PM'
1511275273347:kBucket7 <- '6 PM to 9 PM'
1511275273347:kBucket8 <- '9 PM +'
1511275273349:ClassifyTime <- function (command.time) {
1511275273349:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511275273350:#
1511275273351:# Args:
1511275273351:#   command.time: time represented in string in hh:mm:ss format.
1511275273351:#
1511275273352:# Returns:
1511275273352:#   The bucket in which command.time falls.
1511275273353:command.time <- strptime(command.time, format = "%H:%M:%S")
1511275273353:bucket <- kBucket1
1511275273354:# TODO: Normal if elseif else blocks not working. Look into this.
1511275273354:bucket <- ifelse(command.time < kThreeAm,
1511275273355:kBucket1,
1511275273356:ifelse(command.time < kSixAm,
1511275273356:kBucket2,
1511275273357:ifelse(command.time < kNineAm,
1511275273357:kBucket3,
1511275273357:ifelse(command.time < kNoon,
1511275273358:kBucket4,
1511275273358:ifelse(command.time < kThreePm,
1511275273359:kBucket5,
1511275273359:ifelse(command.time < kSixPm,
1511275273359:kBucket6,
1511275273360:ifelse(
1511275273360:command.time < kNinePm,
1511275273360:kBucket7,
1511275273361:kBucket8)))))))
1511275273361:return(bucket)
1511275273362:}
1511275273362:PlotCommandsInBuckets <- function (commands.df) {
1511275273363:# Plots the number of commands run in the console against the time buckets.
1511275273364:#
1511275273364:# Args:
1511275273365:#   commands.df: the data frame containing the relevant commands and time of
1511275273365:#                running.
1511275273365:commands.df.2 <- commands.df %>%
1511275273366:mutate(time=time_x) %>%
1511275273366:select(-c(time_component, time_x)) %>%
1511275273366:mutate(time_bucket = ClassifyTime(time))
1511275273367:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511275273367:levels = c(kBucket1, kBucket2, kBucket3,
1511275273368:kBucket4, kBucket5, kBucket6,
1511275273368:kBucket7, kBucket8))
1511275273368:time_bucket_analysis <- commands.df.2 %>%
1511275273369:group_by(time_bucket) %>%
1511275273371:summarise(commands.count = sum(!is.na(command)))
1511275273372:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511275273372:group=time_bucket,
1511275273373:geom = 'blank', main = 'At what times am I less lazy?') +
1511275273373:geom_line(aes(group = 1)) +
1511275273374:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511275273374:xlab("Time") + ylab('R commands run in console') +
1511275273374:theme(axis.text.x = element_text(angle=90)) +
1511275273375:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511275273375:}
1511275273376:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511275273376:connection <- file('history.txt', 'r')
1511275273379:history.txt <- readLines(con = connection)
1511275273502:is.assignment.directory <- FALSE
1511275273503:commands <- c()
1511275273504:times <- c()
1511275273505:# NUmber of lines in the imported file
1511275273506:initial.file.length <- length(history.txt)
1511275273506:# For the analysis, we need to consider only comments run while working on the
1511275273507:# assignment. Throughout the assignment, the working directory has been the
1511275273508:# same. This fact is made use of to identify which are the commands relevant
1511275273508:# to the analysis.
1511275273509:for (line.num in 1:length(history.txt)) {
1511275273509:history.line <- history.txt[line.num]
1511275273509:colon.index <- str_locate(history.line, ':')[1]
1511275273510:time.component <- substr(history.line, 1, colon.index - 1)
1511275273510:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511275273511:if (startsWith(command, 'setwd')) {
1511275273511:if (startsWith(command, setwd.command)) {
1511275273511:is.assignment.directory <- TRUE
1511275273512:} else {
1511275273512:if (!startsWith(command, 'setwd.command')) {
1511275273513:is.assignment.directory <- FALSE
1511275273513:}
1511275273513:}
1511275273514:}
1511275273514:if (is.assignment.directory == TRUE) {
1511275273515:times <- append(times, time.component)
1511275273515:commands <- append(commands, command)
1511275273516:}
1511275273517:}
1511275274794:close(connection)
1511275274795:commands.df <- data.frame(time = times, command = commands,
1511275274796:stringsAsFactors = FALSE)
1511275274797:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511275274798:# between the time in the file and the actual time, could be an issue of not
1511275274798:# using the proper timezone. For now, adding an appropriate value of 38580000
1511275274800:# milliseconds to the value in the history file. This equates to 10 hours and
1511275274800:# 43 minutes.
1511275274801:commands.df <- commands.df %>%
1511275274801:mutate(date = as.Date((as.double(time)) / 86400000,
1511275274802:origin = '1970-01-01')) %>%
1511275274803:mutate(time_component = as.double(time) %% 86400000) %>%
1511275274803:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511275274826:# Some of the rows can be removed
1511275274827:# Comments, Rmd chunk beginnings etc.
1511275274828:# Also, multi-line commands are represented as multiple lines in the history
1511275274829:# file. This also needs to be taken care of.
1511275274830:commands.df <- commands.df %>%
1511275274830:filter(!startsWith(command, '```')) %>%
1511275274831:filter(!startsWith(command, '#')) %>%
1511275274832:filter(!startsWith(command, '"')) %>%
1511275274832:filter(!startsWith(command, "'")) %>%
1511275274834:filter(!startsWith(command, '}')) %>%
1511275274834:filter(!startsWith(command, '**')) %>%
1511275274835:mutate(previous_command = lag(command)) %>%
1511275274837:filter(!endsWith(previous_command, ','))
1511275274872:final.commands.count <- nrow(commands.df)
1511275274873:help.used <- sum(startsWith(commands.df$command, '?'))
1511275274874:view.used <- sum(startsWith(commands.df$command, 'View'))
1511275274875:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511275274876:sum(startsWith(commands.df$command, 'ggplot'))
1511275274877:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511275274877:sum(startsWith(commands.df$command, 'select')) +
1511275274878:sum(startsWith(commands.df$command, 'mutate')) +
1511275274879:sum(startsWith(commands.df$command, 'arrange')) +
1511275274880:sum(startsWith(commands.df$command, 'summarise')) +
1511275274881:sum(startsWith(commands.df$command, 'inner_join')) +
1511275274882:sum(startsWith(commands.df$command, 'group_by')) +
1511275274883:sum(startsWith(commands.df$command, 'left_join'))
1511275274884:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511275274885:x <- commands.df %>%
1511275274886:mutate(date=as.character(date)) %>%
1511275274887:group_by(date) %>%
1511275274888:summarise(command.count = sum(!is.na(command)))
1511275290312:require(dplyr)
1511275290313:require(ggplot2)
1511275290313:require(lubridate)
1511275290314:require(readtext)
1511275290315:require(stringr)
1511275290315:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511275290316:"Assignments/1")
1511275290318:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511275290319:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511275290321:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511275290322:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511275290322:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511275290324:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511275290324:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511275290325:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511275290326:kBucket1 <- 'Midnight to 3 AM'
1511275290327:kBucket2 <- '3 AM to 6 AM'
1511275290328:kBucket3 <- '6 AM to 9 AM'
1511275290328:kBucket4 <- '9 AM to Noon'
1511275290329:kBucket5 <- 'Noon to 3 PM'
1511275290329:kBucket6 <- '3 PM to 6 PM'
1511275290330:kBucket7 <- '6 PM to 9 PM'
1511275290330:kBucket8 <- '9 PM +'
1511275290331:ClassifyTime <- function (command.time) {
1511275290331:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511275290332:#
1511275290333:# Args:
1511275290333:#   command.time: time represented in string in hh:mm:ss format.
1511275290334:#
1511275290334:# Returns:
1511275290334:#   The bucket in which command.time falls.
1511275290335:command.time <- strptime(command.time, format = "%H:%M:%S")
1511275290335:bucket <- kBucket1
1511275290335:# TODO: Normal if elseif else blocks not working. Look into this.
1511275290336:bucket <- ifelse(command.time < kThreeAm,
1511275290336:kBucket1,
1511275290337:ifelse(command.time < kSixAm,
1511275290337:kBucket2,
1511275290337:ifelse(command.time < kNineAm,
1511275290338:kBucket3,
1511275290338:ifelse(command.time < kNoon,
1511275290338:kBucket4,
1511275290339:ifelse(command.time < kThreePm,
1511275290339:kBucket5,
1511275290339:ifelse(command.time < kSixPm,
1511275290340:kBucket6,
1511275290340:ifelse(
1511275290340:command.time < kNinePm,
1511275290341:kBucket7,
1511275290341:kBucket8)))))))
1511275290341:return(bucket)
1511275290342:}
1511275290343:PlotCommandsInBuckets <- function (commands.df) {
1511275290343:# Plots the number of commands run in the console against the time buckets.
1511275290344:#
1511275290344:# Args:
1511275290345:#   commands.df: the data frame containing the relevant commands and time of
1511275290345:#                running.
1511275290345:commands.df.2 <- commands.df %>%
1511275290346:mutate(time=time_x) %>%
1511275290346:select(-c(time_component, time_x)) %>%
1511275290346:mutate(time_bucket = ClassifyTime(time))
1511275290347:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511275290347:levels = c(kBucket1, kBucket2, kBucket3,
1511275290347:kBucket4, kBucket5, kBucket6,
1511275290348:kBucket7, kBucket8))
1511275290348:time_bucket_analysis <- commands.df.2 %>%
1511275290349:group_by(time_bucket) %>%
1511275290349:summarise(commands.count = sum(!is.na(command)))
1511275290349:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511275290350:group=time_bucket,
1511275290350:geom = 'blank', main = 'At what times am I less lazy?') +
1511275290350:geom_line(aes(group = 1)) +
1511275290351:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511275290351:xlab("Time") + ylab('R commands run in console') +
1511275290351:theme(axis.text.x = element_text(angle=90)) +
1511275290352:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511275290352:}
1511275290353:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511275290353:connection <- file('history.txt', 'r')
1511275290355:history.txt <- readLines(con = connection)
1511275290479:is.assignment.directory <- FALSE
1511275290480:commands <- c()
1511275290481:times <- c()
1511275290484:# NUmber of lines in the imported file
1511275290484:initial.file.length <- length(history.txt)
1511275290486:# For the analysis, we need to consider only comments run while working on the
1511275290486:# assignment. Throughout the assignment, the working directory has been the
1511275290487:# same. This fact is made use of to identify which are the commands relevant
1511275290488:# to the analysis.
1511275290488:for (line.num in 1:length(history.txt)) {
1511275290488:history.line <- history.txt[line.num]
1511275290489:colon.index <- str_locate(history.line, ':')[1]
1511275290489:time.component <- substr(history.line, 1, colon.index - 1)
1511275290489:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511275290490:if (startsWith(command, 'setwd')) {
1511275290490:if (startsWith(command, setwd.command)) {
1511275290491:is.assignment.directory <- TRUE
1511275290491:} else {
1511275290492:if (!startsWith(command, 'setwd.command')) {
1511275290492:is.assignment.directory <- FALSE
1511275290492:}
1511275290493:}
1511275290493:}
1511275290493:if (is.assignment.directory == TRUE) {
1511275290494:times <- append(times, time.component)
1511275290494:commands <- append(commands, command)
1511275290494:}
1511275290495:}
1511275291682:close(connection)
1511275291683:commands.df <- data.frame(time = times, command = commands,
1511275291683:stringsAsFactors = FALSE)
1511275291684:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511275291685:# between the time in the file and the actual time, could be an issue of not
1511275291686:# using the proper timezone. For now, adding an appropriate value of 38580000
1511275291687:# milliseconds to the value in the history file. This equates to 10 hours and
1511275291687:# 43 minutes.
1511275291687:commands.df <- commands.df %>%
1511275291688:mutate(date = as.Date((as.double(time)) / 86400000,
1511275291689:origin = '1970-01-01')) %>%
1511275291689:mutate(time_component = as.double(time) %% 86400000) %>%
1511275291689:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511275291707:# Some of the rows can be removed
1511275291708:# Comments, Rmd chunk beginnings etc.
1511275291709:# Also, multi-line commands are represented as multiple lines in the history
1511275291709:# file. This also needs to be taken care of.
1511275291710:commands.df <- commands.df %>%
1511275291710:filter(!startsWith(command, '```')) %>%
1511275291711:filter(!startsWith(command, '#')) %>%
1511275291711:filter(!startsWith(command, '"')) %>%
1511275291711:filter(!startsWith(command, "'")) %>%
1511275291712:filter(!startsWith(command, '}')) %>%
1511275291712:filter(!startsWith(command, '**')) %>%
1511275291713:mutate(previous_command = lag(command)) %>%
1511275291714:filter(!endsWith(previous_command, ',')) %>%
1511275291715:filter(!endsWith(previous_command, '+'))
1511275291755:final.commands.count <- nrow(commands.df)
1511275291756:help.used <- sum(startsWith(commands.df$command, '?'))
1511275291758:view.used <- sum(startsWith(commands.df$command, 'View'))
1511275291759:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511275291760:sum(startsWith(commands.df$command, 'ggplot'))
1511275291760:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511275291761:sum(startsWith(commands.df$command, 'select')) +
1511275291763:sum(startsWith(commands.df$command, 'mutate')) +
1511275291764:sum(startsWith(commands.df$command, 'arrange')) +
1511275291764:sum(startsWith(commands.df$command, 'summarise')) +
1511275291765:sum(startsWith(commands.df$command, 'inner_join')) +
1511275291767:sum(startsWith(commands.df$command, 'group_by')) +
1511275291769:sum(startsWith(commands.df$command, 'left_join'))
1511275291770:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511275291772:x <- commands.df %>%
1511275291772:mutate(date=as.character(date)) %>%
1511275291773:group_by(date) %>%
1511275291773:summarise(command.count = sum(!is.na(command)))
1511275348262:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511275348263:sum(startsWith(commands.df$command, 'ggplot')) +
1511275348263:sum(startsWith(commands.df$command, 'geom')) +
1511275348264:sum(startsWith(commands.df$command, 'xlab')) +
1511275348264:sum(startsWith(commands.df$command, 'ylab')) +
1511275348264:sum(startsWith(commands.df$command, 'facet'))
1511275359115:require(dplyr)
1511275359117:require(ggplot2)
1511275359118:require(lubridate)
1511275359119:require(readtext)
1511275359120:require(stringr)
1511275359121:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511275359121:"Assignments/1")
1511275359123:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511275359123:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511275359125:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511275359125:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511275359127:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511275359128:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511275359129:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511275359130:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511275359132:kBucket1 <- 'Midnight to 3 AM'
1511275359133:kBucket2 <- '3 AM to 6 AM'
1511275359134:kBucket3 <- '6 AM to 9 AM'
1511275359135:kBucket4 <- '9 AM to Noon'
1511275359136:kBucket5 <- 'Noon to 3 PM'
1511275359137:kBucket6 <- '3 PM to 6 PM'
1511275359138:kBucket7 <- '6 PM to 9 PM'
1511275359138:kBucket8 <- '9 PM +'
1511275359140:ClassifyTime <- function (command.time) {
1511275359140:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511275359141:#
1511275359141:# Args:
1511275359142:#   command.time: time represented in string in hh:mm:ss format.
1511275359142:#
1511275359143:# Returns:
1511275359143:#   The bucket in which command.time falls.
1511275359143:command.time <- strptime(command.time, format = "%H:%M:%S")
1511275359143:bucket <- kBucket1
1511275359144:# TODO: Normal if elseif else blocks not working. Look into this.
1511275359144:bucket <- ifelse(command.time < kThreeAm,
1511275359145:kBucket1,
1511275359145:ifelse(command.time < kSixAm,
1511275359146:kBucket2,
1511275359146:ifelse(command.time < kNineAm,
1511275359147:kBucket3,
1511275359147:ifelse(command.time < kNoon,
1511275359147:kBucket4,
1511275359148:ifelse(command.time < kThreePm,
1511275359150:kBucket5,
1511275359150:ifelse(command.time < kSixPm,
1511275359152:kBucket6,
1511275359152:ifelse(
1511275359154:command.time < kNinePm,
1511275359155:kBucket7,
1511275359155:kBucket8)))))))
1511275359156:return(bucket)
1511275359156:}
1511275359158:PlotCommandsInBuckets <- function (commands.df) {
1511275359158:# Plots the number of commands run in the console against the time buckets.
1511275359161:#
1511275359161:# Args:
1511275359161:#   commands.df: the data frame containing the relevant commands and time of
1511275359162:#                running.
1511275359162:commands.df.2 <- commands.df %>%
1511275359163:mutate(time=time_x) %>%
1511275359163:select(-c(time_component, time_x)) %>%
1511275359163:mutate(time_bucket = ClassifyTime(time))
1511275359164:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511275359164:levels = c(kBucket1, kBucket2, kBucket3,
1511275359165:kBucket4, kBucket5, kBucket6,
1511275359165:kBucket7, kBucket8))
1511275359166:time_bucket_analysis <- commands.df.2 %>%
1511275359167:group_by(time_bucket) %>%
1511275359168:summarise(commands.count = sum(!is.na(command)))
1511275359168:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511275359172:group=time_bucket,
1511275359173:geom = 'blank', main = 'At what times am I less lazy?') +
1511275359174:geom_line(aes(group = 1)) +
1511275359175:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511275359175:xlab("Time") + ylab('R commands run in console') +
1511275359176:theme(axis.text.x = element_text(angle=90)) +
1511275359177:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511275359177:}
1511275359178:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511275359179:connection <- file('history.txt', 'r')
1511275359180:history.txt <- readLines(con = connection)
1511275359301:is.assignment.directory <- FALSE
1511275359301:commands <- c()
1511275359302:times <- c()
1511275359303:# NUmber of lines in the imported file
1511275359305:initial.file.length <- length(history.txt)
1511275359306:# For the analysis, we need to consider only comments run while working on the
1511275359306:# assignment. Throughout the assignment, the working directory has been the
1511275359308:# same. This fact is made use of to identify which are the commands relevant
1511275359308:# to the analysis.
1511275359308:for (line.num in 1:length(history.txt)) {
1511275359309:history.line <- history.txt[line.num]
1511275359309:colon.index <- str_locate(history.line, ':')[1]
1511275359309:time.component <- substr(history.line, 1, colon.index - 1)
1511275359310:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511275359310:if (startsWith(command, 'setwd')) {
1511275359310:if (startsWith(command, setwd.command)) {
1511275359311:is.assignment.directory <- TRUE
1511275359311:} else {
1511275359312:if (!startsWith(command, 'setwd.command')) {
1511275359312:is.assignment.directory <- FALSE
1511275359312:}
1511275359313:}
1511275359314:}
1511275359314:if (is.assignment.directory == TRUE) {
1511275359315:times <- append(times, time.component)
1511275359317:commands <- append(commands, command)
1511275359318:}
1511275359319:}
1511275360457:close(connection)
1511275360458:commands.df <- data.frame(time = times, command = commands,
1511275360458:stringsAsFactors = FALSE)
1511275360460:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511275360460:# between the time in the file and the actual time, could be an issue of not
1511275360461:# using the proper timezone. For now, adding an appropriate value of 38580000
1511275360462:# milliseconds to the value in the history file. This equates to 10 hours and
1511275360462:# 43 minutes.
1511275360463:commands.df <- commands.df %>%
1511275360463:mutate(date = as.Date((as.double(time)) / 86400000,
1511275360463:origin = '1970-01-01')) %>%
1511275360464:mutate(time_component = as.double(time) %% 86400000) %>%
1511275360464:mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511275360482:# Some of the rows can be removed
1511275360483:# Comments, Rmd chunk beginnings etc.
1511275360484:# Also, multi-line commands are represented as multiple lines in the history
1511275360484:# file. This also needs to be taken care of.
1511275360485:commands.df <- commands.df %>%
1511275360485:filter(!startsWith(command, '```')) %>%
1511275360485:filter(!startsWith(command, '#')) %>%
1511275360486:filter(!startsWith(command, '"')) %>%
1511275360486:filter(!startsWith(command, "'")) %>%
1511275360487:filter(!startsWith(command, '}')) %>%
1511275360487:filter(!startsWith(command, '**')) %>%
1511275360489:mutate(previous_command = lag(command)) %>%
1511275360489:filter(!endsWith(previous_command, ','))
1511275360528:final.commands.count <- nrow(commands.df)
1511275360528:help.used <- sum(startsWith(commands.df$command, '?'))
1511275360530:view.used <- sum(startsWith(commands.df$command, 'View'))
1511275360530:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511275360531:sum(startsWith(commands.df$command, 'ggplot')) +
1511275360532:sum(startsWith(commands.df$command, 'geom')) +
1511275360533:sum(startsWith(commands.df$command, 'xlab')) +
1511275360533:sum(startsWith(commands.df$command, 'ylab')) +
1511275360534:sum(startsWith(commands.df$command, 'facet'))
1511275360534:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511275360535:sum(startsWith(commands.df$command, 'select')) +
1511275360536:sum(startsWith(commands.df$command, 'mutate')) +
1511275360536:sum(startsWith(commands.df$command, 'arrange')) +
1511275360537:sum(startsWith(commands.df$command, 'summarise')) +
1511275360537:sum(startsWith(commands.df$command, 'inner_join')) +
1511275360537:sum(startsWith(commands.df$command, 'group_by')) +
1511275360538:sum(startsWith(commands.df$command, 'left_join'))
1511275360539:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511275360540:x <- commands.df %>%
1511275360541:mutate(date=as.character(date)) %>%
1511275360542:group_by(date) %>%
1511275360542:summarise(command.count = sum(!is.na(command)))
1511275608666:x <- c(1, 2, 3)
1511275623235:if (x > 2) print(1)
1511275645456:ifelse (x > 2, print(1), print(0))
1511275716809:print(ifelse(x>2, 1, 0))
1511275742176:print(if(x>2) 1 else 0)
1511277239780:ComputeTime <- function (command.time) {
1511277239782:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277239782:return origin + (command.time / 1000)
1511277239824:}
1511277251188:ComputeTime <- function (command.time) {
1511277251189:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277251189:return(origin + (command.time / 1000))
1511277251190:}
1511277255567:return(origin + (command.time / 1000))
1511277284086:ComputeTime(1511272401677)
1511277296139:x <- ComputeTime(1511272401677)
1511277352064:str(x)
1511277360257:as.character(x)
1511277428809:x <- as.character(x)
1511277429425:x
1511277435036:sustr(x, 12)
1511277438733:substr(x, 12)
1511277472927:substr(x, 12, 16)
1511277483367:ComputeTime <- function (command.time) {
1511277483367:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277483368:date.time <- origin + (command.time / 1000)
1511277483369:date.time.string <- as.character(date.time)
1511277483369:time.string <- substr(date.time.string, 12, 16)
1511277483370:}
1511277625816:require(dplyr)
1511277625818:require(ggplot2)
1511277625818:require(lubridate)
1511277625819:require(readtext)
1511277625820:require(stringr)
1511277625822:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511277625823:"Assignments/1")
1511277625825:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511277625826:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511277625826:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511277625827:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511277625828:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511277625829:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511277625830:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511277625831:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511277625832:kBucket1 <- 'Midnight to 3 AM'
1511277625833:kBucket2 <- '3 AM to 6 AM'
1511277625834:kBucket3 <- '6 AM to 9 AM'
1511277625835:kBucket4 <- '9 AM to Noon'
1511277625836:kBucket5 <- 'Noon to 3 PM'
1511277625837:kBucket6 <- '3 PM to 6 PM'
1511277625839:kBucket7 <- '6 PM to 9 PM'
1511277625841:kBucket8 <- '9 PM +'
1511277625842:ComputeTime <- function (command.time) {
1511277625842:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277625843:date.time <- origin + (command.time / 1000)
1511277625844:date.time.string <- as.character(date.time)
1511277625845:time.string <- substr(date.time.string, 12, 16)
1511277625846:}
1511277625848:ClassifyTime <- function (command.time) {
1511277625848:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511277625849:#
1511277625850:# Args:
1511277625851:#   command.time: time represented in string in hh:mm:ss format.
1511277625852:#
1511277625853:# Returns:
1511277625853:#   The bucket in which command.time falls.
1511277625854:command.time <- strptime(command.time, format = "%H:%M:%S")
1511277625854:bucket <- kBucket1
1511277625855:# TODO: Normal if elseif else blocks not working. Look into this.
1511277625855:bucket <- ifelse(command.time < kThreeAm,
1511277625858:kBucket1,
1511277625858:ifelse(command.time < kSixAm,
1511277625859:kBucket2,
1511277625860:ifelse(command.time < kNineAm,
1511277625860:kBucket3,
1511277625861:ifelse(command.time < kNoon,
1511277625861:kBucket4,
1511277625862:ifelse(command.time < kThreePm,
1511277625864:kBucket5,
1511277625865:ifelse(command.time < kSixPm,
1511277625866:kBucket6,
1511277625867:ifelse(
1511277625868:command.time < kNinePm,
1511277625868:kBucket7,
1511277625869:kBucket8)))))))
1511277625870:return(bucket)
1511277625871:}
1511277625873:PlotCommandsInBuckets <- function (commands.df) {
1511277625875:# Plots the number of commands run in the console against the time buckets.
1511277625876:#
1511277625877:# Args:
1511277625877:#   commands.df: the data frame containing the relevant commands and time of
1511277625878:#                running.
1511277625879:commands.df.2 <- commands.df %>%
1511277625879:select(-c(time_component)) %>%
1511277625880:mutate(time_bucket = ClassifyTime(time))
1511277625880:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511277625881:levels = c(kBucket1, kBucket2, kBucket3,
1511277625883:kBucket4, kBucket5, kBucket6,
1511277625884:kBucket7, kBucket8))
1511277625885:time_bucket_analysis <- commands.df.2 %>%
1511277625886:group_by(time_bucket) %>%
1511277625887:summarise(commands.count = sum(!is.na(command)))
1511277625888:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511277625889:group=time_bucket,
1511277625890:geom = 'blank', main = 'At what times am I less lazy?') +
1511277625891:geom_line(aes(group = 1)) +
1511277625891:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511277625893:xlab("Time") + ylab('R commands run in console') +
1511277625893:theme(axis.text.x = element_text(angle=90)) +
1511277625895:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511277625895:}
1511277625896:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511277625897:connection <- file('history.txt', 'r')
1511277625899:history.txt <- readLines(con = connection)
1511277626021:is.assignment.directory <- FALSE
1511277626021:commands <- c()
1511277626022:times <- c()
1511277626023:# NUmber of lines in the imported file
1511277626025:initial.file.length <- length(history.txt)
1511277626026:# For the analysis, we need to consider only comments run while working on the
1511277626026:# assignment. Throughout the assignment, the working directory has been the
1511277626027:# same. This fact is made use of to identify which are the commands relevant
1511277626028:# to the analysis.
1511277626028:for (line.num in 1:length(history.txt)) {
1511277626029:history.line <- history.txt[line.num]
1511277626029:colon.index <- str_locate(history.line, ':')[1]
1511277626029:time.component <- substr(history.line, 1, colon.index - 1)
1511277626030:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511277626030:if (startsWith(command, 'setwd')) {
1511277626031:if (startsWith(command, setwd.command)) {
1511277626031:is.assignment.directory <- TRUE
1511277626032:} else {
1511277626032:if (!startsWith(command, 'setwd.command')) {
1511277626034:is.assignment.directory <- FALSE
1511277626035:}
1511277626036:}
1511277626037:}
1511277626038:if (is.assignment.directory == TRUE) {
1511277626039:times <- append(times, time.component)
1511277626039:commands <- append(commands, command)
1511277626041:}
1511277626041:}
1511277627151:close(connection)
1511277627152:commands.df <- data.frame(time = times, command = commands,
1511277627152:stringsAsFactors = FALSE)
1511277627153:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511277627154:# between the time in the file and the actual time, could be an issue of not
1511277627154:# using the proper timezone. For now, adding an appropriate value of 38580000
1511277627155:# milliseconds to the value in the history file. This equates to 10 hours and
1511277627155:# 43 minutes.
1511277627155:# commands.df <- commands.df %>%
1511277627156:#   mutate(date = as.Date((as.double(time)) / 86400000,
1511277627157:#                         origin = '1970-01-01')) %>%
1511277627157:#   mutate(time_component = as.double(time) %% 86400000) %>%
1511277627159:#   mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511277627159:commands.df <- commands.df %>%
1511277627160:mutate(date = as.Date((as.double(time)) / 86400000,
1511277627160:origin = '1970-01-01')) %>%
1511277627160:mutate(time = ComputeTime(time))
1511277627178:# Some of the rows can be removed
1511277627179:# Comments, Rmd chunk beginnings etc.
1511277627181:# Also, multi-line commands are represented as multiple lines in the history
1511277627182:# file. This also needs to be taken care of.
1511277627183:commands.df <- commands.df %>%
1511277627183:filter(!startsWith(command, '```')) %>%
1511277627184:filter(!startsWith(command, '#')) %>%
1511277627185:filter(!startsWith(command, '"')) %>%
1511277627185:filter(!startsWith(command, "'")) %>%
1511277627185:filter(!startsWith(command, '}')) %>%
1511277627186:filter(!startsWith(command, '**')) %>%
1511277627186:mutate(previous_command = lag(command)) %>%
1511277627186:filter(!endsWith(previous_command, ','))
1511277627224:final.commands.count <- nrow(commands.df)
1511277627225:help.used <- sum(startsWith(commands.df$command, '?'))
1511277627226:view.used <- sum(startsWith(commands.df$command, 'View'))
1511277627227:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511277627227:sum(startsWith(commands.df$command, 'ggplot')) +
1511277627228:sum(startsWith(commands.df$command, 'geom')) +
1511277627229:sum(startsWith(commands.df$command, 'xlab')) +
1511277627230:sum(startsWith(commands.df$command, 'ylab')) +
1511277627231:sum(startsWith(commands.df$command, 'facet'))
1511277627232:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511277627233:sum(startsWith(commands.df$command, 'select')) +
1511277627233:sum(startsWith(commands.df$command, 'mutate')) +
1511277627233:sum(startsWith(commands.df$command, 'arrange')) +
1511277627234:sum(startsWith(commands.df$command, 'summarise')) +
1511277627234:sum(startsWith(commands.df$command, 'inner_join')) +
1511277627235:sum(startsWith(commands.df$command, 'group_by')) +
1511277627235:sum(startsWith(commands.df$command, 'left_join'))
1511277627236:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511277627238:x <- commands.df %>%
1511277627240:mutate(date=as.character(date)) %>%
1511277627240:group_by(date) %>%
1511277627241:summarise(command.count = sum(!is.na(command)))
1511277659803:commands.df <- data.frame(time = times, command = commands,
1511277659805:stringsAsFactors = FALSE)
1511277664570:commands.df <- commands.df %>%
1511277664571:mutate(date = as.Date((as.double(time)) / 86400000,
1511277664572:origin = '1970-01-01')) %>%
1511277664572:mutate(time = ComputeTime(time))
1511277700138:times <- c(1511272401677, 1511272166771)
1511277714198:ComputeTime(times)
1511277727085:return(time.string)
1511277729699:ComputeTime <- function (command.time) {
1511277729700:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277729701:date.time <- origin + (command.time / 1000)
1511277729702:date.time.string <- as.character(date.time)
1511277729702:time.string <- substr(date.time.string, 12, 16)
1511277729702:return(time.string)
1511277729703:}
1511277733687:ComputeTime(times)
1511277736173:require(dplyr)
1511277736174:require(ggplot2)
1511277736175:require(lubridate)
1511277736175:require(readtext)
1511277736176:require(stringr)
1511277736177:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511277736178:"Assignments/1")
1511277736179:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511277736180:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511277736181:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511277736182:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511277736183:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511277736185:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511277736187:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511277736188:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511277736189:kBucket1 <- 'Midnight to 3 AM'
1511277736190:kBucket2 <- '3 AM to 6 AM'
1511277736191:kBucket3 <- '6 AM to 9 AM'
1511277736192:kBucket4 <- '9 AM to Noon'
1511277736193:kBucket5 <- 'Noon to 3 PM'
1511277736194:kBucket6 <- '3 PM to 6 PM'
1511277736195:kBucket7 <- '6 PM to 9 PM'
1511277736196:kBucket8 <- '9 PM +'
1511277736197:ComputeTime <- function (command.time) {
1511277736197:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277736198:date.time <- origin + (command.time / 1000)
1511277736199:date.time.string <- as.character(date.time)
1511277736201:time.string <- substr(date.time.string, 12, 16)
1511277736202:return(time.string)
1511277736203:}
1511277736206:ClassifyTime <- function (command.time) {
1511277736206:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511277736207:#
1511277736208:# Args:
1511277736208:#   command.time: time represented in string in hh:mm:ss format.
1511277736210:#
1511277736210:# Returns:
1511277736211:#   The bucket in which command.time falls.
1511277736212:command.time <- strptime(command.time, format = "%H:%M:%S")
1511277736213:bucket <- kBucket1
1511277736214:# TODO: Normal if elseif else blocks not working. Look into this.
1511277736214:bucket <- ifelse(command.time < kThreeAm,
1511277736215:kBucket1,
1511277736215:ifelse(command.time < kSixAm,
1511277736216:kBucket2,
1511277736216:ifelse(command.time < kNineAm,
1511277736217:kBucket3,
1511277736217:ifelse(command.time < kNoon,
1511277736218:kBucket4,
1511277736219:ifelse(command.time < kThreePm,
1511277736220:kBucket5,
1511277736220:ifelse(command.time < kSixPm,
1511277736221:kBucket6,
1511277736221:ifelse(
1511277736222:command.time < kNinePm,
1511277736222:kBucket7,
1511277736224:kBucket8)))))))
1511277736225:return(bucket)
1511277736225:}
1511277736227:PlotCommandsInBuckets <- function (commands.df) {
1511277736228:# Plots the number of commands run in the console against the time buckets.
1511277736229:#
1511277736230:# Args:
1511277736231:#   commands.df: the data frame containing the relevant commands and time of
1511277736231:#                running.
1511277736233:commands.df.2 <- commands.df %>%
1511277736234:select(-c(time_component)) %>%
1511277736235:mutate(time_bucket = ClassifyTime(time))
1511277736236:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511277736237:levels = c(kBucket1, kBucket2, kBucket3,
1511277736238:kBucket4, kBucket5, kBucket6,
1511277736239:kBucket7, kBucket8))
1511277736240:time_bucket_analysis <- commands.df.2 %>%
1511277736241:group_by(time_bucket) %>%
1511277736242:summarise(commands.count = sum(!is.na(command)))
1511277736243:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511277736243:group=time_bucket,
1511277736245:geom = 'blank', main = 'At what times am I less lazy?') +
1511277736245:geom_line(aes(group = 1)) +
1511277736247:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511277736247:xlab("Time") + ylab('R commands run in console') +
1511277736249:theme(axis.text.x = element_text(angle=90)) +
1511277736250:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511277736251:}
1511277736253:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511277736254:connection <- file('history.txt', 'r')
1511277736256:history.txt <- readLines(con = connection)
1511277736371:is.assignment.directory <- FALSE
1511277736372:commands <- c()
1511277736373:times <- c()
1511277736373:# NUmber of lines in the imported file
1511277736374:initial.file.length <- length(history.txt)
1511277736375:# For the analysis, we need to consider only comments run while working on the
1511277736376:# assignment. Throughout the assignment, the working directory has been the
1511277736377:# same. This fact is made use of to identify which are the commands relevant
1511277736377:# to the analysis.
1511277736377:for (line.num in 1:length(history.txt)) {
1511277736378:history.line <- history.txt[line.num]
1511277736378:colon.index <- str_locate(history.line, ':')[1]
1511277736379:time.component <- substr(history.line, 1, colon.index - 1)
1511277736379:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511277736379:if (startsWith(command, 'setwd')) {
1511277736380:if (startsWith(command, setwd.command)) {
1511277736380:is.assignment.directory <- TRUE
1511277736380:} else {
1511277736381:if (!startsWith(command, 'setwd.command')) {
1511277736381:is.assignment.directory <- FALSE
1511277736381:}
1511277736382:}
1511277736382:}
1511277736383:if (is.assignment.directory == TRUE) {
1511277736383:times <- append(times, time.component)
1511277736383:commands <- append(commands, command)
1511277736384:}
1511277736385:}
1511277737495:close(connection)
1511277737496:commands.df <- data.frame(time = times, command = commands,
1511277737497:stringsAsFactors = FALSE)
1511277737498:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511277737498:# between the time in the file and the actual time, could be an issue of not
1511277737498:# using the proper timezone. For now, adding an appropriate value of 38580000
1511277737499:# milliseconds to the value in the history file. This equates to 10 hours and
1511277737499:# 43 minutes.
1511277737500:# commands.df <- commands.df %>%
1511277737500:#   mutate(date = as.Date((as.double(time)) / 86400000,
1511277737501:#                         origin = '1970-01-01')) %>%
1511277737502:#   mutate(time_component = as.double(time) %% 86400000) %>%
1511277737502:#   mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511277737503:commands.df <- commands.df %>%
1511277737503:mutate(date = as.Date((as.double(time)) / 86400000,
1511277737503:origin = '1970-01-01')) %>%
1511277737504:mutate(time = ComputeTime(time))
1511277737513:# Some of the rows can be removed
1511277737514:# Comments, Rmd chunk beginnings etc.
1511277737515:# Also, multi-line commands are represented as multiple lines in the history
1511277737515:# file. This also needs to be taken care of.
1511277737516:commands.df <- commands.df %>%
1511277737516:filter(!startsWith(command, '```')) %>%
1511277737518:filter(!startsWith(command, '#')) %>%
1511277737518:filter(!startsWith(command, '"')) %>%
1511277737520:filter(!startsWith(command, "'")) %>%
1511277737520:filter(!startsWith(command, '}')) %>%
1511277737521:filter(!startsWith(command, '**')) %>%
1511277737522:mutate(previous_command = lag(command)) %>%
1511277737523:filter(!endsWith(previous_command, ','))
1511277737560:final.commands.count <- nrow(commands.df)
1511277737561:help.used <- sum(startsWith(commands.df$command, '?'))
1511277737562:view.used <- sum(startsWith(commands.df$command, 'View'))
1511277737562:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511277737563:sum(startsWith(commands.df$command, 'ggplot')) +
1511277737564:sum(startsWith(commands.df$command, 'geom')) +
1511277737565:sum(startsWith(commands.df$command, 'xlab')) +
1511277737565:sum(startsWith(commands.df$command, 'ylab')) +
1511277737565:sum(startsWith(commands.df$command, 'facet'))
1511277737567:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511277737568:sum(startsWith(commands.df$command, 'select')) +
1511277737569:sum(startsWith(commands.df$command, 'mutate')) +
1511277737569:sum(startsWith(commands.df$command, 'arrange')) +
1511277737570:sum(startsWith(commands.df$command, 'summarise')) +
1511277737571:sum(startsWith(commands.df$command, 'inner_join')) +
1511277737572:sum(startsWith(commands.df$command, 'group_by')) +
1511277737572:sum(startsWith(commands.df$command, 'left_join'))
1511277737575:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511277737577:x <- commands.df %>%
1511277737577:mutate(date=as.character(date)) %>%
1511277737578:group_by(date) %>%
1511277737579:summarise(command.count = sum(!is.na(command)))
1511277744240:times
1511277751936:commands.df <- data.frame(time = times, command = commands,
1511277751938:stringsAsFactors = FALSE)
1511277758536:commands.df <- commands.df %>%
1511277758537:mutate(date = as.Date((as.double(time)) / 86400000,
1511277758538:origin = '1970-01-01'))
1511277762118:commands.df <- data.frame(time = times, command = commands,
1511277762118:stringsAsFactors = FALSE)
1511277769563:View(commands.df)
1511277781024:commands.df <- commands.df %>%
1511277781026:mutate(date = as.Date((as.double(time)) / 86400000,
1511277781027:origin = '1970-01-01')) %>%
1511277781027:mutate(time = ComputeTime(time))
1511277798797:commands.df <- data.frame(time = times, command = commands,
1511277798798:stringsAsFactors = FALSE)
1511277812455:ComputeTime(commands.df$time)
1511277832467:str(commands.df)
1511277854732:ComputeTime <- function (command.time) {
1511277854733:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277854735:date.time <- origin + (as.double(command.time) / 1000)
1511277854735:date.time.string <- as.character(date.time)
1511277854736:time.string <- substr(date.time.string, 12, 16)
1511277854736:return(time.string)
1511277854737:}
1511277857952:ComputeTime(commands.df$time)
1511277861486:require(dplyr)
1511277861488:require(ggplot2)
1511277861489:require(lubridate)
1511277861490:require(readtext)
1511277861490:require(stringr)
1511277861492:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511277861492:"Assignments/1")
1511277861494:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511277861494:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511277861495:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511277861496:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511277861497:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511277861498:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511277861499:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511277861500:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511277861502:kBucket1 <- 'Midnight to 3 AM'
1511277861503:kBucket2 <- '3 AM to 6 AM'
1511277861504:kBucket3 <- '6 AM to 9 AM'
1511277861504:kBucket4 <- '9 AM to Noon'
1511277861506:kBucket5 <- 'Noon to 3 PM'
1511277861506:kBucket6 <- '3 PM to 6 PM'
1511277861507:kBucket7 <- '6 PM to 9 PM'
1511277861508:kBucket8 <- '9 PM +'
1511277861510:ComputeTime <- function (command.time) {
1511277861510:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511277861511:date.time <- origin + (as.double(command.time) / 1000)
1511277861512:date.time.string <- as.character(date.time)
1511277861513:time.string <- substr(date.time.string, 12, 16)
1511277861514:return(time.string)
1511277861515:}
1511277861516:ClassifyTime <- function (command.time) {
1511277861517:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511277861517:#
1511277861518:# Args:
1511277861520:#   command.time: time represented in string in hh:mm:ss format.
1511277861521:#
1511277861522:# Returns:
1511277861523:#   The bucket in which command.time falls.
1511277861524:command.time <- strptime(command.time, format = "%H:%M:%S")
1511277861524:bucket <- kBucket1
1511277861526:# TODO: Normal if elseif else blocks not working. Look into this.
1511277861527:bucket <- ifelse(command.time < kThreeAm,
1511277861528:kBucket1,
1511277861528:ifelse(command.time < kSixAm,
1511277861529:kBucket2,
1511277861530:ifelse(command.time < kNineAm,
1511277861531:kBucket3,
1511277861532:ifelse(command.time < kNoon,
1511277861532:kBucket4,
1511277861532:ifelse(command.time < kThreePm,
1511277861533:kBucket5,
1511277861533:ifelse(command.time < kSixPm,
1511277861533:kBucket6,
1511277861534:ifelse(
1511277861534:command.time < kNinePm,
1511277861535:kBucket7,
1511277861535:kBucket8)))))))
1511277861535:return(bucket)
1511277861536:}
1511277861538:PlotCommandsInBuckets <- function (commands.df) {
1511277861538:# Plots the number of commands run in the console against the time buckets.
1511277861539:#
1511277861540:# Args:
1511277861540:#   commands.df: the data frame containing the relevant commands and time of
1511277861540:#                running.
1511277861541:commands.df.2 <- commands.df %>%
1511277861541:select(-c(time_component)) %>%
1511277861543:mutate(time_bucket = ClassifyTime(time))
1511277861544:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511277861545:levels = c(kBucket1, kBucket2, kBucket3,
1511277861547:kBucket4, kBucket5, kBucket6,
1511277861548:kBucket7, kBucket8))
1511277861549:time_bucket_analysis <- commands.df.2 %>%
1511277861550:group_by(time_bucket) %>%
1511277861551:summarise(commands.count = sum(!is.na(command)))
1511277861553:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511277861554:group=time_bucket,
1511277861555:geom = 'blank', main = 'At what times am I less lazy?') +
1511277861556:geom_line(aes(group = 1)) +
1511277861557:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511277861558:xlab("Time") + ylab('R commands run in console') +
1511277861558:theme(axis.text.x = element_text(angle=90)) +
1511277861559:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511277861559:}
1511277861561:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511277861562:connection <- file('history.txt', 'r')
1511277861564:history.txt <- readLines(con = connection)
1511277861680:is.assignment.directory <- FALSE
1511277861681:commands <- c()
1511277861682:times <- c()
1511277861683:# NUmber of lines in the imported file
1511277861685:initial.file.length <- length(history.txt)
1511277861685:# For the analysis, we need to consider only comments run while working on the
1511277861686:# assignment. Throughout the assignment, the working directory has been the
1511277861687:# same. This fact is made use of to identify which are the commands relevant
1511277861687:# to the analysis.
1511277861688:for (line.num in 1:length(history.txt)) {
1511277861688:history.line <- history.txt[line.num]
1511277861688:colon.index <- str_locate(history.line, ':')[1]
1511277861689:time.component <- substr(history.line, 1, colon.index - 1)
1511277861689:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511277861689:if (startsWith(command, 'setwd')) {
1511277861690:if (startsWith(command, setwd.command)) {
1511277861690:is.assignment.directory <- TRUE
1511277861691:} else {
1511277861691:if (!startsWith(command, 'setwd.command')) {
1511277861691:is.assignment.directory <- FALSE
1511277861692:}
1511277861692:}
1511277861693:}
1511277861694:if (is.assignment.directory == TRUE) {
1511277861695:times <- append(times, time.component)
1511277861695:commands <- append(commands, command)
1511277861696:}
1511277861697:}
1511277862854:close(connection)
1511277862855:commands.df <- data.frame(time = times, command = commands,
1511277862855:stringsAsFactors = FALSE)
1511277862856:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511277862857:# between the time in the file and the actual time, could be an issue of not
1511277862858:# using the proper timezone. For now, adding an appropriate value of 38580000
1511277862858:# milliseconds to the value in the history file. This equates to 10 hours and
1511277862859:# 43 minutes.
1511277862859:# commands.df <- commands.df %>%
1511277862859:#   mutate(date = as.Date((as.double(time)) / 86400000,
1511277862862:#                         origin = '1970-01-01')) %>%
1511277862862:#   mutate(time_component = as.double(time) %% 86400000) %>%
1511277862863:#   mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511277862863:commands.df <- commands.df %>%
1511277862864:mutate(date = as.Date((as.double(time)) / 86400000,
1511277862865:origin = '1970-01-01')) %>%
1511277862866:mutate(time = ComputeTime(time))
1511277862908:# Some of the rows can be removed
1511277862908:# Comments, Rmd chunk beginnings etc.
1511277862909:# Also, multi-line commands are represented as multiple lines in the history
1511277862910:# file. This also needs to be taken care of.
1511277862911:commands.df <- commands.df %>%
1511277862911:filter(!startsWith(command, '```')) %>%
1511277862912:filter(!startsWith(command, '#')) %>%
1511277862913:filter(!startsWith(command, '"')) %>%
1511277862913:filter(!startsWith(command, "'")) %>%
1511277862913:filter(!startsWith(command, '}')) %>%
1511277862914:filter(!startsWith(command, '**')) %>%
1511277862914:mutate(previous_command = lag(command)) %>%
1511277862914:filter(!endsWith(previous_command, ','))
1511277862955:final.commands.count <- nrow(commands.df)
1511277862956:help.used <- sum(startsWith(commands.df$command, '?'))
1511277862957:view.used <- sum(startsWith(commands.df$command, 'View'))
1511277862958:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511277862959:sum(startsWith(commands.df$command, 'ggplot')) +
1511277862959:sum(startsWith(commands.df$command, 'geom')) +
1511277862960:sum(startsWith(commands.df$command, 'xlab')) +
1511277862960:sum(startsWith(commands.df$command, 'ylab')) +
1511277862960:sum(startsWith(commands.df$command, 'facet'))
1511277862961:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511277862962:sum(startsWith(commands.df$command, 'select')) +
1511277862963:sum(startsWith(commands.df$command, 'mutate')) +
1511277862963:sum(startsWith(commands.df$command, 'arrange')) +
1511277862963:sum(startsWith(commands.df$command, 'summarise')) +
1511277862964:sum(startsWith(commands.df$command, 'inner_join')) +
1511277862964:sum(startsWith(commands.df$command, 'group_by')) +
1511277862964:sum(startsWith(commands.df$command, 'left_join'))
1511277862966:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511277862967:x <- commands.df %>%
1511277862968:mutate(date=as.character(date)) %>%
1511277862970:group_by(date) %>%
1511277862971:summarise(command.count = sum(!is.na(command)))
1511278032398:x <- 1511272401677
1511278103514:require(chron)
1511278127918:chron::chron(times=commands.df$time)
1511278146006:chron::chron(times=commands.df$time, format = "%H:%M")
1511278157849:chron::chron(times=commands.df$time, format = "h:m")
1511278180264:sum(is.na(commands.df$time))
1511278199289:chron(times=c('13:34'))
1511278211732:chron(times=c('13:34'), format='%H:%M')
1511278235720:time<-c("00:00:01", "01:02:00", "09:30:01", "14:15:25")
1511278240773:chron(times=time)
1511278259898:ComputeTime <- function (command.time) {
1511278259899:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511278259900:date.time <- origin + (as.double(command.time) / 1000)
1511278259900:date.time.string <- as.character(date.time)
1511278259901:time.string <- substr(date.time.string, 12, 19)
1511278259901:return(time.string)
1511278259901:}
1511278268743:commands.df <- data.frame(time = times, command = commands,
1511278268744:stringsAsFactors = FALSE)
1511278272192:commands.df <- commands.df %>%
1511278272192:mutate(date = as.Date((as.double(time)) / 86400000,
1511278272194:origin = '1970-01-01')) %>%
1511278272194:mutate(time = ComputeTime(time))
1511278290736:chron(times=command.df$time)
1511278295663:chron(times=commands.df$time)
1511278336570:ComputeTime <- function (command.time) {
1511278336571:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511278336572:date.time <- origin + (as.double(command.time) / 1000)
1511278336572:date.time.string <- as.character(date.time)
1511278336572:time.string <- substr(date.time.string, 12, 19)
1511278336573:return(chron(time.string))
1511278336573:}
1511278337916:require(chron)
1511278337916:require(dplyr)
1511278337917:require(ggplot2)
1511278337918:require(lubridate)
1511278337919:require(readtext)
1511278337920:require(stringr)
1511278337921:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511278337921:"Assignments/1")
1511278337922:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511278337923:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511278337924:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511278337925:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511278337927:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511278337928:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511278337929:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511278337931:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511278337932:kBucket1 <- 'Midnight to 3 AM'
1511278337933:kBucket2 <- '3 AM to 6 AM'
1511278337933:kBucket3 <- '6 AM to 9 AM'
1511278337934:kBucket4 <- '9 AM to Noon'
1511278337935:kBucket5 <- 'Noon to 3 PM'
1511278337936:kBucket6 <- '3 PM to 6 PM'
1511278337937:kBucket7 <- '6 PM to 9 PM'
1511278337938:kBucket8 <- '9 PM +'
1511278337939:ComputeTime <- function (command.time) {
1511278337940:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511278337941:date.time <- origin + (as.double(command.time) / 1000)
1511278337942:date.time.string <- as.character(date.time)
1511278337943:time.string <- substr(date.time.string, 12, 19)
1511278337943:return(chron(time.string))
1511278337945:}
1511278337947:ClassifyTime <- function (command.time) {
1511278337949:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511278337949:#
1511278337950:# Args:
1511278337951:#   command.time: time represented in string in hh:mm:ss format.
1511278337952:#
1511278337954:# Returns:
1511278337955:#   The bucket in which command.time falls.
1511278337956:command.time <- strptime(command.time, format = "%H:%M:%S")
1511278337957:bucket <- kBucket1
1511278337958:# TODO: Normal if elseif else blocks not working. Look into this.
1511278337959:bucket <- ifelse(command.time < kThreeAm,
1511278337960:kBucket1,
1511278337960:ifelse(command.time < kSixAm,
1511278337961:kBucket2,
1511278337961:ifelse(command.time < kNineAm,
1511278337961:kBucket3,
1511278337962:ifelse(command.time < kNoon,
1511278337962:kBucket4,
1511278337963:ifelse(command.time < kThreePm,
1511278337963:kBucket5,
1511278337964:ifelse(command.time < kSixPm,
1511278337964:kBucket6,
1511278337965:ifelse(
1511278337965:command.time < kNinePm,
1511278337966:kBucket7,
1511278337966:kBucket8)))))))
1511278337966:return(bucket)
1511278337967:}
1511278337969:PlotCommandsInBuckets <- function (commands.df) {
1511278337970:# Plots the number of commands run in the console against the time buckets.
1511278337971:#
1511278337971:# Args:
1511278337972:#   commands.df: the data frame containing the relevant commands and time of
1511278337973:#                running.
1511278337973:commands.df.2 <- commands.df %>%
1511278337973:select(-c(time_component)) %>%
1511278337974:mutate(time_bucket = ClassifyTime(time))
1511278337974:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511278337975:levels = c(kBucket1, kBucket2, kBucket3,
1511278337976:kBucket4, kBucket5, kBucket6,
1511278337977:kBucket7, kBucket8))
1511278337979:time_bucket_analysis <- commands.df.2 %>%
1511278337980:group_by(time_bucket) %>%
1511278337981:summarise(commands.count = sum(!is.na(command)))
1511278337983:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511278337984:group=time_bucket,
1511278337985:geom = 'blank', main = 'At what times am I less lazy?') +
1511278337986:geom_line(aes(group = 1)) +
1511278337987:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511278337987:xlab("Time") + ylab('R commands run in console') +
1511278337987:theme(axis.text.x = element_text(angle=90)) +
1511278337988:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511278337988:}
1511278337989:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511278337989:connection <- file('history.txt', 'r')
1511278337990:history.txt <- readLines(con = connection)
1511278338104:is.assignment.directory <- FALSE
1511278338105:commands <- c()
1511278338106:times <- c()
1511278338107:# NUmber of lines in the imported file
1511278338108:initial.file.length <- length(history.txt)
1511278338109:# For the analysis, we need to consider only comments run while working on the
1511278338109:# assignment. Throughout the assignment, the working directory has been the
1511278338110:# same. This fact is made use of to identify which are the commands relevant
1511278338111:# to the analysis.
1511278338111:for (line.num in 1:length(history.txt)) {
1511278338111:history.line <- history.txt[line.num]
1511278338112:colon.index <- str_locate(history.line, ':')[1]
1511278338112:time.component <- substr(history.line, 1, colon.index - 1)
1511278338112:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511278338113:if (startsWith(command, 'setwd')) {
1511278338113:if (startsWith(command, setwd.command)) {
1511278338113:is.assignment.directory <- TRUE
1511278338114:} else {
1511278338114:if (!startsWith(command, 'setwd.command')) {
1511278338115:is.assignment.directory <- FALSE
1511278338115:}
1511278338115:}
1511278338116:}
1511278338116:if (is.assignment.directory == TRUE) {
1511278338117:times <- append(times, time.component)
1511278338117:commands <- append(commands, command)
1511278338118:}
1511278338119:}
1511278339518:close(connection)
1511278339519:commands.df <- data.frame(time = times, command = commands,
1511278339520:stringsAsFactors = FALSE)
1511278339521:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511278339522:# between the time in the file and the actual time, could be an issue of not
1511278339522:# using the proper timezone. For now, adding an appropriate value of 38580000
1511278339523:# milliseconds to the value in the history file. This equates to 10 hours and
1511278339523:# 43 minutes.
1511278339524:# commands.df <- commands.df %>%
1511278339524:#   mutate(date = as.Date((as.double(time)) / 86400000,
1511278339525:#                         origin = '1970-01-01')) %>%
1511278339526:#   mutate(time_component = as.double(time) %% 86400000) %>%
1511278339526:#   mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511278339527:commands.df <- commands.df %>%
1511278339527:mutate(date = as.Date((as.double(time)) / 86400000,
1511278339529:origin = '1970-01-01')) %>%
1511278339529:mutate(time = ComputeTime(time))
1511278339571:# Some of the rows can be removed
1511278339571:# Comments, Rmd chunk beginnings etc.
1511278339572:# Also, multi-line commands are represented as multiple lines in the history
1511278339573:# file. This also needs to be taken care of.
1511278339574:commands.df <- commands.df %>%
1511278339574:filter(!startsWith(command, '```')) %>%
1511278339574:filter(!startsWith(command, '#')) %>%
1511278339575:filter(!startsWith(command, '"')) %>%
1511278339575:filter(!startsWith(command, "'")) %>%
1511278339575:filter(!startsWith(command, '}')) %>%
1511278339576:filter(!startsWith(command, '**')) %>%
1511278339576:mutate(previous_command = lag(command)) %>%
1511278339577:filter(!endsWith(previous_command, ','))
1511278339609:final.commands.count <- nrow(commands.df)
1511278339611:help.used <- sum(startsWith(commands.df$command, '?'))
1511278339612:view.used <- sum(startsWith(commands.df$command, 'View'))
1511278339614:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511278339615:sum(startsWith(commands.df$command, 'ggplot')) +
1511278339616:sum(startsWith(commands.df$command, 'geom')) +
1511278339616:sum(startsWith(commands.df$command, 'xlab')) +
1511278339617:sum(startsWith(commands.df$command, 'ylab')) +
1511278339618:sum(startsWith(commands.df$command, 'facet'))
1511278339620:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511278339620:sum(startsWith(commands.df$command, 'select')) +
1511278339621:sum(startsWith(commands.df$command, 'mutate')) +
1511278339621:sum(startsWith(commands.df$command, 'arrange')) +
1511278339622:sum(startsWith(commands.df$command, 'summarise')) +
1511278339622:sum(startsWith(commands.df$command, 'inner_join')) +
1511278339624:sum(startsWith(commands.df$command, 'group_by')) +
1511278339624:sum(startsWith(commands.df$command, 'left_join'))
1511278339627:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511278339628:x <- commands.df %>%
1511278339628:mutate(date=as.character(date)) %>%
1511278339629:group_by(date) %>%
1511278339629:summarise(command.count = sum(!is.na(command)))
1511278349596:require(chron)
1511278349597:require(dplyr)
1511278349598:require(ggplot2)
1511278349599:require(lubridate)
1511278349600:require(readtext)
1511278349600:require(stringr)
1511278349602:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511278349602:"Assignments/1")
1511278349603:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511278349604:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511278349605:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511278349605:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511278349609:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511278349611:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511278349613:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511278349613:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511278349614:kBucket1 <- 'Midnight to 3 AM'
1511278349615:kBucket2 <- '3 AM to 6 AM'
1511278349616:kBucket3 <- '6 AM to 9 AM'
1511278349618:kBucket4 <- '9 AM to Noon'
1511278349619:kBucket5 <- 'Noon to 3 PM'
1511278349620:kBucket6 <- '3 PM to 6 PM'
1511278349621:kBucket7 <- '6 PM to 9 PM'
1511278349622:kBucket8 <- '9 PM +'
1511278349623:ComputeTime <- function (command.time) {
1511278349624:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511278349625:date.time <- origin + (as.double(command.time) / 1000)
1511278349626:date.time.string <- as.character(date.time)
1511278349627:time.string <- substr(date.time.string, 12, 19)
1511278349628:return(chron(times=time.string))
1511278349629:}
1511278349632:ClassifyTime <- function (command.time) {
1511278349633:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511278349634:#
1511278349634:# Args:
1511278349635:#   command.time: time represented in string in hh:mm:ss format.
1511278349636:#
1511278349636:# Returns:
1511278349637:#   The bucket in which command.time falls.
1511278349637:command.time <- strptime(command.time, format = "%H:%M:%S")
1511278349639:bucket <- kBucket1
1511278349640:# TODO: Normal if elseif else blocks not working. Look into this.
1511278349641:bucket <- ifelse(command.time < kThreeAm,
1511278349641:kBucket1,
1511278349644:ifelse(command.time < kSixAm,
1511278349644:kBucket2,
1511278349646:ifelse(command.time < kNineAm,
1511278349646:kBucket3,
1511278349648:ifelse(command.time < kNoon,
1511278349649:kBucket4,
1511278349652:ifelse(command.time < kThreePm,
1511278349652:kBucket5,
1511278349653:ifelse(command.time < kSixPm,
1511278349654:kBucket6,
1511278349655:ifelse(
1511278349655:command.time < kNinePm,
1511278349656:kBucket7,
1511278349656:kBucket8)))))))
1511278349657:return(bucket)
1511278349659:}
1511278349662:PlotCommandsInBuckets <- function (commands.df) {
1511278349663:# Plots the number of commands run in the console against the time buckets.
1511278349664:#
1511278349665:# Args:
1511278349665:#   commands.df: the data frame containing the relevant commands and time of
1511278349666:#                running.
1511278349667:commands.df.2 <- commands.df %>%
1511278349668:select(-c(time_component)) %>%
1511278349668:mutate(time_bucket = ClassifyTime(time))
1511278349669:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511278349669:levels = c(kBucket1, kBucket2, kBucket3,
1511278349669:kBucket4, kBucket5, kBucket6,
1511278349670:kBucket7, kBucket8))
1511278349671:time_bucket_analysis <- commands.df.2 %>%
1511278349672:group_by(time_bucket) %>%
1511278349673:summarise(commands.count = sum(!is.na(command)))
1511278349674:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511278349676:group=time_bucket,
1511278349677:geom = 'blank', main = 'At what times am I less lazy?') +
1511278349678:geom_line(aes(group = 1)) +
1511278349679:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511278349680:xlab("Time") + ylab('R commands run in console') +
1511278349681:theme(axis.text.x = element_text(angle=90)) +
1511278349682:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511278349683:}
1511278349684:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511278349684:connection <- file('history.txt', 'r')
1511278349685:history.txt <- readLines(con = connection)
1511278349802:is.assignment.directory <- FALSE
1511278349803:commands <- c()
1511278349804:times <- c()
1511278349804:# NUmber of lines in the imported file
1511278349805:initial.file.length <- length(history.txt)
1511278349806:# For the analysis, we need to consider only comments run while working on the
1511278349806:# assignment. Throughout the assignment, the working directory has been the
1511278349807:# same. This fact is made use of to identify which are the commands relevant
1511278349808:# to the analysis.
1511278349808:for (line.num in 1:length(history.txt)) {
1511278349809:history.line <- history.txt[line.num]
1511278349809:colon.index <- str_locate(history.line, ':')[1]
1511278349809:time.component <- substr(history.line, 1, colon.index - 1)
1511278349810:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511278349810:if (startsWith(command, 'setwd')) {
1511278349810:if (startsWith(command, setwd.command)) {
1511278349811:is.assignment.directory <- TRUE
1511278349811:} else {
1511278349811:if (!startsWith(command, 'setwd.command')) {
1511278349812:is.assignment.directory <- FALSE
1511278349812:}
1511278349813:}
1511278349813:}
1511278349814:if (is.assignment.directory == TRUE) {
1511278349815:times <- append(times, time.component)
1511278349817:commands <- append(commands, command)
1511278349818:}
1511278349819:}
1511278350938:close(connection)
1511278350939:commands.df <- data.frame(time = times, command = commands,
1511278350940:stringsAsFactors = FALSE)
1511278350941:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511278350941:# between the time in the file and the actual time, could be an issue of not
1511278350942:# using the proper timezone. For now, adding an appropriate value of 38580000
1511278350943:# milliseconds to the value in the history file. This equates to 10 hours and
1511278350943:# 43 minutes.
1511278350944:# commands.df <- commands.df %>%
1511278350944:#   mutate(date = as.Date((as.double(time)) / 86400000,
1511278350946:#                         origin = '1970-01-01')) %>%
1511278350946:#   mutate(time_component = as.double(time) %% 86400000) %>%
1511278350946:#   mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511278350947:commands.df <- commands.df %>%
1511278350947:mutate(date = as.Date((as.double(time)) / 86400000,
1511278350949:origin = '1970-01-01')) %>%
1511278350949:mutate(time = ComputeTime(time))
1511278350985:# Some of the rows can be removed
1511278350985:# Comments, Rmd chunk beginnings etc.
1511278350986:# Also, multi-line commands are represented as multiple lines in the history
1511278350987:# file. This also needs to be taken care of.
1511278350987:commands.df <- commands.df %>%
1511278350988:filter(!startsWith(command, '```')) %>%
1511278350989:filter(!startsWith(command, '#')) %>%
1511278350989:filter(!startsWith(command, '"')) %>%
1511278350990:filter(!startsWith(command, "'")) %>%
1511278350990:filter(!startsWith(command, '}')) %>%
1511278350991:filter(!startsWith(command, '**')) %>%
1511278350991:mutate(previous_command = lag(command)) %>%
1511278350993:filter(!endsWith(previous_command, ','))
1511278351023:final.commands.count <- nrow(commands.df)
1511278351024:help.used <- sum(startsWith(commands.df$command, '?'))
1511278351025:view.used <- sum(startsWith(commands.df$command, 'View'))
1511278351026:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511278351027:sum(startsWith(commands.df$command, 'ggplot')) +
1511278351027:sum(startsWith(commands.df$command, 'geom')) +
1511278351028:sum(startsWith(commands.df$command, 'xlab')) +
1511278351028:sum(startsWith(commands.df$command, 'ylab')) +
1511278351028:sum(startsWith(commands.df$command, 'facet'))
1511278351029:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511278351030:sum(startsWith(commands.df$command, 'select')) +
1511278351031:sum(startsWith(commands.df$command, 'mutate')) +
1511278351031:sum(startsWith(commands.df$command, 'arrange')) +
1511278351031:sum(startsWith(commands.df$command, 'summarise')) +
1511278351032:sum(startsWith(commands.df$command, 'inner_join')) +
1511278351032:sum(startsWith(commands.df$command, 'group_by')) +
1511278351033:sum(startsWith(commands.df$command, 'left_join'))
1511278351034:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511278351036:x <- commands.df %>%
1511278351036:mutate(date=as.character(date)) %>%
1511278351037:group_by(date) %>%
1511278351038:summarise(command.count = sum(!is.na(command)))
1511278355573:View(x)
1511278442398:PlotCommandsInBuckets(commands.df)
1511278471381:PlotCommandsInBuckets <- function (commands.df) {
1511278471381:# Plots the number of commands run in the console against the time buckets.
1511278471383:#
1511278471383:# Args:
1511278471384:#   commands.df: the data frame containing the relevant commands and time of
1511278471385:#                running.
1511278471385:commands.df.2 <- commands.df %>%
1511278471385:mutate(time_bucket = ClassifyTime(time))
1511278471386:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511278471386:levels = c(kBucket1, kBucket2, kBucket3,
1511278471386:kBucket4, kBucket5, kBucket6,
1511278471387:kBucket7, kBucket8))
1511278471387:time_bucket_analysis <- commands.df.2 %>%
1511278471388:group_by(time_bucket) %>%
1511278471389:summarise(commands.count = sum(!is.na(command)))
1511278471390:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511278471390:group=time_bucket,
1511278471392:geom = 'blank', main = 'At what times am I less lazy?') +
1511278471394:geom_line(aes(group = 1)) +
1511278471396:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511278471398:xlab("Time") + ylab('R commands run in console') +
1511278471399:theme(axis.text.x = element_text(angle=90)) +
1511278471401:theme(axis.title.y = element_text(angle=0, vjust = 0.5))
1511278471402:}
1511278474144:PlotCommandsInBuckets(commands.df)
1511278555907:PlotCommandsInBuckets(commands.df)
1511278606779:PlotCommandsInBuckets(filter(commands.df, date<='2017-11-20'))
1511278703399:x <- commands.df %>%
1511278703399:mutate(date=as.character(date)) %>%
1511278703400:group_by(date) %>%
1511278703401:summarise(commands.count = sum(!is.na(command)))
1511278804858:qplot(x=date, y=commands.count, data = x,
1511278804859:group=date,
1511278804860:geom = 'blank', main = 'Time management') +
1511278804860:geom_line(aes(group = 1)) +
1511278804860:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511278804861:xlab("Time") + ylab('Number of R commands') +
1511278804861:theme(axis.text.x = element_text(angle=90))
1511279007400:PlotCommandsInBuckets(filter(commands.df, date<='2017-11-20'))
1511279390623:PlotCommandsInBuckets <- function (commands.df) {
1511279390626:# Plots the number of commands run in the console against the time buckets.
1511279390627:#
1511279390628:# Args:
1511279390628:#   commands.df: the data frame containing the relevant commands and time of
1511279390629:#                running.
1511279390630:commands.df.2 <- commands.df %>%
1511279390631:mutate(time_bucket = ClassifyTime(time)) %>%
1511279390632:mutate(date_bucket = ifelse(date < '2017-11-20', 'Till Nov 19',
1511279390633:'After Nov 19'))
1511279390634:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511279390635:levels = c(kBucket1, kBucket2, kBucket3,
1511279390636:kBucket4, kBucket5, kBucket6,
1511279390637:kBucket7, kBucket8))
1511279390638:time_bucket_analysis <- commands.df.2 %>%
1511279390640:group_by(date_bucket, time_bucket) %>%
1511279390641:summarise(commands.count = sum(!is.na(command)))
1511279390642:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511279390643:group=time_bucket,
1511279390643:geom = 'blank', main = 'At what times am I less lazy?') +
1511279390645:geom_line(aes(group = 1)) +
1511279390645:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511279390648:xlab("Time") + ylab('R commands run in console') +
1511279390649:theme(axis.text.x = element_text(angle=90)) +
1511279390649:theme(axis.title.y = element_text(angle=0, vjust = 0.5)) +
1511279390651:facet_grid(. ~ date_bucket)
1511279390652:}
1511279400643:PlotCommandsInBuckets(commands.df)
1511279432217:PlotCommandsInBuckets <- function (commands.df) {
1511279432217:# Plots the number of commands run in the console against the time buckets.
1511279432219:#
1511279432219:# Args:
1511279432219:#   commands.df: the data frame containing the relevant commands and time of
1511279432220:#                running.
1511279432220:commands.df.2 <- commands.df %>%
1511279432220:mutate(time_bucket = ClassifyTime(time)) %>%
1511279432221:mutate(date_bucket = ifelse(date < '2017-11-20', 'Till Nov 19',
1511279432221:'After Nov 19'))
1511279432221:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511279432222:levels = c(kBucket1, kBucket2, kBucket3,
1511279432222:kBucket4, kBucket5, kBucket6,
1511279432222:kBucket7, kBucket8))
1511279432223:time_bucket_analysis <- commands.df.2 %>%
1511279432223:group_by(date_bucket, time_bucket) %>%
1511279432223:summarise(commands.count = sum(!is.na(command)))
1511279432224:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511279432226:group=time_bucket,
1511279432227:geom = 'blank', main = 'At what times am I less lazy?') +
1511279432229:geom_line(aes(group = 1)) +
1511279432230:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511279432232:xlab("Time") + ylab('No. of R commands') +
1511279432233:theme(axis.text.x = element_text(angle=90)) +
1511279432234:facet_grid(. ~ date_bucket)
1511279432234:}
1511279435022:PlotCommandsInBuckets(commands.df)
1511279496756:PlotCommandsInBuckets <- function (commands.df) {
1511279496757:# Plots the number of commands run in the console against the time buckets.
1511279496758:#
1511279496758:# Args:
1511279496758:#   commands.df: the data frame containing the relevant commands and time of
1511279496759:#                running.
1511279496759:commands.df.2 <- commands.df %>%
1511279496759:mutate(time_bucket = ClassifyTime(time)) %>%
1511279496760:mutate(date_bucket = ifelse(date < '2017-11-20', 'Till Nov 19',
1511279496760:'After Nov 19'))
1511279496762:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511279496763:levels = c(kBucket1, kBucket2, kBucket3,
1511279496765:kBucket4, kBucket5, kBucket6,
1511279496766:kBucket7, kBucket8))
1511279496768:commands.df.2$date_bucket <- factor(commands.df.2$date_bucket,
1511279496768:levels = c('Till Nov 19',
1511279496769:'After Nov 19'))
1511279496770:time_bucket_analysis <- commands.df.2 %>%
1511279496771:group_by(date_bucket, time_bucket) %>%
1511279496771:summarise(commands.count = sum(!is.na(command)))
1511279496772:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511279496772:group=time_bucket,
1511279496774:geom = 'blank', main = 'At what times am I less lazy?') +
1511279496774:geom_line(aes(group = 1)) +
1511279496775:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511279496775:xlab("Time") + ylab('No. of R commands') +
1511279496776:theme(axis.text.x = element_text(angle=90)) +
1511279496777:facet_grid(. ~ date_bucket)
1511279496779:}
1511279499407:PlotCommandsInBuckets(commands.df)
1511279559171:View(filter(commands.df, date>'2017-11-19'))
1511279580269:View(filter(commands.df, date>'2017-11-20'))
1511279618103:commands.df.2 <- commands.df %>%
1511279618103:mutate(time_bucket = ClassifyTime(time)) %>%
1511279618104:mutate(date_bucket = ifelse(date < '2017-11-20', 'Till Nov 19',
1511279618105:'After Nov 19'))
1511279618337:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511279618338:levels = c(kBucket1, kBucket2, kBucket3,
1511279618339:kBucket4, kBucket5, kBucket6,
1511279618339:kBucket7, kBucket8))
1511279618340:commands.df.2$date_bucket <- factor(commands.df.2$date_bucket,
1511279618340:levels = c('Till Nov 19',
1511279618341:'After Nov 19'))
1511279620786:View(commands.df.2)
1511279652011:View(filter(commands.df.2, date_bucket == 'After Nov 19'))
1511279780613:require(chron)
1511279780615:require(dplyr)
1511279780616:require(ggplot2)
1511279780617:require(lubridate)
1511279780618:require(readtext)
1511279780620:require(stringr)
1511279780622:kAssignmentDirectory <- paste0("~/MSc in Data Analytics/Working with Data/",
1511279780623:"Assignments/1")
1511279780624:kMidnight <- strptime(as.character('00:00:00'), format = "%H:%M:%S")
1511279780625:kThreeAm <- strptime(as.character('03:00:00'), format = "%H:%M:%S")
1511279780626:kSixAm <- strptime(as.character('06:00:00'), format = "%H:%M:%S")
1511279780627:kNineAm <- strptime(as.character('09:00:00'), format = "%H:%M:%S")
1511279780628:kNoon <- strptime(as.character('12:00:00'), format = "%H:%M:%S")
1511279780628:kThreePm <- strptime(as.character('15:00:00'), format = "%H:%M:%S")
1511279780630:kSixPm <- strptime(as.character('18:00:00'), format = "%H:%M:%S")
1511279780631:kNinePm <- strptime(as.character('21:00:00'), format = "%H:%M:%S")
1511279780632:kBucket1 <- 'Midnight to 3 AM'
1511279780632:kBucket2 <- '3 AM to 6 AM'
1511279780634:kBucket3 <- '6 AM to 9 AM'
1511279780634:kBucket4 <- '9 AM to Noon'
1511279780635:kBucket5 <- 'Noon to 3 PM'
1511279780637:kBucket6 <- '3 PM to 6 PM'
1511279780639:kBucket7 <- '6 PM to 9 PM'
1511279780640:kBucket8 <- '9 PM +'
1511279780642:ComputeTime <- function (command.time) {
1511279780642:origin <- strptime("1/1/1970 00:00", "%d/%m/%Y %H:%M")
1511279780643:date.time <- origin + (as.double(command.time) / 1000)
1511279780643:date.time.string <- as.character(date.time)
1511279780644:time.string <- substr(date.time.string, 12, 19)
1511279780646:return(chron(times=time.string))
1511279780647:}
1511279780648:ClassifyTime <- function (command.time) {
1511279780649:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511279780650:#
1511279780651:# Args:
1511279780652:#   command.time: time represented in string in hh:mm:ss format.
1511279780652:#
1511279780653:# Returns:
1511279780653:#   The bucket in which command.time falls.
1511279780653:command.time <- strptime(command.time, format = "%H:%M:%S")
1511279780654:bucket <- kBucket1
1511279780655:# TODO: Normal if elseif else blocks not working. Look into this.
1511279780655:bucket <- ifelse(command.time < kThreeAm,
1511279780656:kBucket1,
1511279780657:ifelse(command.time < kSixAm,
1511279780658:kBucket2,
1511279780658:ifelse(command.time < kNineAm,
1511279780659:kBucket3,
1511279780660:ifelse(command.time < kNoon,
1511279780660:kBucket4,
1511279780662:ifelse(command.time < kThreePm,
1511279780663:kBucket5,
1511279780664:ifelse(command.time < kSixPm,
1511279780664:kBucket6,
1511279780666:ifelse(
1511279780666:command.time < kNinePm,
1511279780668:kBucket7,
1511279780668:kBucket8)))))))
1511279780670:return(bucket)
1511279780671:}
1511279780674:PlotCommandsInBuckets <- function (commands.df) {
1511279780676:# Plots the number of commands run in the console against the time buckets.
1511279780676:#
1511279780677:# Args:
1511279780678:#   commands.df: the data frame containing the relevant commands and time of
1511279780679:#                running.
1511279780679:commands.df.2 <- commands.df %>%
1511279780680:mutate(time_bucket = ClassifyTime(time)) %>%
1511279780680:mutate(date_bucket = ifelse(date < '2017-11-20', 'Till Nov 19',
1511279780681:'After Nov 19'))
1511279780681:commands.df.2$time_bucket <- factor(commands.df.2$time_bucket,
1511279780681:levels = c(kBucket1, kBucket2, kBucket3,
1511279780682:kBucket4, kBucket5, kBucket6,
1511279780682:kBucket7, kBucket8))
1511279780683:commands.df.2$date_bucket <- factor(commands.df.2$date_bucket,
1511279780684:levels = c('Till Nov 19',
1511279780685:'After Nov 19'))
1511279780686:time_bucket_analysis <- commands.df.2 %>%
1511279780687:group_by(date_bucket, time_bucket) %>%
1511279780688:summarise(commands.count = sum(!is.na(command)))
1511279780690:qplot(x=time_bucket, y=commands.count, data = time_bucket_analysis,
1511279780692:group=time_bucket,
1511279780692:geom = 'blank', main = 'At what times am I less lazy?') +
1511279780693:geom_line(aes(group = 1)) +
1511279780694:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511279780695:xlab("Time") + ylab('No. of R commands') +
1511279780696:theme(axis.text.x = element_text(angle=90)) +
1511279780697:facet_grid(. ~ date_bucket)
1511279780697:}
1511279780699:setwd.command <- paste0('setwd("', kAssignmentDirectory, '")')
1511279780700:connection <- file('history.txt', 'r')
1511279780701:history.txt <- readLines(con = connection)
1511279780830:is.assignment.directory <- FALSE
1511279780831:commands <- c()
1511279780832:times <- c()
1511279780832:# NUmber of lines in the imported file
1511279780833:initial.file.length <- length(history.txt)
1511279780834:# For the analysis, we need to consider only comments run while working on the
1511279780834:# assignment. Throughout the assignment, the working directory has been the
1511279780835:# same. This fact is made use of to identify which are the commands relevant
1511279780835:# to the analysis.
1511279780836:for (line.num in 1:length(history.txt)) {
1511279780836:history.line <- history.txt[line.num]
1511279780837:colon.index <- str_locate(history.line, ':')[1]
1511279780837:time.component <- substr(history.line, 1, colon.index - 1)
1511279780837:command <- substr(history.line, colon.index + 1, str_length(history.line))
1511279780838:if (startsWith(command, 'setwd')) {
1511279780838:if (startsWith(command, setwd.command)) {
1511279780838:is.assignment.directory <- TRUE
1511279780839:} else {
1511279780839:if (!startsWith(command, 'setwd.command')) {
1511279780839:is.assignment.directory <- FALSE
1511279780840:}
1511279780840:}
1511279780841:}
1511279780841:if (is.assignment.directory == TRUE) {
1511279780842:times <- append(times, time.component)
1511279780843:commands <- append(commands, command)
1511279780844:}
1511279780845:}
1511279782519:close(connection)
1511279782519:commands.df <- data.frame(time = times, command = commands,
1511279782520:stringsAsFactors = FALSE)
1511279782521:# On inspecting, there seems to be a difference of 10 hours and 43 minutes
1511279782521:# between the time in the file and the actual time, could be an issue of not
1511279782523:# using the proper timezone. For now, adding an appropriate value of 38580000
1511279782523:# milliseconds to the value in the history file. This equates to 10 hours and
1511279782524:# 43 minutes.
1511279782524:# commands.df <- commands.df %>%
1511279782524:#   mutate(date = as.Date((as.double(time)) / 86400000,
1511279782525:#                         origin = '1970-01-01')) %>%
1511279782525:#   mutate(time_component = as.double(time) %% 86400000) %>%
1511279782526:#   mutate(time_x = format(as.POSIXct(date) + time_component / 1000, "%H:%M:%S"))
1511279782526:commands.df <- commands.df %>%
1511279782526:mutate(date = as.Date((as.double(time)) / 86400000,
1511279782528:origin = '1970-01-01')) %>%
1511279782528:mutate(time = ComputeTime(time))
1511279782579:# Some of the rows can be removed
1511279782580:# Comments, Rmd chunk beginnings etc.
1511279782581:# Also, multi-line commands are represented as multiple lines in the history
1511279782582:# file. This also needs to be taken care of.
1511279782582:commands.df <- commands.df %>%
1511279782583:filter(!startsWith(command, '```')) %>%
1511279782584:filter(!startsWith(command, '#')) %>%
1511279782584:filter(!startsWith(command, '"')) %>%
1511279782584:filter(!startsWith(command, "'")) %>%
1511279782585:filter(!startsWith(command, '}')) %>%
1511279782585:filter(!startsWith(command, '**')) %>%
1511279782585:mutate(previous_command = lag(command)) %>%
1511279782586:filter(!endsWith(previous_command, ','))
1511279782615:final.commands.count <- nrow(commands.df)
1511279782615:help.used <- sum(startsWith(commands.df$command, '?'))
1511279782616:view.used <- sum(startsWith(commands.df$command, 'View'))
1511279782617:ggplot.used <- sum(startsWith(commands.df$command, 'qplot')) +
1511279782618:sum(startsWith(commands.df$command, 'ggplot')) +
1511279782618:sum(startsWith(commands.df$command, 'geom')) +
1511279782619:sum(startsWith(commands.df$command, 'xlab')) +
1511279782619:sum(startsWith(commands.df$command, 'ylab')) +
1511279782619:sum(startsWith(commands.df$command, 'facet'))
1511279782620:dplyr.used <- sum(startsWith(commands.df$command, 'filter')) +
1511279782621:sum(startsWith(commands.df$command, 'select')) +
1511279782622:sum(startsWith(commands.df$command, 'mutate')) +
1511279782622:sum(startsWith(commands.df$command, 'arrange')) +
1511279782622:sum(startsWith(commands.df$command, 'summarise')) +
1511279782623:sum(startsWith(commands.df$command, 'inner_join')) +
1511279782623:sum(startsWith(commands.df$command, 'group_by')) +
1511279782624:sum(startsWith(commands.df$command, 'left_join'))
1511279782626:require.statements <- sum(startsWith(commands.df$command, 'require'))
1511279782627:x <- commands.df %>%
1511279782628:mutate(date=as.character(date)) %>%
1511279782628:group_by(date) %>%
1511279782629:summarise(commands.count = sum(!is.na(command)))
1511279782656:qplot(x=date, y=commands.count, data = x,
1511279782656:group=date,
1511279782658:geom = 'blank', main = 'Time management') +
1511279782659:geom_line(aes(group = 1)) +
1511279782660:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511279782660:xlab("Time") + ylab('Number of R commands') +
1511279782661:theme(axis.text.x = element_text(angle=90))
1511279813709:PlotCommandsInBuckets(commands.df)
1511285377704:PlotCommandsInBuckets(commands.df)
1511285392683:PlotCommandsVsDates(commands.df)
1511285397364:PlotCommandsVsDates <- function (commands.df) {
1511285397365:# Plots the number of commands run in the console against the dates they were
1511285397366:# run on.
1511285397366:#
1511285397367:# Args:
1511285397367:#   commands.df: the data frame containing the relevant commands and time of
1511285397368:#                running.
1511285397368:commands.df.2 <- commands.df %>%
1511285397369:mutate(date=as.character(date)) %>%
1511285397370:group_by(date) %>%
1511285397370:summarise(commands.count = sum(!is.na(command)))
1511285397371:qplot(x = date, y = commands.count, data = commands.df.2,
1511285397371:group = date,
1511285397372:geom = 'blank', main = 'Time management') +
1511285397373:geom_line(aes(group = 1)) +
1511285397373:# geom_bar(stat='identity', position = 'dodge', alpha = 0.4) +
1511285397374:xlab("Time") + ylab('Number of R commands') +
1511285397374:theme(axis.text.x = element_text(angle=90))
1511285397374:}
1511285399892:PlotCommandsVsDates(commands.df)
1511286841581:knitr::opts_chunk$set(echo=TRUE)
1511286841583:options(width=40)
1511286841586:require(DT)
1511286841633:require(knitr)
1511286841779:PlotCommandsInBuckets(commands.df)
1511289904649:datatable(utilisation.by.size, autoHideNavigation=TRUE)
1511289910655:source("BikeInfo.R")
1511289914268:datatable(utilisation.by.size, autoHideNavigation=TRUE)
1511289975485:require(dplyr)
1511289975487:require(ggplot2)
1511289975487:require(readODS)
1511289975594:require(readr)
1511289975619:require(reshape2)
1511289975643:kColNames <- c('time', 'mon_in', 'mon_out', 'tue_in', 'tue_out', 'wed_in',
1511289975644:'wed_out', 'thu_in', 'thu_out', 'fri_in', 'fri_out', 'sat_in',
1511289975645:'sat_out', 'sun_in', 'sun_out')
1511289975646:kEntranceOne <- "O'Connell Street at Clerys"
1511289975647:kEntranceTwo <- "South King St"
1511289975648:dublinked.url <- paste0("https://data.dublinked.ie/dataset/8204be0a-6348-459e",
1511289975650:"-96e9-65bb75600ec3/resource/384fe47a-2f25-4f52-8fc5",
1511289975650:"-8e61899951e9/download/pedestrianfootfall2013.ods")
1511289975651:download.file(dublinked.url, "pedestrianfootfall2013.ods")
1511289976354:GetEntranceData <- function (sheet, entrance.name) {
1511289976355:# Classifies the time into 8 buckets of 3 hours each and returns the bucket.
1511289976357:#
1511289976358:# Args:
1511289976361:#   sheet: the ODS sheet containing a week's data of all the entrances.
1511289976361:#   entrance.name: name of the entrance of which footfall data is to be
1511289976362:#   extracted.
1511289976363:#
1511289976363:# Returns:
1511289976364:#   A data frame containing the hourly traffic data of the relevant data
1511289976364:#   frame.
1511289976364:search.string <- paste("Entrance Name:", entrance.name)
1511289976365:index <- which(sheet$time == search.string)
1511289976365:start.index <- index + 3
1511289976367:end.index <- index + 26
1511289976367:entrance.df <- sheet[start.index:end.index, ]
1511289976368:return(entrance.df)
1511289976368:}
1511289976370:GetWeekwiseData <- function (entrance.df, direction = 'in') {
1511289976370:# Returns the molten weekwise data in the direction specified.
1511289976371:#
1511289976372:# Args:
1511289976373:#   entrance.df: the data frame containing the info of an entrance.
1511289976374:#   direction: direction of the traffic, either in or out.
1511289976375:#
1511289976375:# Returns:
1511289976376:#   A data frame containing the molten weekwise data in the direction
1511289976376:#   specified.
1511289976376:out.variables <- c('time', 'mon_out', 'tue_out', 'wed_out', 'thu_out',
1511289976377:'fri_out', 'sat_out', 'sun_out')
1511289976377:in.variables <- c('time', 'mon_in', 'tue_in', 'wed_in', 'thu_in', 'fri_in',
1511289976377:'sat_in', 'sun_in')
1511289976378:col.nums <- 1:16
1511289976378:names(col.nums) <- colnames(entrance.df)
1511289976379:if (direction == 'in') {
1511289976380:exclude.list <- col.nums[out.variables]
1511289976383:} else {
1511289976383:exclude.list <- col.nums[in.variables]
1511289976384:}
1511289976384:weekwise.df <- entrance.df %>%
1511289976386:select(-exclude.list) %>%
1511289976386:melt(id.vars = 'week_num') %>%
1511289976388:group_by(week_num) %>%
1511289976389:mutate(value = as.integer(value))
1511289976390:if (direction == 'in') {
1511289976391:weekwise.df <- summarise(weekwise.df, weekly_in = sum(value))
1511289976391:} else {
1511289976391:weekwise.df <- summarise(weekwise.df, weekly_out = sum(value))
1511289976392:}
1511289976392:return(weekwise.df)
1511289976393:}
1511289976394:entrance.one.data <- data.frame()
1511289976394:entrance.two.data <- data.frame()
1511289976396:ReadFromODSFile <- function () {
1511289976397:# Reads from the ODS file all the data pertaining to the two entrances
1511289976398:# chosen and writes it to 2 CSVs. This needs to be run only for the first
1511289976399:# time. CSV files can be used for the Markdown report.
1511289976399:#
1511289976399:# THIS FUNCTION TOOK ~9.5 MINUTES TO RUN.
1511289976400:#
1511289976400:# Returns:
1511289976400:#   A data frame containing the molten weekwise data in the direction
1511289976400:#   specified.
1511289976401:entrance.one.data <- data.frame()
1511289976401:entrance.two.data <- data.frame()
1511289976402:for (sheet.num in 1:52) {
1511289976404:sheet <- read_ods("pedestrianfootfall2013.ods", range = "A1:O100",
1511289976405:sheet = sheet.num)
1511289976406:colnames(sheet) <- kColNames
1511289976406:entrance.one.week.data <- GetEntranceData(sheet, kEntranceOne)
1511289976408:entrance.one.week.data <- cbind(entrance.one.week.data, week_num=sheet.num)
1511289976408:entrance.one.data <- rbind(entrance.one.data, entrance.one.week.data)
1511289976409:entrance.two.week.data <- GetEntranceData(sheet, kEntranceTwo)
1511289976410:entrance.two.week.data <- cbind(entrance.two.week.data, week_num=sheet.num)
1511289976411:entrance.two.data <- rbind(entrance.two.data, entrance.two.week.data)
1511289976413:}
1511289976414:entrance.one.data <<- entrance.one.data
1511289976415:entrance.two.data <<- entrance.two.data
1511289976415:write_csv(entrance.one.data, 'entrance_one_data.csv')
1511289976417:write_csv(entrance.two.data, 'entrance_two_data.csv')
1511289976417:}
1511289976418:ReadFromCSVFiles <- function () {
1511289976420:# Reads from the two relevant CSVs and creates 2 global variables.
1511289976421:entrance.one.data <<- read_csv('entrance_one_data.csv')
1511289976422:entrance.two.data <<- read_csv('entrance_two_data.csv')
1511289976422:}
1511289976423:PlotWeekWiseComparison <- function () {
1511289976424:# Plots the weekwise footfall patterns over the year for both the entrances.
1511289976425:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511289976425:e2.weekwise.in <- GetWeekwiseData(entrance.two.data)
1511289976426:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511289976427:e2.weekwise.out <- GetWeekwiseData(entrance.two.data, direction='out')
1511289976428:e1.weekwise <- inner_join(e1.weekwise.in, e1.weekwise.out, by = 'week_num') %>%
1511289976428:melt(id.vars = 'week_num')
1511289976431:e2.weekwise <- inner_join(e2.weekwise.in, e2.weekwise.out, by = 'week_num') %>%
1511289976432:melt(id.vars = 'week_num')
1511289976433:e1.weekwise <- cbind(e1.weekwise, entrance=kEntranceOne)
1511289976433:e2.weekwise <- cbind(e2.weekwise, entrance=kEntranceTwo)
1511289976434:weekwise <- rbind(e1.weekwise, e2.weekwise)
1511289976435:weekwise$variable = factor(weekwise$variable, labels = c('In', 'Out'),
1511289976435:levels = c('weekly_in', 'weekly_out'))
1511289976436:qplot(week_num, value, data=weekwise, geom='line', colour=variable) +
1511289976437:facet_grid(. ~ entrance) +
1511289976438:xlab('Week') + ylab('Footfall') + labs(colour = 'Direction') +
1511289976439:labs(title = 'Footfall over the weeks')
1511289976440:}
1511289976442:ReadFromCSVFiles()
1511290219912:exchange.url <- paste0("https://www.poundsterlinglive.com/",
1511290219914:"bank-of-england-spot/historical-spot-exchange-rates/",
1511290219914:"gbp/GBP-to-EUR-2013#charts")
1511290246624:require('rvest')
1511290268030:exchange.data <- read_html(exchange.url)
1511290296241:guardian.url <- 'https://www.theguardian.com/football/premierleague/table'
1511290297368:guardian.data <- read_html(guardian.url)
1511290309326:table.nodes <- html_nodes(exchange.data, 'table')
1511290318186:tbl.nodes <- html_nodes(guardian.data, 'table')
1511290413420:exchange.tables <- html_table(table.nodes)
1511290464022:exchange.df <- exchange.tables[[1]]
1511290466345:View(entrance.two.data)
1511290467251:View(exchange.df)
1511290473320:exchange.df <- exchange.tables[[14]]
1511290489547:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511290527387:require(stringr)
1511290556939:colnames(exchange.df) <- tolower(colnames(exchange.tables))
1511290722739:x <- "Tue, 31 Dec 2013"
1511290727174:?strptime
1511290867268:format(Sys.time(), "%l:%M %p on %A, %b %d %Y")
1511290882765:format(Sys.time(), "%A, %b %d %Y")
1511290915032:format(Sys.time(), "%a, %b %d %Y")
1511290938517:strptime(x, format = "%a, %b %d %Y")
1511290945007:x
1511290961506:strptime(x, format = "%a, %d %b %Y")
1511290994258:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511290995473:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291039527:exchange.df <- exchange.df %>%
1511291039527:mutate(date = strptime(date, format = "%a, %d %b %Y"))
1511291077151:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291077152:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291084279:strptime(exchange.df$date, format = "%a, %d %b %Y")
1511291104128:exchange.df <- exchange.df %>%
1511291104129:mutate(date = strptime(date, format = "%a, %d %b %Y"))
1511291111814:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291111815:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291137332:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291137333:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291137333:exchange.df$date <- strptime(exchange.df$date, format = "%a, %d %b %Y")
1511291146538:str(exchange.df)
1511291166599:x <- strptime(x, format = "%a, %d %b %Y")
1511291166943:x
1511291170471:week(x)
1511291213695:exchange.df <- mutate(exchange.df, week_num = week(date))
1511291226479:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291226480:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291226480:exchange.df$date <- strptime(exchange.df$date, format = "%a, %d %b %Y")
1511291243810:exchange.df$week <- week(exchange.df$date)
1511291252495:str(exchange.df)
1511291428970:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291428972:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291428973:exchange.df <- exchange.df %>%
1511291428974:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y")))
1511291450042:exchange.df <- exchange.df %>%
1511291450043:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511291450044:mutate(week = week(date))
1511291466126:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291466127:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291466128:exchange.df <- exchange.df %>%
1511291466128:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511291466130:mutate(week = week(date))
1511291601644:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291601646:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291601647:exchange.df <- exchange.df %>%
1511291601648:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511291601648:mutate(week = week(date)) %>%
1511291601651:filter(week > 52)
1511291614502:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291614504:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291614504:exchange.df <- exchange.df %>%
1511291614505:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511291614506:mutate(week = week(date)) %>%
1511291614506:filter(week < 52)
1511291630304:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511291630305:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511291630306:exchange.df <- exchange.df %>%
1511291630306:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511291630308:mutate(week = week(date)) %>%
1511291630308:filter(week < 53)
1511291686760:x <- 1 GBP = "1.1964 EUR"
1511291694916:x <- "1 GBP = 1.1964 EUR"
1511291724461:str_split(x)
1511291734665:str_split(x, " = ")
1511291780359:str_split(x, " = ")[2]
1511291785257:str_split(x, " = ")[[1]]
1511291810961:str_split(x, " = ")[[1]][2]
1511291873701:exchange.string <- str_split(x, " = ")[[1]][2]
1511291876589:ng <- substr(exchange.string, 1, length(exchange.string) - 4)
1511291879737:exchange.string <- substr(exchange.string, 1, length(exchange.string) - 4)
1511291882289:exchange.string
1511291894618:exchange.string <- str_split(x, " = ")[[1]][2]
1511291899800:exchange.string
1511291915187:exchange.string <- substr(exchange.string, 1, length(exchange.string) - 4)
1511291916426:exchange.string
1511291929206:exchange.string <- str_split(x, " = ")[[1]][2]
1511291932514:exchange.string
1511291939925:length(exchange.string) - 4
1511291956879:nchar(exchange.string) - 4
1511291970333:exchange.string <- substr(exchange.string, 1, nchar(exchange.string) - 4)
1511291973330:exchange.string
1511292011855:exchange.rate <- 1 / float(as.double(exchange.string))
1511292021896:exchange.rate <- 1 / as.double(exchange.string)
1511292032907:exchange.rate <- round(1 / as.double(exchange.string), 3)
1511292056259:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511292056260:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511292056261:exchange.df <- exchange.df %>%
1511292056261:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511292056264:mutate(week = week(date)) %>%
1511292056265:filter(week < 53) %>%
1511292056267:mutate(exchange_rate = ExtractExchangeRate(rate))
1511292062518:ExtractExchangeRate <- function(exchange.string) {
1511292062520:exchange.string <- str_split(exchange.string, " = ")[[1]][2]
1511292062521:exchange.string <- substr(exchange.string, 1, nchar(exchange.string) - 4)
1511292062522:exchange.rate <- round(1 / as.double(exchange.string), 3)
1511292062522:}
1511292068578:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511292068579:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511292068579:exchange.df <- exchange.df %>%
1511292068580:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511292068581:mutate(week = week(date)) %>%
1511292068581:filter(week < 53) %>%
1511292068582:mutate(exchange_rate = ExtractExchangeRate(rate))
1511292070990:View(exchange.df)
1511292132532:exchange.string <- "1 GBP = 1.1964 EUR"
1511292137897:exchange.string <- str_split(exchange.string, " = ")[2]
1511292142402:exchange.string
1511292162690:exchange.string <- "1 GBP = 1.1964 EUR"
1511292166081:exchange.string <- str_split(exchange.string, " = ")
1511292170641:exchange.string
1511292209063:exchange.strings <- c("1 GBP = 1.1964 EUR", "1 GBP = 1.1964 EUR")
1511292223264:str_split(exchange.strings, " = ")
1511292236494:xs <- str_split(exchange.strings, " = ")
1511292242827:xs[[]][2]
1511292249043:xs[1]
1511292251848:xs[2]
1511292321936:str_split()
1511292326216:?str_split
1511292339865:xs <- str_split(exchange.strings, " = ", simplify = TRUE)
1511292340943:xs
1511292346589:xs[2]
1511292351964:xs[, 2]
1511292456122:?substr
1511292471325:exchange.strings
1511292489009:ExtractExchangeRate <- function(exchange.string) {
1511292489010:exchange.string <- str_split(exchange.string, " = ", simplify = TRUE)[, 2]
1511292489010:exchange.string <- substr(exchange.string, 1, nchar(exchange.string) - 4)
1511292489011:exchange.rate <- round(1 / as.double(exchange.string), 3)
1511292489011:return(exchange.rate)
1511292489012:}
1511292502325:ExtractExchangeRate(exchange.strings)
1511292507888:ExtractExchangeRate <- function(exchange.string) {
1511292507889:exchange.string <- str_split(exchange.string, " = ", simplify = TRUE)[, 2]
1511292507890:exchange.string <- substr(exchange.string, 1, nchar(exchange.string) - 4)
1511292507890:exchange.rate <- round(1 / as.double(exchange.string), 3)
1511292507891:return(exchange.rate)
1511292507891:}
1511292511687:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511292511689:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511292511691:exchange.df <- exchange.df %>%
1511292511692:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511292511693:mutate(week = week(date)) %>%
1511292511694:filter(week < 53) %>%
1511292511694:mutate(exchange_rate = ExtractExchangeRate(rate))
1511292513606:View(exchange.df)
1511292555577:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511292555578:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511292555579:exchange.df <- exchange.df %>%
1511292555580:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511292555581:mutate(week = week(date)) %>%
1511292555582:filter(week < 53) %>%
1511292555583:mutate(exchange_rate = ExtractExchangeRate(rate)) %>%
1511292555584:select(-c(currency, rate))
1511292654367:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511292654407:e1.weekwise.out <- GetWeekwiseData(entrance.one.data, direction='out')
1511292657901:View(e1.weekwise.in)
1511292658712:View(e1.weekwise.out)
1511292659820:View(e1.weekwise.in)
1511292720321:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511292720323:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511292720323:exchange.df <- exchange.df %>%
1511292720324:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511292720326:mutate(week = week(date)) %>%
1511292720327:filter(week < 53) %>%
1511292720328:mutate(exchange_rate = ExtractExchangeRate(rate)) %>%
1511292720330:select(-c(currency, rate, date)) %>%
1511292720331:group_by(week) %>%
1511292720332:summarise(exchange_rate = mean(exchange_rate))
1511292735979:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511292735980:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511292735981:exchange.df <- exchange.df %>%
1511292735982:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511292735983:mutate(week = week(date)) %>%
1511292735984:filter(week < 53) %>%
1511292735985:mutate(exchange_rate = ExtractExchangeRate(rate)) %>%
1511292735986:select(-c(currency, rate, date)) %>%
1511292735986:group_by(week) %>%
1511292735988:summarise(exchange_rate = round(mean(exchange_rate), 3))
1511292823779:exchange.df <- exchange.tables[[length(exchange.tables)]]
1511292823781:colnames(exchange.df) <- tolower(colnames(exchange.df))
1511292823782:exchange.df <- exchange.df %>%
1511292823782:mutate(date = as.POSIXct(strptime(date, format = "%a, %d %b %Y"))) %>%
1511292823783:mutate(week_num = week(date)) %>%
1511292823784:filter(week_num < 53) %>%
1511292823784:mutate(exchange_rate = ExtractExchangeRate(rate)) %>%
1511292823785:select(-c(currency, rate, date)) %>%
1511292823785:group_by(week_num) %>%
1511292823786:summarise(exchange_rate = round(mean(exchange_rate), 3))
1511292839426:footfall.and.exchange.rates <- exchange.df %>%
1511292839427:inner_join(e1.weekwise.in, by = 'week_num')
1511292855185:footfall.and.exchange.rates <- exchange.df %>%
1511292855186:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511292855187:melt(id.vars = 'week_num')
1511292862405:View(footfall.and.exchange.rates)
1511293112702:View(e1.weekwise.in)
1511293125747:footfall.and.exchange.rates <- exchange.df %>%
1511293125748:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511293125749:mutate(scaled_exchange_rate = scale(exchange_rate)) %>%
1511293125750:mutate(scaled_footfall = scale(weekly_in))
1511293125756:melt(id.vars = 'week_num')
1511293136433:View(exchange.df)
1511293144554:footfall.and.exchange.rates <- exchange.df %>%
1511293144555:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511293144556:mutate(scaled_exchange_rate = scale(exchange_rate))
1511293180352:footfall.and.exchange.rates <- exchange.df %>%
1511293180353:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511293180354:mutate(scaled_exchange_rate = scale(exchange_rate)) %>%
1511293180354:mutate(scaled_footfall = scale(weekly_in)) %>%
1511293180354:melt(id.vars = 'week_num')
1511293252302:footfall.and.exchange.rates <- exchange.df %>%
1511293252305:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511293252305:mutate(scaled_exchange_rate = round(scale(exchange_rate), 2)) %>%
1511293252307:mutate(scaled_footfall = round(scale(weekly_in), 2)) %>%
1511293252308:select(-c(exchange_rate, weekly_in)) %>%
1511293252309:melt(id.vars = 'week_num')
1511293257988:footfall.and.exchange.rates <- exchange.df %>%
1511293257989:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511293257989:mutate(scaled_exchange_rate = round(scale(exchange_rate), 2)) %>%
1511293257990:mutate(scaled_footfall = round(scale(weekly_in), 2)) %>%
1511293257990:select(-c(exchange_rate, weekly_in))
1511293269286:str(footfall.and.exchange.rates)
1511293289285:footfall.and.exchange.rates <- exchange.df %>%
1511293289285:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511293289286:mutate(scaled_exchange_rate = round(scale(exchange_rate), 2)) %>%
1511293289287:mutate(scaled_footfall = round(scale(weekly_in), 2)) %>%
1511293289287:select(-c(exchange_rate, weekly_in)) %>%
1511293289287:melt(id.vars = 'week_num')
1511293292780:View(footfall.and.exchange.rates)
1511293451683:qplot(week_num, value, data=footfall.and.exchange.rates,
1511293451685:geom='line', colour=variable) +
1511293451686:xlab('Week') + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511293451687:labs(title = "Trends - footfall at Clerys, O'Connell St and EUR against GBP")
1511293682887:qplot(week_num, value, data=footfall.and.exchange.rates,
1511293682889:geom='line', colour=variable) +
1511293682891:xlab('Week') + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511293682892:labs(title = "A comparison of trends") +
1511293682893:labs(subtitle = "Footfall at Clery's, O'Connell St and EUR rate against GBP")
1511293907067:footfall.and.exchange.rates <- exchange.df %>%
1511293907068:inner_join(e1.weekwise.in, by = 'week_num')
1511293909512:View(footfall.and.exchange.rates)
1511293966957:View(xs)
1511294104978:footfall.and.exchange.rates <- exchange.df %>%
1511294104981:inner_join(e1.weekwise.in, by = 'week_num')
1511294104984:qplot(weekly_in, exchange_rate, data=footfall.and.exchange.rates) +
1511294104984:xlab("Footfall at Clery's") + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511294104985:labs(title = "Footfall at Clery's, O'Connell St vs EUR rate against GBP")
1511294642438:PlotFootfallVsExchangeRateTrend <- function (exchange.df) {
1511294642441:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511294642441:footfall.and.exchange.rates <- exchange.df %>%
1511294642443:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511294642444:mutate(scaled_exchange_rate = round(scale(exchange_rate), 2)) %>%
1511294642444:mutate(scaled_footfall = round(scale(weekly_in), 2)) %>%
1511294642445:select(-c(exchange_rate, weekly_in)) %>%
1511294642445:melt(id.vars = 'week_num')
1511294642446:footfall.and.exchange.rates$variable <- factor(
1511294642447:footfall.and.exchange.rates$variable,
1511294642447:levels = c('scaled_exchange_rate', 'scaled_footfall'),
1511294642448:labels = c('EUR value', "Footfall at Clery's (In)"))
1511294642449:qplot(week_num, value, data=footfall.and.exchange.rates,
1511294642450:geom='line', colour=variable) +
1511294642453:xlab('Week') + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511294642454:labs(title = "A comparison of trends") +
1511294642456:labs(subtitle = "Footfall at Clery's, O'Connell St and EUR rate against GBP")
1511294642458:}
1511294642459:PlotFootfallVsExchangeRateScatter <- function (exchange.df) {
1511294642462:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511294642462:footfall.and.exchange.rates <- exchange.df %>%
1511294642463:inner_join(e1.weekwise.in, by = 'week_num')
1511294642464:qplot(weekly_in, exchange_rate, data=footfall.and.exchange.rates) +
1511294642465:xlab("Footfall at Clery's") + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511294642465:labs(title = "Footfall at Clery's, O'Connell St vs EUR rate against GBP")
1511294642467:}
1511294688882:PlotFootfallVsExchangeRateTrend <- function (exchange.df) {
1511294688884:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511294688885:footfall.and.exchange.rates <- exchange.df %>%
1511294688886:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511294688887:mutate(scaled_exchange_rate = round(scale(exchange_rate), 2)) %>%
1511294688887:mutate(scaled_footfall = round(scale(weekly_in), 2)) %>%
1511294688888:select(-c(exchange_rate, weekly_in)) %>%
1511294688888:melt(id.vars = 'week_num')
1511294688889:footfall.and.exchange.rates$variable <- factor(
1511294688889:footfall.and.exchange.rates$variable,
1511294688890:levels = c('scaled_exchange_rate', 'scaled_footfall'),
1511294688891:labels = c('EUR value', "Footfall at Clery's (In)"))
1511294688892:qplot(week_num, value, data=footfall.and.exchange.rates,
1511294688892:geom='line', colour=variable) +
1511294688892:xlab('Week') + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511294688893:labs(title = "A comparison of trends") +
1511294688893:labs(subtitle = "Footfall at Clery's, O'Connell St and EUR rate against GBP")
1511294688894:}
1511294688895:PlotFootfallVsExchangeRateScatter <- function (exchange.df) {
1511294688896:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511294688899:footfall.and.exchange.rates <- exchange.df %>%
1511294688900:inner_join(e1.weekwise.in, by = 'week_num')
1511294688901:qplot(weekly_in, exchange_rate, data=footfall.and.exchange.rates) +
1511294688902:xlab("Footfall at Clery's") + ylab('EUR value') +
1511294688903:labs(colour = 'Measure') +
1511294688903:labs(title = "Footfall at Clery's, O'Connell St vs EUR rate against GBP")
1511294688904:}
1511294696776:PlotFootfallVsExchangeRateTrend(exchange.df)
1511294708412:PlotFootfallVsExchangeRateScatter(exchange.df)
1511295182788:PlotFootfallVsExchangeRateScatter <- function (exchange.df) {
1511295182790:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511295182790:footfall.and.exchange.rates <- exchange.df %>%
1511295182792:inner_join(e1.weekwise.in, by = 'week_num')
1511295182792:qplot(exchange_rate, weekly_in, data=footfall.and.exchange.rates) +
1511295182794:xlab("Footfall at Clery's") + ylab('EUR value') +
1511295182794:labs(colour = 'Measure') +
1511295182795:labs(title = "Footfall at Clery's, O'Connell St vs EUR rate against GBP")
1511295182796:}
1511295185038:PlotFootfallVsExchangeRateScatter(exchange.df)
1511295222210:PlotFootfallVsExchangeRateScatter <- function (exchange.df) {
1511295222211:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511295222211:footfall.and.exchange.rates <- exchange.df %>%
1511295222212:inner_join(e1.weekwise.in, by = 'week_num')
1511295222213:qplot(exchange_rate, weekly_in, data=footfall.and.exchange.rates) +
1511295222213:xlab('EUR value') + ylab("Footfall at Clery's") +
1511295222214:labs(colour = 'Measure') +
1511295222214:labs(title = "Footfall at Clery's, O'Connell St vs EUR rate against GBP")
1511295222214:}
1511295224719:PlotFootfallVsExchangeRateScatter(exchange.df)
1511295426597:PlotFootfallVsExchangeRateTrend(exchange.df)
1511295442614:PlotFootfallVsExchangeRateTrend(exchange.df)
1511295481501:PlotFootfallVsExchangeRateTrend <- function (exchange.df) {
1511295481502:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511295481503:footfall.and.exchange.rates <- exchange.df %>%
1511295481504:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511295481506:mutate(scaled_exchange_rate = round(as.double(scale(exchange_rate), 2))) %>%
1511295481507:mutate(scaled_footfall = round(as.double(scale(weekly_in), 2))) %>%
1511295481508:select(-c(exchange_rate, weekly_in)) %>%
1511295481509:melt(id.vars = 'week_num')
1511295481510:footfall.and.exchange.rates$variable <- factor(
1511295481510:footfall.and.exchange.rates$variable,
1511295481511:levels = c('scaled_exchange_rate', 'scaled_footfall'),
1511295481511:labels = c('EUR value', "Footfall at Clerys (In)"))
1511295481512:qplot(week_num, value, data=footfall.and.exchange.rates,
1511295481513:geom='line', colour=variable) +
1511295481514:xlab('Week') + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511295481515:labs(title = "A comparison of trends") +
1511295481516:labs(subtitle = "Footfall at Clerys, O'Connell St. and EUR rate against GBP")
1511295481517:}
1511295483828:PlotFootfallVsExchangeRateTrend(exchange.df)
1511295517949:PlotFootfallVsExchangeRateTrend <- function (exchange.df) {
1511295517951:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511295517952:footfall.and.exchange.rates <- exchange.df %>%
1511295517952:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511295517954:mutate(scaled_exchange_rate = round(scale(exchange_rate), 2)) %>%
1511295517954:mutate(scaled_footfall = round(scale(weekly_in), 2)) %>%
1511295517956:select(-c(exchange_rate, weekly_in)) %>%
1511295517956:melt(id.vars = 'week_num')
1511295517957:footfall.and.exchange.rates$variable <- factor(
1511295517957:footfall.and.exchange.rates$variable,
1511295517958:levels = c('scaled_exchange_rate', 'scaled_footfall'),
1511295517958:labels = c('EUR value', "Footfall at Clerys (In)"))
1511295517958:qplot(week_num, value, data=footfall.and.exchange.rates,
1511295517959:geom='line', colour=variable) +
1511295517959:xlab('Week') + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511295517959:labs(title = "A comparison of trends") +
1511295517960:labs(subtitle = "Footfall at Clerys, O'Connell St. and EUR rate against GBP")
1511295517960:}
1511295520153:PlotFootfallVsExchangeRateTrend(exchange.df)
1511295542517:require(warnings)
1511295602483:footfall.and.exchange.rates <- exchange.df %>%
1511295602484:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511295602485:mutate(scaled_exchange_rate = round(scale(exchange_rate), 2)) %>%
1511295602486:mutate(scaled_footfall = round(scale(weekly_in), 2))
1511295614388:str(footfall.and.exchange.rates)
1511295640804:footfall.and.exchange.rates$scaled_exchange_rate
1511295683591:xx <- scale(exchange.df$exchange_rate)
1511295688480:View(xx)
1511295699383:xx[1]
1511295707541:xx[2]
1511295721078:?scale
1511295737436:xx[1,]
1511295739234:xx[2,]
1511295766941:xx
1511295804047:is.matrix(xx)
1511295810772:dim(xx)
1511295818931:xx[, 1]
1511295837129:footfall.and.exchange.rates <- exchange.df %>%
1511295837130:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511295837131:mutate(scaled_exchange_rate = round(scale(exchange_rate)[, 1], 2)) %>%
1511295837131:mutate(scaled_footfall = round(scale(weekly_in)[, 1], 2))
1511295839723:View(footfall.and.exchange.rates)
1511295847396:footfall.and.exchange.rates <- exchange.df %>%
1511295847397:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511295847398:mutate(scaled_exchange_rate = round(scale(exchange_rate)[, 1], 2)) %>%
1511295847398:mutate(scaled_footfall = round(scale(weekly_in)[, 1], 2)) %>%
1511295847399:select(-c(exchange_rate, weekly_in)) %>%
1511295847400:melt(id.vars = 'week_num')
1511295850259:PlotFootfallVsExchangeRateTrend <- function (exchange.df) {
1511295850260:e1.weekwise.in <- GetWeekwiseData(entrance.one.data)
1511295850261:footfall.and.exchange.rates <- exchange.df %>%
1511295850262:inner_join(e1.weekwise.in, by = 'week_num') %>%
1511295850263:mutate(scaled_exchange_rate = round(scale(exchange_rate)[, 1], 2)) %>%
1511295850264:mutate(scaled_footfall = round(scale(weekly_in)[, 1], 2)) %>%
1511295850264:select(-c(exchange_rate, weekly_in)) %>%
1511295850264:melt(id.vars = 'week_num')
1511295850265:footfall.and.exchange.rates$variable <- factor(
1511295850265:footfall.and.exchange.rates$variable,
1511295850265:levels = c('scaled_exchange_rate', 'scaled_footfall'),
1511295850266:labels = c('EUR value', "Footfall at Clerys (In)"))
1511295850266:qplot(week_num, value, data=footfall.and.exchange.rates,
1511295850267:geom='line', colour=variable) +
1511295850267:xlab('Week') + ylab('Footfall and EUR value') + labs(colour = 'Measure') +
1511295850268:labs(title = "A comparison of trends") +
1511295850270:labs(subtitle = "Footfall at Clerys, O'Connell St. and EUR rate against GBP")
1511295850271:}
1511295858358:PlotFootfallVsExchangeRateTrend(exchange.df)
1511295872396:PlotFootfallVsExchangeRateTrend(exchange.df)
1511295883291:PlotFootfallVsExchangeRateScatter(exchange.df)
1511295888171:PlotFootfallVsExchangeRateScatter(exchange.df)
1511295894133:PlotFootfallVsExchangeRateTrend(exchange.df)
1511296155972:week()
1511296589787:# TODO: Learn and add CSS to the tables. Kick ass!
1511296589789:kable(utilisation.by.size,
1511296589791:caption="Utilisation of bike stations in Dublin - classified by size of
1511296589792:the station.",
1511296589794:format="html")
1511296595088:source("BikeInfo.R")
1511296599139:# TODO: Learn and add CSS to the tables. Kick ass!
1511296599140:kable(utilisation.by.size,
1511296599142:caption="Utilisation of bike stations in Dublin - classified by size of
1511296599143:the station.",
1511296599144:format="html")
1511296599600:utilisation.by.size %>%
1511296599602:kable("html") %>%
1511296599603:kable_styling()
1511296631921:knitr::opts_chunk$set(echo=TRUE)
1511296631923:options(width=40)
1511296631925:require(DT)
1511296631927:library(kableExtra)
1511296651321:install.packages(kableExtra)
1511296654575:install.packages('kableExtra')
1511296678887:# TODO: Learn and add CSS to the tables. Kick ass!
1511296678888:kable(utilisation.by.size,
1511296678890:caption="Utilisation of bike stations in Dublin - classified by size of
1511296678891:the station.",
1511296678893:format="html")
1511296678982:utilisation.by.size %>%
1511296678985:kable("html") %>%
1511296678987:kable_styling()
1511296692782:library(kableExtra)
1511296706067:knitr::opts_chunk$set(echo=TRUE)
1511296706068:options(width=40)
1511296706070:require(DT)
1511296706072:require(kableExtra)
1511296706075:require(knitr)
1511296706083:utilisation.by.size %>%
1511296706084:kable("html") %>%
1511296706086:kable_styling()
1511296711612:kable(utilisation.by.size,
1511296711613:caption="Utilisation of bike stations in Dublin - classified by size of
1511296711615:the station.",
1511296711616:format="html")
1511296711673:utilisation.by.size %>%
1511296711674:kable("html") %>%
1511296711676:kable_styling()
1511296720023:utilisation.by.size %>%
1511296720025:kable("html") %>%
1511296720026:kable_styling()
1511296789060:# TODO: Learn and add CSS to the tables. Kick ass!
1511296789061:kable(utilisation.by.size)
1511296789128:# datatable(utilisation.by.size, autoHideNavigation=TRUE)
1511296802124:kable(utilisation.by.size, format = 'html')
1511296856922:require(magrittr)
1511296868696:utilisation.by.size %>%
1511296868698:kable(utilisation.by.size) %>%
1511296868699:kable_styling()
1511296878675:# TODO: Learn and add CSS to the tables. Kick ass!
1511296878676:utilisation.by.size %>%
1511296878678:kable(utilisation.by.size) %>%
1511296878680:kable_styling()
1511296886314:utilisation.by.size
1511296902763:utilisation.by.size %>%
1511296902764:kable('html') %>%
1511296902766:kable_styling()
1511299189343:?kable
1511299565091:View(open.stations)
1511299594392:total.stands.count <- sum(dublin.data.df$bike_stands)
1511299645647:total.stands.count <- sum(open.stations$bike_stands)
1511299649820:total.stands.count <- sum(open.stations$bike_stands)
1511299834152:install.packages('lubridate')
1511299834156:install.packages('readODS')
1511299834160:install.packages('rvest')
1511299834165:install.packages('stringr')
1511299918146:?install.packages
1511300045961:setwd("~/MSc in Data Analytics/Working with Data/Assignments/1")
